[global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
public partial class FooQuery
{
    private readonly IOperationStore _operationStore;
    private readonly IOperationExecutor<Foo> _operationExecutor;

    public FooQuery(
        IOperationStore operationStore,
        IOperationExecutor<Foo> operationExecutor)
    {
        _operationStore = operationStore
             ?? throw new ArgumentNullException(nameof(operationStore));
        _operationExecutor = operationExecutor
             ?? throw new ArgumentNullException(nameof(operationExecutor));
    }

    public async Task<IOperationResult<Foo>> Execute(
        string name,
        CancellationToken cancellationToken = default)
    {
        var request = new FooQueryRequest();
        request.Variables.Add("name", name);

        return await _operationExecutor
            .ExecuteAsync(
                request,
                cancellationToken
            )
            .ConfigureAwait(false);
    }

    public IOperationObservable<Foo> Watch(string name)
    {
    }
}
