// CharacterEntity

namespace Foo
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class CharacterEntity
    {
        public global::StrawberryShake.EntityId Id { get; }

        public String Name { get; set; }

        public IReadOnlyList<Episode?>? AppearsIn { get; set; }
    }
}


// Episode

namespace Foo
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public enum Episode
    {
        NewHope,
        Empire,
        Jedi
    }
}


// GetHero

namespace Foo
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetHeroFactory
        : IOperationResultDataFactory<GetHero>
    {
        private readonly IEntityStore _entityStore;
        private readonly IEntityMapper<CharacterEntity, GetHero_Hero> _getHero_HeroFromCharacterEntityMapper;

        public GetHeroFactory(
            IEntityStore entityStore,
            IEntityMapper<CharacterEntity, GetHero_Hero> getHero_HeroFromCharacterEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new ArgumentNullException(nameof(entityStore));
            _getHero_HeroFromCharacterEntityMapper = getHero_HeroFromCharacterEntityMapper
                 ?? throw new ArgumentNullException(nameof(getHero_HeroFromCharacterEntityMapper));
        }

        public GetHero Create(IOperationResultDataInfo dataInfo)
        {
            if (dataInfo is GetHeroInfo info)
            {
                IGetHero_Hero hero = default!;

                if (info.HeroId.Name.Equals(
                    "Character",
                    StringComparison.Ordinal
                ))
                {
                    hero = GetHero_HeroFromCharacterEntityMapper(_entityStore.GetEntity<CharacterEntity>(info.HeroId));
                }

                return new GetHero(hero);
            }

            throw new ArgumentException("GetHeroInfo expected.");
        }
    }
}


// GetHero

namespace Foo
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetHeroInfo
        : IOperationResultDataInfoInfo
    {
        private readonly IReadOnlyCollection<EntityId> _entityIds;
        private readonly ulong _version;

        public GetHeroInfo(
            global::StrawberryShake.EntityId? hero,
            IReadOnlyCollection<EntityId> entityIds,
            ulong version)
        {
            Hero = hero;
            _entityIds = entityIds
                 ?? throw new ArgumentNullException(nameof(entityIds));
            _version = version
                 ?? throw new ArgumentNullException(nameof(version));
        }

        public global::StrawberryShake.EntityId? Hero { get; }

        public IReadOnlyCollection<EntityId> IOperationResultDataInfo.EntityIds => _entityIds;

        public ulong IOperationResultDataInfo.Version => _version;

        public GetHeroInfo IOperationResultDataInfo.WithVersion(ulong version)
        {
            return new GetHeroInfo(
                Hero,
                _entityIds,
                _version
            );
        }
    }
}


// GetHero

namespace Foo
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetHero
        : IGetHero
    {
        public GetHero(IGetHero_Hero? hero)
        {
            Hero = hero;
        }

        public IGetHero_Hero? Hero { get; }
    }
}


// GetHero_Hero

namespace Foo
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetHero_HeroFromCharacterEntityMapper
        : IEntityMapper<CharacterEntity, GetHero_Hero>
    {
        private readonly IEntityStore _entityStore;

        public GetHero_HeroFromCharacterEntityMapper(IEntityStore entityStore)
        {
            _entityStore = entityStore
                 ?? throw new ArgumentNullException(nameof(entityStore));
        }

        public GetHero_Hero Map(CharacterEntity entity)
        {
            return new GetHero_Hero(
                entity.Name,
                entity.AppearsIn
            );
        }
    }
}


// GetHero_Hero

namespace Foo
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetHero_Hero
        : IGetHero_Hero
    {
        public GetHero_Hero(
            String name,
            IReadOnlyList<Episode?>? appearsIn)
        {
            Name = name;
            AppearsIn = appearsIn;
        }

        public String Name { get; }

        public IReadOnlyList<Episode?>? AppearsIn { get; }
    }
}


// IGetHero

namespace Foo
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public interface IGetHero
    {
        public IGetHero_Hero? Hero { get; }
    }
}


// IGetHero_Hero

namespace Foo
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public interface IGetHero_Hero
    {
        public String Name { get; }

        public IReadOnlyList<Episode?>? AppearsIn { get; }
    }
}


// GetHeroQuery

namespace Foo
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetHeroQueryDocument
    {
        private const string _bodyString = 
            @"query GetHero {
  hero(episode: NEW_HOPE) {
    name
    appearsIn
  }
}";
        private static readonly byte[] _body = Encoding.UTF8.GetBytes(_bodyString);

        private GetHeroQueryDocument()
        {
        }

        public GetHeroQueryDocument Instance { get; } = new();

        public OperationKind Kind => OperationKind.Query;

        public ReadOnlySpan<byte> Body => _body;

        private override string ToString()
        {
            return _bodyString;
        }
    }
}


// GetHeroQuery

namespace Foo
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetHeroQuery
    {
        private readonly IOperationExecutor<IGetHero> _operationExecutor;

        public GetHeroQuery(IOperationExecutor<IGetHero> operationExecutor)
        {
            _operationExecutor = operationExecutor
                 ?? throw new ArgumentNullException(nameof(operationExecutor));
        }

        public async Task<IOperationResult<IGetHero>> Execute(CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            
            return await _operationExecutor
                .ExecuteAsync(
                    request,
                    cancellationToken
                )
                .ConfigureAwait(false);
        }

        public IOperationObservable<IGetHero> Watch(ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private OperationRequest CreateRequest()
        {
            return new(
                "IGetHero",
                GetHeroQueryDocument.Instance
            );
        }
    }
}


// GetHeroBuilder

namespace Foo
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class GetHeroBuilder
        : IOperationResultBuilder<global::System.Text.Json.JsonElement, IGetHero>
    {
        private readonly IEntityStore _entityStore;
        private readonly Func<global::System.Text.Json.JsonElement, global::StrawberryShake.EntityId> _extractId;
        private readonly IOperationResultDataFactory<IGetHero> _resultDataFactory;
        private ILeafValueParser<global::System.String, Episode> _episodeParser;
        private ILeafValueParser<global::System.String, global::System.String> _stringParser;

        public GetHeroBuilder(
            IEntityStore entityStore,
            Func<global::System.Text.Json.JsonElement, global::StrawberryShake.EntityId> extractId,
            IOperationResultDataFactory<IGetHero> resultDataFactory,
            ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore
                 ?? throw new ArgumentNullException(nameof(entityStore));
            _extractId = extractId
                 ?? throw new ArgumentNullException(nameof(extractId));
            _resultDataFactory = resultDataFactory
                 ?? throw new ArgumentNullException(nameof(resultDataFactory));
            _episodeParser = serializerResolver.GetLeafValueParser<global::System.String, Episode>("Episode")
                 ?? throw new ArgumentNullException(nameof(_episodeParser));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String")
                 ?? throw new ArgumentNullException(nameof(_stringParser));
        }

        public IOperationResult<IGetHero> Build(Response<JsonDocument> response)
        {
            (IGetHero Result, IGetHeroInfo Info)? data = null;

            if (response.Body is not null
                && response.Body.RootElement.TryGetProperty("data", out JsonElement obj))
            {
                data = BuildData(obj);
            }

            return new OperationResult<IGetHero>(
                data?.Result,
                data?.Info,
                _resultDataFactory,
                null
            );
        }

        private (IGetHero, IGetHeroInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            using IEntityUpdateSession session = _entityStore.BeginUpdate();
            var entityIds = new HashSet<global::StrawberryShake.EntityId>();

            global::StrawberryShake.EntityId HeroId = UpdateIGetHero_HeroEntity(
                obj.GetPropertyOrNull("hero"),
                entityIds
            );

            var resultInfo = new GetHeroInfo(
                HeroId,
                entityIds,
                session.Version
            );

            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId UpdateIGetHero_HeroEntity(
            JsonElement? obj,
            ISet<global::StrawberryShake.EntityId> entityIds)
        {
            global::StrawberryShake.EntityId entityId = _extractId(obj);
            entityIds.Add(entityId);

            if (entityId.Name.Equals("GetHero_Hero", StringComparison.Ordinal))
            {
                GetHero_HeroEntity GetHero_HeroEntity = _entityStore.GetOrCreate<GetHero_HeroEntity>(entityId);
                entity.Name = DeserializeNonNullableString(obj.GetPropertyOrNull("name"));
                entity.AppearsIn = DeserializeEpisodeArray(obj.GetPropertyOrNull("appearsIn"));

                return entityId;
            }

            throw new NotSupportedException();
        }

        private String DeserializeNonNullableString(global::System.Text.Json.JsonElement obj)
        {
            if (obj == null)
            {
                throw new InvalidOperationException();
            }

            return _stringParser.Parse(obj.GetString()!);
        }

        private IList<global::StrawberryShake.EntityId> DeserializeEpisodeArray(
            JsonElement? obj,
            ISet<global::StrawberryShake.EntityId> entityIds)
        {
            var episodes = new List<Episode>();
            foreach (JsonElement child in obj.EnumerateArray())
            {
                episodes.Add(DeserializeEpisode(child));
            }

            return episodes;
        }

        private Episode DeserializeEpisode(global::System.Text.Json.JsonElement obj)
        {
            return _episodeParser.Parse(obj.GetString()!);
        }
    }
}


// FooClient

namespace Foo
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public partial class FooClient
    {
        private readonly GetHeroQuery _getHeroQuery;

        public FooClient(GetHeroQuery getHeroQuery)
        {
            _getHeroQuery = getHeroQuery
                 ?? throw new ArgumentNullException(nameof(getHeroQuery));
        }

        public GetHeroQuery GetHeroQuery()
        {
            return _getHeroQuery;
        }
    }
}


// EntityIdFactory

[global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
public static partial class EntityIdFactory
{
    public static global::StrawberryShake.EntityId CreateEntityId(global::System.Text.Json.JsonElement obj)
    {
        string typeName = obj.GetProperty("__typename").GetString()!;
        
        return typeName switch
        {
            "Character" => CreateCharacterEntityId(obj, typeName),
            _ => throw new global::System.NotSupportedException()
        };
    }

    public static global::StrawberryShake.EntityId CreateCharacterEntityId(
        global::System.Text.Json.JsonElement obj,
        global::System.String type)
    {
        return new global::StrawberryShake.EntityId(
            type,
            (obj.GetProperty("id").Getglobal::System.String()!));
    }
}


