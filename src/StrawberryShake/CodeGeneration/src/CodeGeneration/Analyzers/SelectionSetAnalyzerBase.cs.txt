using System;
using System.Collections.Generic;
using System.Linq;
using HotChocolate;
using HotChocolate.Language;
using HotChocolate.Types;
using HotChocolate.Utilities;
using StrawberryShake.CodeGeneration.Analyzers.Models2;
using StrawberryShake.CodeGeneration.Types;
using StrawberryShake.CodeGeneration.Utilities;
using StrawberryShake.CodeGeneration.Analyzers.Types;
using WithDirectives = HotChocolate.Language.IHasDirectives;
using static StrawberryShake.CodeGeneration.Utilities.NameUtils;

namespace StrawberryShake.CodeGeneration.Analyzers
{
    internal abstract class SelectionSetAnalyzer
    {
        public abstract OutputTypeModel Analyze(
           IDocumentAnalyzerContext2 context,
           ISelectionSetVariants selectionVariants,
           Path selectionPath,
           IType fieldType);

        protected OutputTypeModel CreateClassModel(
            IDocumentAnalyzerContext2 context,
            IFragment returnTypeFragment,
            IFieldSelection fieldSelection,
            Path path)
        {
            string className = context.ResolveTypeName(
                GetClassName(returnTypeFragment.Name),
                returnTypeFragment.SelectionSet,
                path);

            var modelClass = new OutputTypeModel(
                className,
                returnTypeFragment.TypeCondition.Description,
                false,
                returnTypeFragment.TypeCondition,
                returnTypeFragment.SelectionSet,
                CreateFields(
                    (IComplexOutputType)returnTypeFragment.Fragment.TypeCondition,
                    selection.SelectionSet.Selections,
                    _ => true,
                    path));

            return modelClass;
        }

        private static IReadOnlyList<OutputFieldModel> CreateFields(
            IComplexOutputType type,
            IEnumerable<ISelectionNode> selections,
            Func<string, bool> addField,
            Path path)
        {
            var fields = new Dictionary<string, FieldSelection>();

            foreach (FieldNode selection in selections.OfType<FieldNode>())
            {
                NameString responseName = selection.Alias == null
                    ? selection.Name.Value
                    : selection.Alias.Value;

                if (addField(responseName))
                {
                    FieldCollector.ResolveFieldSelection(
                        type,
                        selection,
                        path,
                        fields);
                }
            }

            return fields.Values.Select(t =>
            {
                string responseName = (t.FieldSyntax.Alias ?? t.FieldSyntax.Name).Value;
                return new OutputFieldModel(
                    t.ResponseName,
                    t.Field.Description,
                    t.Field,
                    t.Field.Type,
                    t.FieldSyntax,
                    path.Append(responseName));
            }).ToList();
        }

        protected static IFragmentNode ResolveReturnType(
            INamedType namedType,
            Selection selection)
        {
            var returnType = new FragmentNode(new Fragment(
                CreateName(namedType, fieldSelection, GetClassName),
                FragmentKind.Structure,
                namedType,
                selection.SelectionSet));

            returnType.Children.AddRange(selection.Fragments);

            return HoistFragment(namedType, returnType);
        }
    }
}
