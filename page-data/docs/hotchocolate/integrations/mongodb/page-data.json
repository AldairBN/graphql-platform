{"componentChunkName":"component---src-templates-doc-page-template-tsx","path":"/docs/hotchocolate/integrations/mongodb","result":{"data":{"file":{"childMdx":{"fields":{"slug":"/hotchocolate/integrations/mongodb/"},"frontmatter":{"title":"MongoDB"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"MongoDB\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"HotChocolate has a data integration for MongoDB.\\nWith this integration, you can translate paging, filtering, sorting, and projections, directly into native MongoDB queries.\"), mdx(\"p\", null, \"You can find a example project in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ChilliCream/hotchocolate-examples/tree/master/misc/MongoDB\"\n  }), \"HotChocolate Examples\")), mdx(\"h1\", null, \"Get Started\"), mdx(\"p\", null, \"To use the MongoDB integration, you need to install the package \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HotChocolate.Data.MongoDb\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"dotnet add package HotChocolate.Data.MongoDb\\n\")), mdx(\"h1\", null, \"MongoExecutable\"), mdx(\"p\", null, \"The whole integration builds around \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IExecutable<T>\"), \".\\nThe integration provides you the extension method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AsExecutable\"), \" on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IMongoCollection<T>\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IAggregateFluent<T>\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IFindFluent<T>\"), \"\\nThe execution engine picks up the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IExecutable\"), \" and executes it efficiently.\\nYou are free to use any form of aggregation or find a pipeline before you execute \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AsExecutable\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"[UsePaging]\\n[UseProjection]\\n[UseSorting]\\n[UseFiltering]\\npublic IExecutable<Person> GetPersons([Service] IMongoCollection<Person> collection)\\n{\\n    return collection.AsExecutable();\\n}\\n\\n[UseFirstOrDefault]\\npublic IExecutable<Person> GetPersonById(\\n    [Service] IMongoCollection<Person> collection,\\n    Guid id)\\n{\\n    return collection.Find(x => x.Id == id).AsExecutable();\\n}\\n\")), mdx(\"h1\", null, \"Filtering\"), mdx(\"p\", null, \"To use MongoDB filtering you need to register the convention on the schema builder:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"services\\n    .AddGraphQLServer()\\n    .AddQueryType<Query>()\\n    .AddMongoDbFiltering();\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"To use MongoDB filtering alongside with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IQueryable\"), \"/\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IEnumerable\"), \", you have to register the MongoDB convention under a different scope.\\nYou can specify the scope on the schema builder by executing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AddMongoDbFiltering(\\\"yourScope\\\")\"), \".\\nYou then have to specify this scope on each method you use MongoDb filtering: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[UseFiltering(Scope = \\\"yourScope\\\")]\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UseFiltering(scope = \\\"yourScope\\\")\"))), mdx(\"p\", null, \"Your filters are now converted to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BsonDocument\"), \"s and applied to the executable.\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"GraphQL Query:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"query GetPersons {\\n  persons(\\n    where: {\\n      name: { eq: \\\"Yorker Shorton\\\" }\\n      addresses: { some: { street: { eq: \\\"04 Leroy Trail\\\" } } }\\n    }\\n  ) {\\n    name\\n    addresses {\\n      street\\n      city\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Mongo Query\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"find\\\": \\\"person\\\",\\n  \\\"filter\\\": {\\n    \\\"Name\\\": { \\\"$eq\\\": \\\"Yorker Shorton\\\" },\\n    \\\"Addresses\\\": { \\\"$elemMatch\\\": { \\\"Street\\\": { \\\"$eq\\\": \\\"04 Leroy Trail\\\" } } }\\n  }\\n}\\n\")), mdx(\"h1\", null, \"Sorting\"), mdx(\"p\", null, \"To use MongoDB sorting you need to register the convention on the schema builder:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"services\\n    .AddGraphQLServer()\\n    .AddQueryType<Query>()\\n    .AddMongoDbSorting();\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"To use MongoDB Sorting alongside with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IQueryable\"), \"/\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IEnumerable\"), \", you have to register the MongoDB convention under a different scope.\\nYou can specify the scope on the schema builder by executing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AddMongoDbSorting(\\\"yourScope\\\")\"), \".\\nYou then have to specify this scope on each method you use MongoDb Sorting: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[UseSorting(Scope = \\\"yourScope\\\")]\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UseSorting(scope = \\\"yourScope\\\")\"))), mdx(\"p\", null, \"Your sorting is now converted to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BsonDocument\"), \"s and applied to the executable.\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"GraphQL Query:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"query GetPersons {\\n  persons(order: [{ name: ASC }, { mainAddress: { city: DESC } }]) {\\n    name\\n    addresses {\\n      street\\n      city\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Mongo Query\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"find\\\": \\\"person\\\",\\n  \\\"filter\\\": {},\\n  \\\"sort\\\": { \\\"Name\\\": 1, \\\"MainAddress.City\\\": -1 }\\n}\\n\")), mdx(\"h1\", null, \"Projections\"), mdx(\"p\", null, \"To use MongoDB projections you need to register the convention on the schema builder:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"services\\n    .AddGraphQLServer()\\n    .AddQueryType<Query>()\\n    .AddMongoDbProjections();\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"To use MongoDB Projections alongside with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IQueryable\"), \"/\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IEnumerable\"), \", you have to register the MongoDB convention under a different scope.\\nYou can specify the scope on the schema builder by executing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AddMongoDbProjections(\\\"yourScope\\\")\"), \".\\nYou then have to specify this scope on each method you use MongoDb Projections: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[UseProjections(Scope = \\\"yourScope\\\")]\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UseProjections(scope = \\\"yourScope\\\")\"))), mdx(\"p\", null, \"Projections do not always lead to a performance increase.\\nEven though MongoDB processes and transfers less data, it more often than not harms query performance.\\nThis \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://betterprogramming.pub/improve-mongodb-performance-using-projection-c08c38334269\"\n  }), \"Medium article by Tek Loon\"), \" explains how and when to use projections well.\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"GraphQL Query:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"query GetPersons {\\n  persons {\\n    name\\n    addresses {\\n      city\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Mongo Query\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"find\\\": \\\"person\\\",\\n  \\\"filter\\\": {},\\n  \\\"projection\\\": { \\\"Addresses.City\\\": 1, \\\"Name\\\": 1 }\\n}\\n\")), mdx(\"h1\", null, \"Paging\"), mdx(\"p\", null, \"The integration comes with providers for offset and cursor-based pagination\"), mdx(\"h2\", null, \"Cursor Pagination\"), mdx(\"p\", null, \"To use cursor based pagination annoate you resolver with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[UseMongoDbPaging]\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".UseMongoDbPaging()\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"[UseMongoDbPaging]\\npublic IExecutable<Person> GetPersons([Service] IMongoCollection<Person> collection)\\n{\\n    return collection.AsExecutable();\\n}\\n\")), mdx(\"p\", null, \"You can then execute queries like the following one:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"query GetPersons {\\n  persons(first: 50, after: \\\"OTk=\\\") {\\n    nodes {\\n      name\\n      addresses {\\n        city\\n      }\\n    }\\n    pageInfo {\\n      endCursor\\n      hasNextPage\\n      hasPreviousPage\\n      startCursor\\n    }\\n  }\\n}\\n\")), mdx(\"h2\", null, \"Offset Pagination\"), mdx(\"p\", null, \"To use cursor based pagination annoate you resolver with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[UseMongoDbPaging]\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".UseMongoDbPaging()\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"[UseMongoDbOffsetPaging]\\npublic IExecutable<Person> GetPersons([Service] IMongoCollection<Person> collection)\\n{\\n    return collection.AsExecutable();\\n}\\n\")), mdx(\"p\", null, \"You can then execute queries like the following one:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"query GetPersons {\\n  persons(skip: 50, take: 50) {\\n    items {\\n      name\\n      addresses {\\n        city\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n      hasPreviousPage\\n    }\\n  }\\n}\\n\")), mdx(\"h1\", null, \"FirstOrDefault / SingleOrDefault\"), mdx(\"p\", null, \"Sometimes you may want to return only a single object of a collection.\\nTo limit the response to one element you can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UseFirstOrDefault\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UseSingleOrDefault\"), \" middleware.\\nHotChocolate will rewrite the type of the field from a list type to an object type.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"[UseFirstOrDefault]\\npublic IExecutable<Person> GetPersonById(\\n    [Service] IMongoCollection<Person> collection,\\n    Guid id)\\n{\\n    return collection.Find(x => x.Id == id).AsExecutable();\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#get-started","title":"Get Started"},{"url":"#mongoexecutable","title":"MongoExecutable"},{"url":"#filtering","title":"Filtering"},{"url":"#sorting","title":"Sorting"},{"url":"#projections","title":"Projections"},{"url":"#paging","title":"Paging","items":[{"url":"#cursor-pagination","title":"Cursor Pagination"},{"url":"#offset-pagination","title":"Offset Pagination"}]},{"url":"#firstordefault--singleordefault","title":"FirstOrDefault / SingleOrDefault"}]}}},"site":{"siteMetadata":{"siteUrl":"https://chillicream.com","repositoryUrl":"https://github.com/ChilliCream/hotchocolate","tools":{"slack":"https://bit.ly/joinchilli"}}},"config":{"products":[{"path":"hotchocolate","title":"Hot Chocolate","description":"Build your own thin GraphQL API layer on top of any resource.","versions":[{"path":"","title":"v11.1 (latest)","items":[{"path":"index","title":"Introduction","items":null},{"path":"get-started","title":"Get Started","items":null},{"path":"defining-a-schema","title":"Defining a schema","items":[{"path":"index","title":"Schema basics"},{"path":"descriptions","title":"Schema Documentation"},{"path":"operations","title":"Operations"},{"path":"versioning","title":"Versioning"},{"path":"unions-and-interfaces","title":"Unions and Interfaces"},{"path":"extending-types","title":"Extending types"},{"path":"scalars","title":"Scalars"},{"path":"directives","title":"Directives"}]},{"path":"fetching-data","title":"Fetching data","items":[{"path":"index","title":"Resolver"},{"path":"fetching-from-databases","title":"Fetching from Databases"},{"path":"fetching-from-rest","title":"Fetching from REST"},{"path":"dataloader","title":"DataLoader"},{"path":"pagination","title":"Pagination"},{"path":"filtering","title":"Filtering"},{"path":"sorting","title":"Sorting"},{"path":"projections","title":"Projections"}]},{"path":"distributed-schema","title":"Distributed Schemas","items":[{"path":"index","title":"Overview"},{"path":"schema-stitching","title":"Schema Stitching"},{"path":"schema-federations","title":"Schema Federations"},{"path":"schema-configuration","title":"Schema Configuration"}]},{"path":"integrations","title":"Integrations","items":[{"path":"index","title":"Overview"},{"path":"entity-framework","title":"Entity Framework"},{"path":"spatial-data","title":"Spatial Data"},{"path":"mongodb","title":"MongoDB"}]},{"path":"performance","title":"Performance","items":[{"path":"index","title":"Overview"},{"path":"persisted-queries","title":"Persisted queries"},{"path":"automatic-persisted-queries","title":"Automatic persisted queries"}]},{"path":"api-reference","title":"API Reference","items":[{"path":"index","title":"Overview"},{"path":"object-type","title":"Object Type"},{"path":"custom-attributes","title":"Custom Attributes"},{"path":"language","title":"Language"},{"path":"extending-filtering","title":"Extending Filtering"},{"path":"visitors","title":"Visitors"},{"path":"aspnetcore","title":"ASP.NET Core"},{"path":"dependency-injection","title":"Dependency Injection"},{"path":"executable","title":"Executable"},{"path":"apollo-tracing","title":"Apollo Tracing"},{"path":"coding-approaches","title":"Coding Approaches"},{"path":"migrate-from-10-to-11","title":"Migrate from 10.5 to 11.0"}]}]},{"path":"v10","title":"v10 (previous)","items":[{"path":"index","title":"Introduction","items":null},{"path":"code-first","title":"Code-First","items":null},{"path":"schema-first","title":"Schema-First","items":null},{"path":"schema","title":"Schema","items":[{"path":"index","title":"Schema"},{"path":"object-type","title":"Object Type"},{"path":"interface-type","title":"Interface Type"},{"path":"union-type","title":"Union Type"},{"path":"input-object-type","title":"Input Object Type"},{"path":"enum-type","title":"Enum Type"},{"path":"descriptions","title":"Schema Descriptions"},{"path":"custom-scalar-types","title":"Scalar Type Support"},{"path":"descriptor-attributes","title":"Descriptor Attributes"},{"path":"extending-types","title":"Custom Base Classes"},{"path":"directives","title":"Directives"},{"path":"resolvers","title":"Resolvers"},{"path":"relay","title":"Relay"},{"path":"conventions","title":"Conventions"},{"path":"options","title":"Schema Options"}]},{"path":"data-fetching","title":"Data Fetching","items":[{"path":"index","title":"Data Loaders"},{"path":"pagination","title":"Pagination"},{"path":"filters","title":"Filters"}]},{"path":"security","title":"Security","items":[{"path":"index","title":"Authorization"},{"path":"security","title":"Security"}]},{"path":"execution-engine","title":"Execution Engine","items":[{"path":"index","title":"Middleware"},{"path":"validation-rules","title":"Validation Rules"},{"path":"instrumentation","title":"Instrumentation"},{"path":"apollo-tracing","title":"Apollo Tracing"},{"path":"batching","title":"Batching"},{"path":"persisted-queries","title":"Persisted Queries"},{"path":"custom-context-data","title":"Custom Context Data"},{"path":"subscriptions","title":"Subscriptions"},{"path":"type-conversion","title":"Type Conversion"},{"path":"error-filter","title":"Error Filter"},{"path":"execution-options","title":"Execution Options"}]},{"path":"server","title":"Server","items":[{"path":"index","title":"ASP.Net"},{"path":"dependency-injection","title":"Dependency Injection"}]},{"path":"stitching","title":"Schema Stitching","items":null},{"path":"tooling","title":"Tooling","items":null},{"path":"advanced","title":"Advanced","items":[{"path":"index","title":"Parser"},{"path":"dotnet-cli","title":".Net CLI"}]},{"path":"tutorials","title":"Tutorials","items":[{"path":"index","title":"Entity Framework"}]},{"path":"examples","title":"Examples","items":[{"path":"index","title":"Star Wars"},{"path":"slack-clone","title":"Slack Clone"},{"path":"other-examples","title":"Other Examples"}]}]}]},{"path":"bananacakepop","title":"Banana Cake Pop","description":"Use this GUI to get deep insights from any GraphQL API.","versions":[{"path":"","title":"v1 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"strawberryshake","title":"Strawberry Shake","description":"The only GraphQL client you will every need in the .NET ecosystem.","versions":[{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null},{"path":"get-started","title":"Get Started","items":[{"path":"index","title":"Blazor"},{"path":"xamarin","title":"Xamarin"},{"path":"console","title":"Console"}]},{"path":"subscriptions","title":"Subscriptions","items":null},{"path":"tooling","title":"Tooling / CLI","items":null},{"path":"caching","title":"Caching","items":[{"path":"index","title":"Overview"},{"path":"entities","title":"Entities"},{"path":"invalidation","title":"Invalidation"}]},{"path":"performance","title":"Performance","items":[{"path":"index","title":"Overview"},{"path":"persisted-queries","title":"Persisted Queries"},{"path":"persisted-state","title":"Persisted State"}]},{"path":"networking","title":"Networking","items":[{"path":"index","title":"Protocols"},{"path":"authentication","title":"Authentication"}]},{"path":"scalars","title":"Scalars","items":null}]}]},{"path":"greendonut","title":"Green Donut","description":"Configure data loaders and caching for GraphQL endpoints.","versions":[{"path":"","title":"v11 (latest)","items":[{"path":"index","title":"Introduction","items":null}]},{"path":"v10","title":"v10 (previous)","items":[{"path":"index","title":"Introduction","items":null},{"path":"installation","title":"Installation","items":null},{"path":"usage","title":"Usage","items":null},{"path":"api","title":"API","items":null},{"path":"advanced-concepts","title":"Advanced Concepts","items":[{"path":"index","title":"Custom DataLoader"},{"path":"diagnostics","title":"Diagnostic Events"}]}]}]}]}},"pageContext":{"originPath":"hotchocolate/integrations/mongodb.md"}},"staticQueryHashes":["1014893094","2890364758","4218812017"]}