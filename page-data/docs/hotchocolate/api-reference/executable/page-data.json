{"componentChunkName":"component---src-templates-doc-page-template-tsx","path":"/docs/hotchocolate/api-reference/executable","result":{"data":{"file":{"childMdx":{"fields":{"slug":"/hotchocolate/api-reference/executable/"},"frontmatter":{"title":"Executable"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Executable\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IExecutable\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IExecutable<T>\"), \" interfaces are intended to be used by data providers.\\nThese interfaces can abstract any kind of data source.\\nThe data or domain layer can wrap data in an executable and pass it to the GraphQL layer.\\nA GraphQL resolver that returns an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IExecutable<T>\"), \" is recognized as a list.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"public class User\\n{\\n    public string Name { get; }\\n}\\n\\npublic interface IUserRepostiory\\n{\\n    public IExecutable<User> FindAll();\\n}\\n\\npublic class Query\\n{\\n    public IExecutable<User> GetUsers([Service] IUserRepostiory repo) =>\\n        repo.FindAll();\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sdl\"\n  }), \"type Query {\\n    users: [User!]!\\n}\\n\")), mdx(\"p\", null, \"This abstraction can be used to completely decouple the GraphQL layer form the database-specific knowledge.\"), mdx(\"p\", null, \"Filtering, sorting, projections et al, can pick up the executable and apply logic to it. There is still\\na database-specific provider needed for these features, but it is opaque to the GraphQL layer.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IExecutable\"), \" is known to the execution engine. The engine calls \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ToListAsync\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FirstOrDefault\"), \" or\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SingleOrDefault\"), \" on the executable. The executable shall execute it in the most efficient way for the\\ndatabase.\"), mdx(\"h1\", null, \"API\"), mdx(\"h2\", null, \"Source\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"    object Source { get; }\\n\")), mdx(\"p\", null, \"The source property stores the current state of the executable\"), mdx(\"p\", null, \"In the EnittyFramework executable this property holds the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IQueryable\"), \". In the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MongoExecutable\"), \" it is the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DbSet<T>\"), \" or the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IAggregateFluent<T>\"), \". \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Source\"), \" is deliberately read-only. If you have a custom implementation\\nof \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IExecutable\"), \" and you want to set the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Source\"), \", you should create a method that returns a new executable\\nwith the new source\"), mdx(\"h2\", null, \"ToListAsync\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"    ValueTask<IList> ToListAsync(CancellationToken cancellationToken);\\n\")), mdx(\"p\", null, \"Should return a list of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<T>\"), \".\"), mdx(\"h2\", null, \"FirstOrDefault\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"    ValueTask<IList> FirstOrDefault(CancellationToken cancellationToken);\\n\")), mdx(\"p\", null, \"Should return the first element of a sequence, or a default value if the sequence contains no elements.\"), mdx(\"h2\", null, \"SingleOrDefault\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"    ValueTask<IList> SingleOrDefault(CancellationToken cancellationToken);\\n\")), mdx(\"p\", null, \"Should return the only element of a default value if no such element exists. This method\\nshould throw an exception if more than one element satisfies the condition.\"), mdx(\"h2\", null, \"Print\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"string Print();\\n\")), mdx(\"p\", null, \"Prints the executable in its current state\"), mdx(\"h1\", null, \"Example\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"public class EntityFrameworkExecutable<T> : QueryableExecutable<T>\\n{\\n    public IQueryable<T> Source { get; }\\n\\n    object IExecutable.Source => Source;\\n\\n    public EntityFrameworkExecutable(IQueryable<T> queryable) : base(queryable)\\n    {\\n    }\\n\\n    /// <summary>\\n    /// Returns a new enumerable executable with the provided source\\n    /// </summary>\\n    /// <param name=\\\"source\\\">The source that should be set</param>\\n    /// <returns>The new instance of an enumerable executable</returns>\\n    public QueryableExecutable<T> WithSource(IQueryable<T> source)\\n    {\\n        return new QueryableExecutable<T>(source);\\n    }\\n\\n    public override async ValueTask<IList> ToListAsync(CancellationToken cancellationToken) =>\\n        await Source.ToListAsync(cancellationToken).ConfigureAwait(false);\\n\\n    public override async ValueTask<object?> FirstOrDefaultAsync(\\n        CancellationToken cancellationToken) =>\\n        await Source.FirstOrDefaultAsync(cancellationToken).ConfigureAwait(false);\\n\\n    public override async ValueTask<object?> SingleOrDefaultAsync(\\n        CancellationToken cancellationToken) =>\\n        await Source.SingleOrDefaultAsync(cancellationToken).ConfigureAwait(false);\\n\\n    public override string Print() => Source.ToQueryString();\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#api","title":"API","items":[{"url":"#source","title":"Source"},{"url":"#tolistasync","title":"ToListAsync"},{"url":"#firstordefault","title":"FirstOrDefault"},{"url":"#singleordefault","title":"SingleOrDefault"},{"url":"#print","title":"Print"}]},{"url":"#example","title":"Example"}]}}},"site":{"siteMetadata":{"siteUrl":"https://chillicream.com","repositoryUrl":"https://github.com/ChilliCream/hotchocolate","tools":{"slack":"https://bit.ly/joinchilli"}}},"config":{"products":[{"path":"hotchocolate","title":"Hot Chocolate","description":"Build your own thin GraphQL API layer on top of any resource.","versions":[{"path":"","title":"v11.1 (latest)","items":[{"path":"index","title":"Introduction","items":null},{"path":"get-started","title":"Get Started","items":null},{"path":"defining-a-schema","title":"Defining a schema","items":[{"path":"index","title":"Schema basics"},{"path":"descriptions","title":"Schema Documentation"},{"path":"operations","title":"Operations"},{"path":"versioning","title":"Versioning"},{"path":"unions-and-interfaces","title":"Unions and Interfaces"},{"path":"extending-types","title":"Extending types"},{"path":"scalars","title":"Scalars"},{"path":"directives","title":"Directives"}]},{"path":"fetching-data","title":"Fetching data","items":[{"path":"index","title":"Resolver"},{"path":"fetching-from-databases","title":"Fetching from Databases"},{"path":"fetching-from-rest","title":"Fetching from REST"},{"path":"dataloader","title":"DataLoader"},{"path":"pagination","title":"Pagination"},{"path":"filtering","title":"Filtering"},{"path":"sorting","title":"Sorting"},{"path":"projections","title":"Projections"}]},{"path":"distributed-schema","title":"Distributed Schemas","items":[{"path":"index","title":"Overview"},{"path":"schema-stitching","title":"Schema Stitching"},{"path":"schema-federations","title":"Schema Federations"},{"path":"schema-configuration","title":"Schema Configuration"}]},{"path":"integrations","title":"Integrations","items":[{"path":"index","title":"Overview"},{"path":"entity-framework","title":"Entity Framework"},{"path":"spatial-data","title":"Spatial Data"},{"path":"mongodb","title":"MongoDB"}]},{"path":"performance","title":"Performance","items":[{"path":"index","title":"Overview"},{"path":"persisted-queries","title":"Persisted queries"},{"path":"automatic-persisted-queries","title":"Automatic persisted queries"}]},{"path":"api-reference","title":"API Reference","items":[{"path":"index","title":"Overview"},{"path":"object-type","title":"Object Type"},{"path":"custom-attributes","title":"Custom Attributes"},{"path":"language","title":"Language"},{"path":"extending-filtering","title":"Extending Filtering"},{"path":"visitors","title":"Visitors"},{"path":"aspnetcore","title":"ASP.NET Core"},{"path":"dependency-injection","title":"Dependency Injection"},{"path":"executable","title":"Executable"},{"path":"apollo-tracing","title":"Apollo Tracing"},{"path":"coding-approaches","title":"Coding Approaches"},{"path":"migrate-from-10-to-11","title":"Migrate from 10.5 to 11.0"}]}]},{"path":"v10","title":"v10 (previous)","items":[{"path":"index","title":"Introduction","items":null},{"path":"code-first","title":"Code-First","items":null},{"path":"schema-first","title":"Schema-First","items":null},{"path":"schema","title":"Schema","items":[{"path":"index","title":"Schema"},{"path":"object-type","title":"Object Type"},{"path":"interface-type","title":"Interface Type"},{"path":"union-type","title":"Union Type"},{"path":"input-object-type","title":"Input Object Type"},{"path":"enum-type","title":"Enum Type"},{"path":"descriptions","title":"Schema Descriptions"},{"path":"custom-scalar-types","title":"Scalar Type Support"},{"path":"descriptor-attributes","title":"Descriptor Attributes"},{"path":"extending-types","title":"Custom Base Classes"},{"path":"directives","title":"Directives"},{"path":"resolvers","title":"Resolvers"},{"path":"relay","title":"Relay"},{"path":"conventions","title":"Conventions"},{"path":"options","title":"Schema Options"}]},{"path":"data-fetching","title":"Data Fetching","items":[{"path":"index","title":"Data Loaders"},{"path":"pagination","title":"Pagination"},{"path":"filters","title":"Filters"}]},{"path":"security","title":"Security","items":[{"path":"index","title":"Authorization"},{"path":"security","title":"Security"}]},{"path":"execution-engine","title":"Execution Engine","items":[{"path":"index","title":"Middleware"},{"path":"validation-rules","title":"Validation Rules"},{"path":"instrumentation","title":"Instrumentation"},{"path":"apollo-tracing","title":"Apollo Tracing"},{"path":"batching","title":"Batching"},{"path":"persisted-queries","title":"Persisted Queries"},{"path":"custom-context-data","title":"Custom Context Data"},{"path":"subscriptions","title":"Subscriptions"},{"path":"type-conversion","title":"Type Conversion"},{"path":"error-filter","title":"Error Filter"},{"path":"execution-options","title":"Execution Options"}]},{"path":"server","title":"Server","items":[{"path":"index","title":"ASP.Net"},{"path":"dependency-injection","title":"Dependency Injection"}]},{"path":"stitching","title":"Schema Stitching","items":null},{"path":"tooling","title":"Tooling","items":null},{"path":"advanced","title":"Advanced","items":[{"path":"index","title":"Parser"},{"path":"dotnet-cli","title":".Net CLI"}]},{"path":"tutorials","title":"Tutorials","items":[{"path":"index","title":"Entity Framework"}]},{"path":"examples","title":"Examples","items":[{"path":"index","title":"Star Wars"},{"path":"slack-clone","title":"Slack Clone"},{"path":"other-examples","title":"Other Examples"}]}]}]},{"path":"bananacakepop","title":"Banana Cake Pop","description":"Use this GUI to get deep insights from any GraphQL API.","versions":[{"path":"","title":"v1 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"strawberryshake","title":"Strawberry Shake","description":"The only GraphQL client you will every need in the .NET ecosystem.","versions":[{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null},{"path":"get-started","title":"Get Started","items":[{"path":"index","title":"Blazor"},{"path":"xamarin","title":"Xamarin"},{"path":"console","title":"Console"}]},{"path":"subscriptions","title":"Subscriptions","items":null},{"path":"tooling","title":"Tooling / CLI","items":null},{"path":"caching","title":"Caching","items":[{"path":"index","title":"Overview"},{"path":"entities","title":"Entities"},{"path":"invalidation","title":"Invalidation"}]},{"path":"performance","title":"Performance","items":[{"path":"index","title":"Overview"},{"path":"persisted-queries","title":"Persisted Queries"},{"path":"persisted-state","title":"Persisted State"}]},{"path":"networking","title":"Networking","items":[{"path":"index","title":"Protocols"},{"path":"authentication","title":"Authentication"}]},{"path":"scalars","title":"Scalars","items":null}]}]},{"path":"greendonut","title":"Green Donut","description":"Configure data loaders and caching for GraphQL endpoints.","versions":[{"path":"","title":"v11 (latest)","items":[{"path":"index","title":"Introduction","items":null}]},{"path":"v10","title":"v10 (previous)","items":[{"path":"index","title":"Introduction","items":null},{"path":"installation","title":"Installation","items":null},{"path":"usage","title":"Usage","items":null},{"path":"api","title":"API","items":null},{"path":"advanced-concepts","title":"Advanced Concepts","items":[{"path":"index","title":"Custom DataLoader"},{"path":"diagnostics","title":"Diagnostic Events"}]}]}]}]}},"pageContext":{"originPath":"hotchocolate/api-reference/executable.md"}},"staticQueryHashes":["1014893094","2890364758","4218812017"]}