{"componentChunkName":"component---src-templates-doc-page-template-tsx","path":"/docs/hotchocolate/api-reference/filtering","result":{"data":{"file":{"childMarkdownRemark":{"fields":{"slug":"/hotchocolate/api-reference/filtering/"},"frontmatter":{"title":"Filtering"},"html":"<p><strong>What are filters?</strong></p>\n<p>With <em>Hot Chocolate</em> filters, you can expose complex filter objects through your GraphQL API that translates to native database queries.</p>\n<p>The default filter implementation translates filters to expression trees and applies these on <code class=\"language-text\">IQueryable</code>.</p>\n<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<p>Filters by default work on <code class=\"language-text\">IQueryable</code> but you can also easily customize them to use other interfaces.</p>\n<p><em>Hot Chocolate</em> by default will inspect your .NET model and infer the possible filter operations from it.</p>\n<p>The following type would yield the following filter operations:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"58681659387601945000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class Foo\n{\n    public string Bar { get; set; }\n}`, `58681659387601945000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Bar <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"95343058845003460000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`input FooFilter {\n  bar: String\n  bar_contains: String\n  bar_ends_with: String\n  bar_in: [String]\n  bar_not: String\n  bar_not_contains: String\n  bar_not_ends_with: String\n  bar_not_in: [String]\n  bar_not_starts_with: String\n  bar_starts_with: String\n  AND: [FooFilter!]\n  OR: [FooFilter!]\n}`, `95343058845003460000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">input</span> FooFilter <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">bar</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">bar_contains</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">bar_ends_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">bar_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">bar_not</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">bar_not_contains</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">bar_not_ends_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">bar_not_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">bar_not_starts_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">bar_starts_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">AND</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>FooFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">OR</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>FooFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>So how can we get started with filters?</strong></p>\n<p>Getting started with filters is very easy, especially if you do not want to explicitly define filters or customize anything.</p>\n<p>Hot Chocolate will infer the filters directly from your .Net Model and then use a Middleware to apply filters to <code class=\"language-text\">IQueryable&lt;T&gt;</code> or <code class=\"language-text\">IEnumerable&lt;T&gt;</code> on execution.</p>\n<blockquote>\n<p>⚠️ <strong>Note:</strong> If you use more than middleware, keep in mind that <strong>ORDER MATTERS</strong> <em>Why order matters</em> &#x3C;<Add link >></p>\n</blockquote>\n<blockquote>\n<p>⚠️ <strong>Note:</strong> Be sure to install the <code class=\"language-text\">HotChocolate.Types.Filters</code> NuGet package.</p>\n</blockquote>\n<p>In the following example, the person resolver returns the <code class=\"language-text\">IQueryable</code> representing the data source. The <code class=\"language-text\">IQueryable</code> represents a not executed database query on which <em>Hot Chocolate</em> can apply filters.</p>\n<p><strong>Code First</strong></p>\n<p>The next thing to note is the <code class=\"language-text\">UseFiltering</code> extension method which adds the filter argument to the field and a middleware that can apply those filters to the <code class=\"language-text\">IQueryable</code>. The execution engine will, in the end, execute the <code class=\"language-text\">IQueryable</code> and fetch the data.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"28206910662996988000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class QueryType\n    : ObjectType<Query>\n{\n    protected override void Configure(IObjectTypeDescriptor<Query> descriptor)\n    {\n        descriptor.Field(t => t.GetPersons(default))\n            .Type<ListType<NonNullType<PersonType>>>()\n            .UseFiltering();\n    }\n}\n\npublic class Query\n{\n    public IQueryable<Person> GetPersons([Service]IPersonRepository repository)\n    {\n        repository.GetPersons();\n    }\n}`, `28206910662996988000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">QueryType</span>\n    <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ObjectType<span class=\"token punctuation\">&lt;</span>Query<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IObjectTypeDescriptor<span class=\"token punctuation\">&lt;</span>Query<span class=\"token punctuation\">></span></span> descriptor<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span><span class=\"token function\">GetPersons</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Type</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ListType<span class=\"token punctuation\">&lt;</span>NonNullType<span class=\"token punctuation\">&lt;</span>PersonType<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">UseFiltering</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Query</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IQueryable<span class=\"token punctuation\">&lt;</span>Person<span class=\"token punctuation\">></span></span> <span class=\"token function\">GetPersons</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Service</span></span><span class=\"token punctuation\">]</span><span class=\"token class-name\">IPersonRepository</span> repository<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        repository<span class=\"token punctuation\">.</span><span class=\"token function\">GetPersons</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Pure Code First</strong></p>\n<p>The field descriptor attribute <code class=\"language-text\">[UseFiltering]</code> does apply the extension method <code class=\"language-text\">UseFiltering()</code> on the field descriptor.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"88560824030501800000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class Query\n{\n    [UseFiltering]\n    public IQueryable<Person> GetPersons([Service]IPersonRepository repository)\n    {\n        repository.GetPersons();\n    }\n}`, `88560824030501800000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Query</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">UseFiltering</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IQueryable<span class=\"token punctuation\">&lt;</span>Person<span class=\"token punctuation\">></span></span> <span class=\"token function\">GetPersons</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Service</span></span><span class=\"token punctuation\">]</span><span class=\"token class-name\">IPersonRepository</span> repository<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        repository<span class=\"token punctuation\">.</span><span class=\"token function\">GetPersons</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Schema First</strong></p>\n<blockquote>\n<p>⚠️ <strong>Note:</strong> Schema first does currently not support filtering!</p>\n</blockquote>\n<h1 id=\"customizing-filters\" style=\"position:relative;\"><a href=\"#customizing-filters\" aria-label=\"customizing filters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Customizing Filters</h1>\n<p>A <code class=\"language-text\">FilterInputType&lt;T&gt;</code> defines a GraphQL input type, that <em>Hot Chocolate</em> uses for filtering. You can customize these similar to a normal input type. You can change the name of the type; add, remove, or change operations or directive; and configure the binding behavior. To define and customize a filter we must inherit from <code class=\"language-text\">FilterInputType&lt;T&gt;</code> and configure it like any other type by overriding the <code class=\"language-text\">Configure</code> method.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"40121529074673410000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class PersonFilterType\n    : FilterInputType<Person>\n{\n    protected override void Configure(\n        IFilterInputTypeDescriptor<Person> descriptor)\n    {\n        descriptor\n            .BindFieldsExplicitly()\n            .Filter(t => t.Name)\n            .BindOperationsExplicitly()\n            .AllowEquals().Name(&quot;equals&quot;).And()\n            .AllowContains().Name(&quot;contains&quot;).And()\n            .AllowIn().Name(&quot;in&quot;);\n    }\n}`, `40121529074673410000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PersonFilterType</span>\n    <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">FilterInputType<span class=\"token punctuation\">&lt;</span>Person<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">IFilterInputTypeDescriptor<span class=\"token punctuation\">&lt;</span>Person<span class=\"token punctuation\">></span></span> descriptor<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        descriptor\n            <span class=\"token punctuation\">.</span><span class=\"token function\">BindFieldsExplicitly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Filter</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">BindOperationsExplicitly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AllowEquals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"equals\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AllowContains</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"contains\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AllowIn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"in\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The above filter type defines explicitly which fields allow filtering and what operations these filters allow. Additionally, the filter type changes the name of the equals operation of the filter of the field <code class=\"language-text\">Name</code> to <code class=\"language-text\">equals</code>.</p>\n<p>To make use of the configuration in this filter type, you can provide it to the <code class=\"language-text\">UseFiltering</code> extension method as the generic type argument.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"18004949860693676000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class QueryType\n    : ObjectType<Query>\n{\n    protected override void Configure(IObjectTypeDescriptor<Query> descriptor)\n    {\n        descriptor.Field(t => t.GetPerson(default))\n            .Type<ListType<NonNullType<PersonType>>>();\n            .UseFiltering<PersonFilterType>()\n    }\n}`, `18004949860693676000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">QueryType</span>\n    <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ObjectType<span class=\"token punctuation\">&lt;</span>Query<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IObjectTypeDescriptor<span class=\"token punctuation\">&lt;</span>Query<span class=\"token punctuation\">></span></span> descriptor<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span><span class=\"token function\">GetPerson</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Type</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ListType<span class=\"token punctuation\">&lt;</span>NonNullType<span class=\"token punctuation\">&lt;</span>PersonType<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">UseFiltering</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>PersonFilterType<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"sorting\" style=\"position:relative;\"><a href=\"#sorting\" aria-label=\"sorting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sorting</h1>\n<p>Like with filter support you can add sorting support to your database queries.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"27857614305925816000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class QueryType\n    : ObjectType<Query>\n{\n    protected override void Configure(IObjectTypeDescriptor<Query> descriptor)\n    {\n        descriptor.Field(t => t.GetPerson(default))\n            .Type<ListType<NonNullType<PersonType>>>();\n            .UseSorting()\n    }\n}`, `27857614305925816000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">QueryType</span>\n    <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ObjectType<span class=\"token punctuation\">&lt;</span>Query<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IObjectTypeDescriptor<span class=\"token punctuation\">&lt;</span>Query<span class=\"token punctuation\">></span></span> descriptor<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span><span class=\"token function\">GetPerson</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Type</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ListType<span class=\"token punctuation\">&lt;</span>NonNullType<span class=\"token punctuation\">&lt;</span>PersonType<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">UseSorting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>⚠️ <strong>Note</strong>: Be sure to install the <code class=\"language-text\">HotChocolate.Types.Sorting</code> NuGet package.</p>\n</blockquote>\n<p>If you want to combine for instance paging, filtering, and sorting make sure that the order is like follows:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"57745301471138100000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class QueryType\n    : ObjectType<Query>\n{\n    protected override void Configure(IObjectTypeDescriptor<Query> descriptor)\n    {\n        descriptor.Field(t => t.GetPerson(default))\n            .UsePaging<PersonType>()\n            .UseFiltering()\n            .UseSorting();\n    }\n}`, `57745301471138100000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">QueryType</span>\n    <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ObjectType<span class=\"token punctuation\">&lt;</span>Query<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IObjectTypeDescriptor<span class=\"token punctuation\">&lt;</span>Query<span class=\"token punctuation\">></span></span> descriptor<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span><span class=\"token function\">GetPerson</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">UsePaging</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>PersonType<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">UseFiltering</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">UseSorting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Why is order important?</strong></p>\n<p>Paging, filtering, and sorting are modular middlewares that form the field resolver pipeline.</p>\n<p>The above example forms the following pipeline:</p>\n<p><code class=\"language-text\">Paging -&gt; Filtering -&gt; Sorting -&gt; Field Resolver</code></p>\n<p>The paging middleware will first delegate to the next middleware, which is filtering.</p>\n<p>The filtering middleware will also first delegate to the next middleware, which is sorting.</p>\n<p>The sorting middleware will again first delegate to the next middleware, which is the actual field resolver.</p>\n<p>The field resolver will call <code class=\"language-text\">GetPerson</code> which returns in this example an <code class=\"language-text\">IQueryable&lt;Person&gt;</code>. The queryable represents a not yet executed database query.</p>\n<p>After the resolver has been executed and puts its result onto the middleware context the sorting middleware will apply for the sort order on the query.</p>\n<p>After the sorting middleware has been executed and updated the result on the middleware context the filtering middleware will apply its filters on the queryable and updates the result on the middleware context.</p>\n<p>After the paging middleware has been executed and updated the result on the middleware context the paging middleware will slice the data and execute the queryable which will then actually pull in data from the data source.</p>\n<p>So, if we, for instance, applied paging as our last middleware the data set would have been sliced first and then filtered which in most cases is not what we actually want.</p>\n<h1 id=\"filter--operations-kinds\" style=\"position:relative;\"><a href=\"#filter--operations-kinds\" aria-label=\"filter  operations kinds permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Filter &#x26; Operations Kinds</h1>\n<p>You can break down filtering into different kinds of filters that then have different operations.\nThe filter kind is bound to the type. A string is fundamentally something different than an array or an object.\nEach filter kind has different operations that you can apply to it. Some operations are unique to a filter and some operations are shared across multiple filter\ne.g. A string filter has string specific operations like <code class=\"language-text\">Contains</code> or <code class=\"language-text\">EndsWith</code> but still shares the operations <code class=\"language-text\">Equals</code> and <code class=\"language-text\">NotEquals</code> with the boolean filter.</p>\n<h2 id=\"filter-kinds\" style=\"position:relative;\"><a href=\"#filter-kinds\" aria-label=\"filter kinds permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Filter Kinds</h2>\n<p>Hot Chocolate knows following filter kinds</p>\n<table>\n<thead>\n<tr>\n<th>Kind</th>\n<th>Operations</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>String</td>\n<td>Equals, In, EndsWith, StartsWith, Contains, NotEquals, NotIn, NotEndsWith, NotStartsWith, NotContains</td>\n</tr>\n<tr>\n<td>Bool</td>\n<td>Equals, NotEquals</td>\n</tr>\n<tr>\n<td>Object</td>\n<td>Equals</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Some, Any, All, None</td>\n</tr>\n<tr>\n<td>Comparable</td>\n<td>Equals, In, GreaterThan, GreaterThanOrEqual, LowerThan, LowerThanOrEqual, NotEquals, NotIn, NotGreaterThan, NotGreaterThanOrEqual, NotLowerThan, NotLowerThanOrEqual</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"operations-kinds\" style=\"position:relative;\"><a href=\"#operations-kinds\" aria-label=\"operations kinds permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Operations Kinds</h2>\n<p>Hot Chocolate knows following operation kinds</p>\n<table>\n<thead>\n<tr>\n<th>Kind</th>\n<th>Operations</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Equals</td>\n<td>Compares the equality of input value and property value</td>\n</tr>\n<tr>\n<td>NotEquals</td>\n<td>negation of Equals</td>\n</tr>\n<tr>\n<td>In</td>\n<td>Checks if the property value is contained in a given list of input values</td>\n</tr>\n<tr>\n<td>NotIn</td>\n<td>negation of In</td>\n</tr>\n<tr>\n<td>GreaterThan</td>\n<td>checks if the input value is greater than the property value</td>\n</tr>\n<tr>\n<td>NotGreaterThan</td>\n<td>negation of GreaterThan</td>\n</tr>\n<tr>\n<td>GreaterThanOrEquals</td>\n<td>checks if the input value is greater than or equal to the property value</td>\n</tr>\n<tr>\n<td>NotGreaterThanOrEquals</td>\n<td>negation of GreaterThanOrEquals</td>\n</tr>\n<tr>\n<td>LowerThan</td>\n<td>checks if the input value is lower than the property value</td>\n</tr>\n<tr>\n<td>NotLowerThan</td>\n<td>negation of LowerThan</td>\n</tr>\n<tr>\n<td>LowerThanOrEquals</td>\n<td>checks if the input value is lower than or equal to the property value</td>\n</tr>\n<tr>\n<td>NotLowerThanOrEquals</td>\n<td>negation of LowerThanOrEquals</td>\n</tr>\n<tr>\n<td>EndsWith</td>\n<td>checks if the property value ends with the input value</td>\n</tr>\n<tr>\n<td>NotEndsWith</td>\n<td>negation of EndsWith</td>\n</tr>\n<tr>\n<td>StartsWith</td>\n<td>checks if the property value starts with the input value</td>\n</tr>\n<tr>\n<td>NotStartsWith</td>\n<td>negation of StartsWith</td>\n</tr>\n<tr>\n<td>Contains</td>\n<td>checks if the input value is contained in the property value</td>\n</tr>\n<tr>\n<td>NotContains</td>\n<td>negation of Contains</td>\n</tr>\n<tr>\n<td>Some</td>\n<td>checks if at least one element in the collection exists</td>\n</tr>\n<tr>\n<td>Some</td>\n<td>checks if at least one element of the property value meets the condition provided by the input value</td>\n</tr>\n<tr>\n<td>None</td>\n<td>checks if no element of the property value meets the condition provided by the input value</td>\n</tr>\n<tr>\n<td>All</td>\n<td>checks if all least one element of the property value meets the condition provided by the input value</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"boolean-filter\" style=\"position:relative;\"><a href=\"#boolean-filter\" aria-label=\"boolean filter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Boolean Filter</h2>\n<p>In this example, we look at the filter configuration of a Boolean filter.\nAs an example, we will use the following model:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"98625423431886240000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class User\n{\n    public bool IsOnline {get;set;}\n}\n\npublic class Query : ObjectType\n{\n    [UseFiltering]\n    public IQueryable<User> GetUsers([Service]UserService users )\n      => users.AsQueryable();\n}`, `98625423431886240000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> IsOnline <span class=\"token punctuation\">{</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ObjectType</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">UseFiltering</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IQueryable<span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">></span></span> <span class=\"token function\">GetUsers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Service</span></span><span class=\"token punctuation\">]</span><span class=\"token class-name\">UserService</span> users <span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">=></span> users<span class=\"token punctuation\">.</span><span class=\"token function\">AsQueryable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The produced GraphQL SDL will look like the following:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"82169839644161300000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`type Query {\n  users(where: UserFilter): [User]\n}\n\ntype User {\n  isOnline: Boolean\n}\n\ninput UserFilter {\n  isOnline: Boolean\n  isOnline_not: Boolean\n  AND: [UserFilter!]\n  OR: [UserFilter!]\n}`, `82169839644161300000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">users</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">where</span><span class=\"token punctuation\">:</span> UserFilter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>User<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">isOnline</span><span class=\"token punctuation\">:</span> Boolean\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">input</span> UserFilter <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">isOnline</span><span class=\"token punctuation\">:</span> Boolean\n  <span class=\"token attr-name\">isOnline_not</span><span class=\"token punctuation\">:</span> Boolean\n  <span class=\"token attr-name\">AND</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UserFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">OR</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UserFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"boolean-operation-descriptor\" style=\"position:relative;\"><a href=\"#boolean-operation-descriptor\" aria-label=\"boolean operation descriptor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Boolean Operation Descriptor</h3>\n<p>The example above showed that configuring the operations is optional.\nIf you want to have access to the actual field input types or allow only a subset of Boolean filters for a given property, you can configure the operation over the <code class=\"language-text\">IFilterInputTypeDescriptor&lt;User&gt;</code></p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"64543909351518700000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class UserFilterType : FilterInputType<User>\n{\n    protected override void Configure(\n        IFilterInputTypeDescriptor<User> descriptor)\n    {\n        descriptor.BindFieldsExplicitly();\n        descriptor.Filter(x => x.Name)\n            .AllowEquals().And()\n            .AllowNotEquals();\n    }\n}`, `64543909351518700000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserFilterType</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">FilterInputType<span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">IFilterInputTypeDescriptor<span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">></span></span> descriptor<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">BindFieldsExplicitly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Filter</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AllowEquals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AllowNotEquals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"comparable-filter\" style=\"position:relative;\"><a href=\"#comparable-filter\" aria-label=\"comparable filter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Comparable Filter</h2>\n<p>In this example, we look at the filter configuration of a comparable filter.</p>\n<p>A comparable filter is generated for all values that implement IComparable except string and boolean.\ne.g. <code class=\"language-csharp\"><span class=\"token keyword\">enum</span></code>, <code class=\"language-csharp\"><span class=\"token keyword\">int</span></code>, <code class=\"language-csharp\">DateTime</code>...</p>\n<p>As an example, we will use the following model:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"87764639770643420000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class User\n{\n    public int LoggingCount {get;set;}\n}\n\npublic class Query : ObjectType\n{\n    [UseFiltering]\n    public IQueryable<User> GetUsers([Service]UserService users )\n      => users.AsQueryable();\n}`, `87764639770643420000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> LoggingCount <span class=\"token punctuation\">{</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ObjectType</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">UseFiltering</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IQueryable<span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">></span></span> <span class=\"token function\">GetUsers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Service</span></span><span class=\"token punctuation\">]</span><span class=\"token class-name\">UserService</span> users <span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">=></span> users<span class=\"token punctuation\">.</span><span class=\"token function\">AsQueryable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The produced GraphQL SDL will look like the following:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"37590827312252270000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`type Query {\n  users(where: UserFilter): [User]\n}\n\ntype User {\n  loggingCount: Int\n}\n\ninput UserFilter {\n  loggingCount: Int\n  loggingCount_gt: Int\n  loggingCount_gte: Int\n  loggingCount_in: [Int!]\n  loggingCount_lt: Int\n  loggingCount_lte: Int\n  loggingCount_not: Int\n  loggingCount_not_gt: Int\n  loggingCount_not_gte: Int\n  loggingCount_not_in: [Int!]\n  loggingCount_not_lt: Int\n  loggingCount_not_lte: Int\n  AND: [UserFilter!]\n  OR: [UserFilter!]\n}`, `37590827312252270000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">users</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">where</span><span class=\"token punctuation\">:</span> UserFilter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>User<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">loggingCount</span><span class=\"token punctuation\">:</span> Int\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">input</span> UserFilter <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">loggingCount</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_gt</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_gte</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Int<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">loggingCount_lt</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_lte</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_not</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_not_gt</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_not_gte</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_not_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Int<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">loggingCount_not_lt</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_not_lte</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">AND</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UserFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">OR</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UserFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"comparable-operation-descriptor\" style=\"position:relative;\"><a href=\"#comparable-operation-descriptor\" aria-label=\"comparable operation descriptor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Comparable Operation Descriptor</h3>\n<p>The example above showed that configuring the operations is optional.\nIf you want to have access to the actual field input types or allow only a subset of comparable filters for a given property, you can configure the operation over the <code class=\"language-text\">IFilterInputTypeDescriptor&lt;User&gt;</code></p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"63267661695443730000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class UserFilterType : FilterInputType<User>\n{\n    protected override void Configure(\n        IFilterInputTypeDescriptor<User> descriptor)\n    {\n        descriptor.BindFieldsExplicitly();\n        descriptor.Filter(x => x.Name)\n            .AllowEquals().And()\n            .AllowNotEquals().And()\n            .AllowGreaterThan().And()\n            .AllowNotGreaterThan().And()\n            .AllowGreaterThanOrEqals().And()\n            .AllowNotGreaterThanOrEqals().And()\n            .AllowLowerThan().And()\n            .AllowNotLowerThan().And()\n            .AllowLowerThanOrEqals().And()\n            .AllowNotLowerThanOrEqals().And()\n            .AllowIn().And()\n            .AllowNotIn();\n    }\n}`, `63267661695443730000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserFilterType</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">FilterInputType<span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">IFilterInputTypeDescriptor<span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">></span></span> descriptor<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">BindFieldsExplicitly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Filter</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AllowEquals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AllowNotEquals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AllowGreaterThan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AllowNotGreaterThan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AllowGreaterThanOrEqals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AllowNotGreaterThanOrEqals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AllowLowerThan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AllowNotLowerThan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AllowLowerThanOrEqals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AllowNotLowerThanOrEqals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AllowIn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AllowNotIn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"string-filter\" style=\"position:relative;\"><a href=\"#string-filter\" aria-label=\"string filter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String Filter</h2>\n<p>In this example, we look at the filter configuration of a String filter.\nAs an example, we will use the following model:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"18443929356652044000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class User\n{\n    public string Name {get;set;}\n}\n\npublic class Query : ObjectType\n{\n    [UseFiltering]\n    public IQueryable<User> GetUsers([Service]UserService users )\n      => users.AsQueryable();\n}`, `18443929356652044000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ObjectType</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">UseFiltering</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IQueryable<span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">></span></span> <span class=\"token function\">GetUsers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Service</span></span><span class=\"token punctuation\">]</span><span class=\"token class-name\">UserService</span> users <span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">=></span> users<span class=\"token punctuation\">.</span><span class=\"token function\">AsQueryable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The produced GraphQL SDL will look like the following:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"76038364153776010000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`type Query {\n  users(where: UserFilter): [User]\n}\n\ntype User {\n  name: String\n}\n\ninput UserFilter {\n  name: String\n  name_contains: String\n  name_ends_with: String\n  name_in: [String]\n  name_not: String\n  name_not_contains: String\n  name_not_ends_with: String\n  name_not_in: [String]\n  name_not_starts_with: String\n  name_starts_with: String\n  AND: [UserFilter!]\n  OR: [UserFilter!]\n}`, `76038364153776010000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">users</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">where</span><span class=\"token punctuation\">:</span> UserFilter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>User<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> String\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">input</span> UserFilter <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_contains</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_ends_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">name_not</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_not_contains</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_not_ends_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_not_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">name_not_starts_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_starts_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">AND</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UserFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">OR</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UserFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"string-operation-descriptor\" style=\"position:relative;\"><a href=\"#string-operation-descriptor\" aria-label=\"string operation descriptor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String Operation Descriptor</h3>\n<p>The example above showed that configuring the operations is optional.\nIf you want to have access to the actual field input types or allow only a subset of string filters for a given property, you can configure the operation over the <code class=\"language-text\">IFilterInputTypeDescriptor&lt;User&gt;</code></p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"79070283842906930000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class UserFilterType : FilterInputType<User>\n{\n    protected override void Configure(\n        IFilterInputTypeDescriptor<User> descriptor)\n    {\n        descriptor.BindFieldsExplicitly();\n        descriptor.Filter(x => x.Name)\n            .AllowEquals().And()\n            .AllowNotEquals().And()\n            .AllowContains().And()\n            .AllowNotContains().And()\n            .AllowStartsWith().And()\n            .AllowNotStartsWith().And()\n            .AllowEndsWith().And()\n            .AllowNotEndsWith().And()\n            .AllowIn().And()\n            .AllowNotIn();\n    }\n}`, `79070283842906930000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserFilterType</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">FilterInputType<span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">IFilterInputTypeDescriptor<span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">></span></span> descriptor<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">BindFieldsExplicitly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Filter</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AllowEquals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AllowNotEquals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AllowContains</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AllowNotContains</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AllowStartsWith</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AllowNotStartsWith</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AllowEndsWith</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AllowNotEndsWith</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AllowIn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AllowNotIn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"object-filter\" style=\"position:relative;\"><a href=\"#object-filter\" aria-label=\"object filter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object Filter</h2>\n<p>In this example, we look at the filter configuration of an object filter.</p>\n<p><em>Hot Chocolate</em> generated object filters for all objects. Since Version 11, <em>Hot Chocolate</em> also generates filter types for nested objects. You can also use object filters to filter over database relations.</p>\n<p>As an example, we will use the following model:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"2684760750793624600\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class User\n{\n    public Address Address {get;set;}\n}\n\npublic class Address\n{\n    public string Street {get;set;}\n\n    public bool IsPrimary {get;set;}\n}\n\npublic class Query : ObjectType\n{\n    [UseFiltering]\n    public IQueryable<User> GetUsers([Service]UserService users )\n      => users.AsQueryable();\n}`, `2684760750793624600`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Address</span> Address <span class=\"token punctuation\">{</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Address</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Street <span class=\"token punctuation\">{</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> IsPrimary <span class=\"token punctuation\">{</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ObjectType</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">UseFiltering</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IQueryable<span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">></span></span> <span class=\"token function\">GetUsers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Service</span></span><span class=\"token punctuation\">]</span><span class=\"token class-name\">UserService</span> users <span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">=></span> users<span class=\"token punctuation\">.</span><span class=\"token function\">AsQueryable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The produced GraphQL SDL will look like the following:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"73037439133130190000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`type Query {\n  users(where: UserFilter): [User]\n}\n\ntype User {\n  address: Address\n}\n\ntype Address {\n  isPrimary: Boolean\n  street: String\n}\n\ninput UserFilter {\n  address: AddressFilter\n  AND: [UserFilter!]\n  OR: [UserFilter!]\n}\n\ninput AddressFilter {\n  is_primary: Boolean\n  is_primary_not: Boolean\n  street: String\n  street_contains: String\n  street_ends_with: String\n  street_in: [String]\n  street_not: String\n  street_not_contains: String\n  street_not_ends_with: String\n  street_not_in: [String]\n  street_not_starts_with: String\n  street_starts_with: String\n  AND: [AddressFilter!]\n  OR: [AddressFilter!]\n}`, `73037439133130190000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">users</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">where</span><span class=\"token punctuation\">:</span> UserFilter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>User<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">address</span><span class=\"token punctuation\">:</span> Address\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Address</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">isPrimary</span><span class=\"token punctuation\">:</span> Boolean\n  <span class=\"token attr-name\">street</span><span class=\"token punctuation\">:</span> String\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">input</span> UserFilter <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">address</span><span class=\"token punctuation\">:</span> AddressFilter\n  <span class=\"token attr-name\">AND</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UserFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">OR</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UserFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">input</span> AddressFilter <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">is_primary</span><span class=\"token punctuation\">:</span> Boolean\n  <span class=\"token attr-name\">is_primary_not</span><span class=\"token punctuation\">:</span> Boolean\n  <span class=\"token attr-name\">street</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">street_contains</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">street_ends_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">street_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">street_not</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">street_not_contains</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">street_not_ends_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">street_not_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">street_not_starts_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">street_starts_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">AND</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>AddressFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">OR</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>AddressFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"object-operation-descriptor\" style=\"position:relative;\"><a href=\"#object-operation-descriptor\" aria-label=\"object operation descriptor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object Operation Descriptor</h3>\n<p>The example above showed that configuring the operations is optional.\nIf you want to have access to the actual field input types or allow only a subset of comparable filters for a given property, you can configure the operation over the <code class=\"language-text\">IFilterInputTypeDescriptor&lt;User&gt;</code></p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"27599775535278480000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class UserFilterType : FilterInputType<User>\n{\n    protected override void Configure(\n        IFilterInputTypeDescriptor<User> descriptor)\n    {\n        descriptor.BindFieldsExplicitly();\n        descriptor.Object(x => x.Address);\n    }\n}`, `27599775535278480000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserFilterType</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">FilterInputType<span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">IFilterInputTypeDescriptor<span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">></span></span> descriptor<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">BindFieldsExplicitly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Object</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Configuring a custom nested filter type:</strong></p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"99494397776062100000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class UserFilterType : FilterInputType<User>\n{\n    protected override void Configure(\n        IFilterInputTypeDescriptor<User> descriptor)\n    {\n        descriptor.BindFieldsExplicitly();\n        descriptor.Object(x => x.Address).AllowObject<AddressFilterType>();\n    }\n}\n\npublic class AddressFilterType : FilterInputType<Address>\n{\n    protected override void Configure(\n        IFilterInputTypeDescriptor<Address> descriptor)\n    {\n        descriptor.BindFieldsExplicitly();\n        descriptor.Filter(x => x.IsPrimary);\n    }\n}\n\n// or inline\n\npublic class UserFilterType : FilterInputType<User>\n{\n    protected override void Configure(\n        IFilterInputTypeDescriptor<User> descriptor)\n    {\n        descriptor.BindFieldsExplicitly();\n        descriptor.Object(x => x.Address)\n          .AllowObject(\n            y => y.BindFieldsExplicitly().Filter(z => z.IsPrimary));\n    }\n}`, `99494397776062100000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserFilterType</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">FilterInputType<span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">IFilterInputTypeDescriptor<span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">></span></span> descriptor<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">BindFieldsExplicitly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Object</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AllowObject</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AddressFilterType<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AddressFilterType</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">FilterInputType<span class=\"token punctuation\">&lt;</span>Address<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">IFilterInputTypeDescriptor<span class=\"token punctuation\">&lt;</span>Address<span class=\"token punctuation\">></span></span> descriptor<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">BindFieldsExplicitly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Filter</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>IsPrimary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// or inline</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserFilterType</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">FilterInputType<span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">IFilterInputTypeDescriptor<span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">></span></span> descriptor<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">BindFieldsExplicitly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Object</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Address<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">AllowObject</span><span class=\"token punctuation\">(</span>\n            y <span class=\"token operator\">=></span> y<span class=\"token punctuation\">.</span><span class=\"token function\">BindFieldsExplicitly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Filter</span><span class=\"token punctuation\">(</span>z <span class=\"token operator\">=></span> z<span class=\"token punctuation\">.</span>IsPrimary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"list-filter\" style=\"position:relative;\"><a href=\"#list-filter\" aria-label=\"list filter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>List Filter</h2>\n<p>In this example, we look at the filter configuration of a list filter.</p>\n<p><em>Hot Chocolate</em> can also generate filters for IEnumerables. Like object filter, <em>Hot Chocolate</em> generates filters for the whole object tree. List filter addresses scalars and object values differently.\nIn the case the field is a scalar value, <em>Hot Chocolate</em> creates and object type to address the different operations of this scalar. e.g. If you specify filters for a list of strings, <em>Hot Chocolate</em> creates an object type that contains all operations of the string filter.\nIn case the list holds a complex object, it generates an object filter for this object instead.</p>\n<p><em>Hot Chocolate</em> implicitly generates filters for all properties that implement <code class=\"language-text\">IEnumerable</code>.\ne.g. <code class=\"language-csharp\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></code>, <code class=\"language-csharp\">List<span class=\"token operator\">&lt;</span>Foo<span class=\"token operator\">></span></code>, <code class=\"language-csharp\">IEnumerable<span class=\"token operator\">&lt;</span>Bar<span class=\"token operator\">></span></code>...</p>\n<p>As an example, we will use the following model:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"91406516082337940000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class User\n{\n    public string[] Roles {get;set;}\n\n    public IEnumerable<Address> Addresses {get;set;}\n}\n\npublic class Address\n{\n    public string Street {get;set;}\n\n    public bool IsPrimary {get;set;}\n}\n\npublic class Query : ObjectType\n{\n    [UseFiltering]\n    public IQueryable<User> GetUsers([Service]UserService users )\n      => users.AsQueryable();\n}`, `91406516082337940000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> Roles <span class=\"token punctuation\">{</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>Address<span class=\"token punctuation\">></span></span> Addresses <span class=\"token punctuation\">{</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Address</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Street <span class=\"token punctuation\">{</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> IsPrimary <span class=\"token punctuation\">{</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ObjectType</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">UseFiltering</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IQueryable<span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">></span></span> <span class=\"token function\">GetUsers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Service</span></span><span class=\"token punctuation\">]</span><span class=\"token class-name\">UserService</span> users <span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">=></span> users<span class=\"token punctuation\">.</span><span class=\"token function\">AsQueryable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The produced GraphQL SDL will look like the following:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"71919127398072360000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`type Query {\n  users(where: UserFilter): [User]\n}\n\ntype User {\n  addresses: [Address]\n  roles: [String]\n}\n\ntype Address {\n  isPrimary: Boolean\n  street: String\n}\n\ninput UserFilter {\n  addresses_some: AddressFilter\n  addresses_all: AddressFilter\n  addresses_none: AddressFilter\n  addresses_any: Boolean\n  roles_some: ISingleFilterOfStringFilter\n  roles_all: ISingleFilterOfStringFilter\n  roles_none: ISingleFilterOfStringFilter\n  roles_any: Boolean\n  AND: [UserFilter!]\n  OR: [UserFilter!]\n}\n\ninput AddressFilter {\n  is_primary: Boolean\n  is_primary_not: Boolean\n  street: String\n  street_contains: String\n  street_ends_with: String\n  street_in: [String]\n  street_not: String\n  street_not_contains: String\n  street_not_ends_with: String\n  street_not_in: [String]\n  street_not_starts_with: String\n  street_starts_with: String\n  AND: [AddressFilter!]\n  OR: [AddressFilter!]\n}\n\ninput ISingleFilterOfStringFilter {\n  AND: [ISingleFilterOfStringFilter!]\n  element: String\n  element_contains: String\n  element_ends_with: String\n  element_in: [String]\n  element_not: String\n  element_not_contains: String46\n  element_not_ends_with: String\n  element_not_in: [String]\n  element_not_starts_with: String\n  element_starts_with: String\n  OR: [ISingleFilterOfStringFilter!]\n}`, `71919127398072360000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">users</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">where</span><span class=\"token punctuation\">:</span> UserFilter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>User<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">addresses</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Address<span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">roles</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Address</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">isPrimary</span><span class=\"token punctuation\">:</span> Boolean\n  <span class=\"token attr-name\">street</span><span class=\"token punctuation\">:</span> String\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">input</span> UserFilter <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">addresses_some</span><span class=\"token punctuation\">:</span> AddressFilter\n  <span class=\"token attr-name\">addresses_all</span><span class=\"token punctuation\">:</span> AddressFilter\n  <span class=\"token attr-name\">addresses_none</span><span class=\"token punctuation\">:</span> AddressFilter\n  <span class=\"token attr-name\">addresses_any</span><span class=\"token punctuation\">:</span> Boolean\n  <span class=\"token attr-name\">roles_some</span><span class=\"token punctuation\">:</span> ISingleFilterOfStringFilter\n  <span class=\"token attr-name\">roles_all</span><span class=\"token punctuation\">:</span> ISingleFilterOfStringFilter\n  <span class=\"token attr-name\">roles_none</span><span class=\"token punctuation\">:</span> ISingleFilterOfStringFilter\n  <span class=\"token attr-name\">roles_any</span><span class=\"token punctuation\">:</span> Boolean\n  <span class=\"token attr-name\">AND</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UserFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">OR</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UserFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">input</span> AddressFilter <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">is_primary</span><span class=\"token punctuation\">:</span> Boolean\n  <span class=\"token attr-name\">is_primary_not</span><span class=\"token punctuation\">:</span> Boolean\n  <span class=\"token attr-name\">street</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">street_contains</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">street_ends_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">street_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">street_not</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">street_not_contains</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">street_not_ends_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">street_not_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">street_not_starts_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">street_starts_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">AND</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>AddressFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">OR</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>AddressFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">input</span> ISingleFilterOfStringFilter <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">AND</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>ISingleFilterOfStringFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">element</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">element_contains</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">element_ends_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">element_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">element_not</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">element_not_contains</span><span class=\"token punctuation\">:</span> String46\n  <span class=\"token attr-name\">element_not_ends_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">element_not_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">element_not_starts_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">element_starts_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">OR</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>ISingleFilterOfStringFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"array-operation-descriptor\" style=\"position:relative;\"><a href=\"#array-operation-descriptor\" aria-label=\"array operation descriptor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array Operation Descriptor</h3>\n<p>The example above showed that configuring the operations is optional.\nIf you want to have access to the actual field input types or allow only a subset of array filters for a given property, you can configure the operation over the <code class=\"language-text\">IFilterInputTypeDescriptor&lt;User&gt;</code></p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"33029461213094756000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class UserFilterType : FilterInputType<User>\n{\n    protected override void Configure(\n        IFilterInputTypeDescriptor<User> descriptor)\n    {\n        descriptor.BindFieldsExplicitly();\n        descriptor.List(x => x.Addresses)\n            .AllowSome().And()\n            .AlloAny().And()\n            .AllowAll().And()\n            .AllowNone();\n        descriptor.List(x => x.Roles)\n            .AllowSome().And()\n            .AlloAny().And()\n            .AllowAll().And()\n            .AllowNone();\n    }\n}`, `33029461213094756000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserFilterType</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">FilterInputType<span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">IFilterInputTypeDescriptor<span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">></span></span> descriptor<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">BindFieldsExplicitly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">List</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Addresses<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AllowSome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AlloAny</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AllowAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AllowNone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">List</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Roles<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AllowSome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AlloAny</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AllowAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AllowNone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"naming-conventions\" style=\"position:relative;\"><a href=\"#naming-conventions\" aria-label=\"naming conventions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Naming Conventions</h1>\n<p>_Hot Chocolate already provides two naming schemes for filters. If you would like to define your own naming scheme or extend existing ones have a look at the documentation of &#x3C;<LINk FILTER CONVENTIONS>></p>\n<h2 id=\"snake-case\" style=\"position:relative;\"><a href=\"#snake-case\" aria-label=\"snake case permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Snake Case</h2>\n<p><strong>Configuration</strong>\nYou can configure the Snake Case with the <code class=\"language-text\">UseSnakeCase</code> extension method convention on the <code class=\"language-text\">IFilterConventionDescriptor</code></p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"79853226290686970000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class CustomConvention : FilterConvention\n{\n    protected override void Configure(IFilterConventionDescriptor descriptor)\n    {\n        descriptor.UseSnakeCase()\n    }\n}\n\nSchemaBuilder.New().AddConvention<CustomConvention>();\n//\nSchemaBuilder.New().AddConvention(new FilterConvention(x => x.UseSnakeCase())`, `79853226290686970000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomConvention</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">FilterConvention</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IFilterConventionDescriptor</span> descriptor<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">UseSnakeCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nSchemaBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddConvention</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>CustomConvention<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//</span>\nSchemaBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddConvention</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FilterConvention</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">UseSnakeCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"25421331541838100000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`input FooBarFilter {\n  AND: [FooBarFilter!]\n  nested: String\n  nested_contains: String\n  nested_ends_with: String\n  nested_in: [String]\n  nested_not: String\n  nested_not_contains: String\n  nested_not_ends_with: String\n**Change the name of an operation**\n  nested_not_in: [String]\n  nested_not_starts_with: String\n  nested_starts_with: String\n  OR: [FooBarFilter!]\n}\n\ninput FooFilter {\n  AND: [FooFilter!]\n  bool: Boolean\n  bool_not: Boolean\n  comparable: Short\n  comparableEnumerable_all: ISingleFilterOfInt16Filter\n  comparableEnumerable_any: Boolean\n  comparableEnumerable_none: ISingleFilterOfInt16Filter\n  comparableEnumerable_some: ISingleFilterOfInt16Filter\n  comparable_gt: Short\n  comparable_gte: Short\n  comparable_in: [Short!]\n  comparable_lt: Short\n  comparable_lte: Short\n  comparable_not: Short\n  comparable_not_gt: Short\n  comparable_not_gte: Short\n  comparable_not_in: [Short!]\n  comparable_not_lt: Short\n  comparable_not_lte: Short\n  object: FooBarFilter\n  OR: [FooFilter!]\n}\n\ninput ISingleFilterOfInt16Filter {\n  AND: [ISingleFilterOfInt16Filter!]\n  element: Short\n  element_gt: Short\n  element_gte: Short\n  element_in: [Short!]\n  element_lt: Short\n  element_lte: Short\n  element_not: Short\n  element_not_gt: Short\n  element_not_gte: Short\n  element_not_in: [Short!]\n  element_not_lt: Short\n  element_not_lte: Short\n  OR: [ISingleFilterOfInt16Filter!]\n}`, `25421331541838100000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">input</span> FooBarFilter <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">AND</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>FooBarFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">nested</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">nested_contains</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">nested_ends_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">nested_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">nested_not</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">nested_not_contains</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">nested_not_ends_with</span><span class=\"token punctuation\">:</span> String\n**Change the name of an operation**\n  <span class=\"token attr-name\">nested_not_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">nested_not_starts_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">nested_starts_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">OR</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>FooBarFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">input</span> FooFilter <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">AND</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>FooFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">bool</span><span class=\"token punctuation\">:</span> Boolean\n  <span class=\"token attr-name\">bool_not</span><span class=\"token punctuation\">:</span> Boolean\n  <span class=\"token attr-name\">comparable</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">comparableEnumerable_all</span><span class=\"token punctuation\">:</span> ISingleFilterOfInt16Filter\n  <span class=\"token attr-name\">comparableEnumerable_any</span><span class=\"token punctuation\">:</span> Boolean\n  <span class=\"token attr-name\">comparableEnumerable_none</span><span class=\"token punctuation\">:</span> ISingleFilterOfInt16Filter\n  <span class=\"token attr-name\">comparableEnumerable_some</span><span class=\"token punctuation\">:</span> ISingleFilterOfInt16Filter\n  <span class=\"token attr-name\">comparable_gt</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">comparable_gte</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">comparable_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Short<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">comparable_lt</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">comparable_lte</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">comparable_not</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">comparable_not_gt</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">comparable_not_gte</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">comparable_not_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Short<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">comparable_not_lt</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">comparable_not_lte</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">object</span><span class=\"token punctuation\">:</span> FooBarFilter\n  <span class=\"token attr-name\">OR</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>FooFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">input</span> ISingleFilterOfInt16Filter <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">AND</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>ISingleFilterOfInt16Filter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">element</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">element_gt</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">element_gte</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">element_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Short<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">element_lt</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">element_lte</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">element_not</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">element_not_gt</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">element_not_gte</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">element_not_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Short<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">element_not_lt</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">element_not_lte</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">OR</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>ISingleFilterOfInt16Filter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"pascal-case\" style=\"position:relative;\"><a href=\"#pascal-case\" aria-label=\"pascal case permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pascal Case</h2>\n<p><strong>Configuration</strong>\nYou can configure the Pascal Case with the <code class=\"language-text\">UsePascalCase</code> extension method convention on the <code class=\"language-text\">IFilterConventionDescriptor</code></p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"39761542188871975000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class CustomConvention : FilterConvention\n{\n    protected override void Configure(IFilterConventionDescriptor descriptor)\n    {\n        descriptor.UsePascalCase()\n    }\n}\n\nSchemaBuilder.New().AddConvention<CustomConvention>();\n//\nSchemaBuilder.New().AddConvention(new FilterConvention(x => x.UsePascalCase())`, `39761542188871975000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomConvention</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">FilterConvention</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IFilterConventionDescriptor</span> descriptor<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">UsePascalCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nSchemaBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddConvention</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>CustomConvention<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//</span>\nSchemaBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddConvention</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FilterConvention</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">UsePascalCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"83128654214877380000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`input FooBarFilter {\n  AND: [FooBarFilter!]\n  Nested: String\n  Nested_Contains: String\n  Nested_EndsWith: String\n  Nested_In: [String]\n  Nested_Not: String\n  Nested_Not_Contains: String\n  Nested_Not_EndsWith: String\n  Nested_Not_In: [String]\n  Nested_Not_StartsWith: String\n  Nested_StartsWith: String\n  OR: [FooBarFilter!]\n}\n\ninput FooFilter {\n  AND: [FooFilter!]\n  Bool: Boolean\n  Bool_Not: Boolean\n  Comparable: Short\n  ComparableEnumerable_All: ISingleFilterOfInt16Filter\n  ComparableEnumerable_Any: Boolean\n  ComparableEnumerable_None: ISingleFilterOfInt16Filter\n  ComparableEnumerable_Some: ISingleFilterOfInt16Filter\n  Comparable_Gt: Short\n  Comparable_Gte: Short\n  Comparable_In: [Short!]\n  Comparable_Lt: Short\n  Comparable_Lte: Short\n  Comparable_Not: Short\n  Comparable_Not_Gt: Short\n  Comparable_Not_Gte: Short\n  Comparable_Not_In: [Short!]\n  Comparable_Not_Lt: Short\n  Comparable_Not_Lte: Short\n  Object: FooBarFilter\n  OR: [FooFilter!]\n}\n\ninput ISingleFilterOfInt16Filter {\n  AND: [ISingleFilterOfInt16Filter!]\n  Element: Short\n  Element_Gt: Short\n  Element_Gte: Short\n  Element_In: [Short!]\n  Element_Lt: Short\n  Element_Lte: Short\n  Element_Not_Gt: Short\n  Element_Not: Short\n  Element_Not_Gte: Short\n  Element_Not_In: [Short!]\n  Element_Not_Lt: Short\n  Element_Not_Lte: Short\n  OR: [ISingleFilterOfInt16Filter!]\n}`, `83128654214877380000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">input</span> FooBarFilter <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">AND</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>FooBarFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">Nested</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">Nested_Contains</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">Nested_EndsWith</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">Nested_In</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">Nested_Not</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">Nested_Not_Contains</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">Nested_Not_EndsWith</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">Nested_Not_In</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">Nested_Not_StartsWith</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">Nested_StartsWith</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">OR</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>FooBarFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">input</span> FooFilter <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">AND</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>FooFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">Bool</span><span class=\"token punctuation\">:</span> Boolean\n  <span class=\"token attr-name\">Bool_Not</span><span class=\"token punctuation\">:</span> Boolean\n  <span class=\"token attr-name\">Comparable</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">ComparableEnumerable_All</span><span class=\"token punctuation\">:</span> ISingleFilterOfInt16Filter\n  <span class=\"token attr-name\">ComparableEnumerable_Any</span><span class=\"token punctuation\">:</span> Boolean\n  <span class=\"token attr-name\">ComparableEnumerable_None</span><span class=\"token punctuation\">:</span> ISingleFilterOfInt16Filter\n  <span class=\"token attr-name\">ComparableEnumerable_Some</span><span class=\"token punctuation\">:</span> ISingleFilterOfInt16Filter\n  <span class=\"token attr-name\">Comparable_Gt</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">Comparable_Gte</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">Comparable_In</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Short<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">Comparable_Lt</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">Comparable_Lte</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">Comparable_Not</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">Comparable_Not_Gt</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">Comparable_Not_Gte</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">Comparable_Not_In</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Short<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">Comparable_Not_Lt</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">Comparable_Not_Lte</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">Object</span><span class=\"token punctuation\">:</span> FooBarFilter\n  <span class=\"token attr-name\">OR</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>FooFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">input</span> ISingleFilterOfInt16Filter <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">AND</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>ISingleFilterOfInt16Filter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">Element</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">Element_Gt</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">Element_Gte</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">Element_In</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Short<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">Element_Lt</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">Element_Lte</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">Element_Not_Gt</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">Element_Not</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">Element_Not_Gte</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">Element_Not_In</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Short<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">Element_Not_Lt</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">Element_Not_Lte</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">OR</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>ISingleFilterOfInt16Filter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"customizing-filter\" style=\"position:relative;\"><a href=\"#customizing-filter\" aria-label=\"customizing filter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Customizing Filter</h1>\n<p>Hot Chocolate provides different APIs to customize filtering. You can write custom filter input types, customize the inference behavior of .NET Objects, customize the generated expression, or create a custom visitor, and attach your exotic database.</p>\n<p><strong>As this can be a bit overwhelming the following questionnaire might help:</strong></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>You do not want all the generated filters and only allow a specific set of filters in a specific case?</em></td>\n<td>Custom FilterInputType</td>\n</tr>\n<tr>\n<td><em>You want to change the name of a field or a whole type?</em></td>\n<td>Custom FilterInputType</td>\n</tr>\n<tr>\n<td><em>You want to change the name of the <code class=\"language-text\">where</code> argument?</em></td>\n<td>Filter Conventions ArgumentName</td>\n</tr>\n<tr>\n<td><em>You want to configure how <em>Hot Chocolate</em> generates the name and the description of filters in globally? e.g. <code class=\"language-text\">PascalCaseFilterType</code>?</em></td>\n<td>Filter Conventions</td>\n</tr>\n<tr>\n<td><em>You want to configure what the different types of filters are allowed globally?</em></td>\n<td>Filter Conventions</td>\n</tr>\n<tr>\n<td><em>Your database provider does not support certain operations of <code class=\"language-text\">IQueryable</code></em></td>\n<td>Filter Conventions</td>\n</tr>\n<tr>\n<td><em>You want to change the naming of a specific lar filter type? e.g.</em> <code class=\"language-text\">foo_contains</code> <em>should be</em> <code class=\"language-text\">foo_like</code></td>\n<td>Filter Conventions</td>\n</tr>\n<tr>\n<td><em>You want to customize the expression a filter is generating: e.g.</em> <code class=\"language-text\">_equals</code> <em>should not be case sensitive?</em></td>\n<td>Expression Visitor </td>\n</tr>\n<tr>\n<td><em>You want to create your own filter types with custom parameters and custom expressions? e.g. GeoJson?</em></td>\n<td>Filter Conventions</td>\n</tr>\n<tr>\n<td><em>You have a database client that does not support <code class=\"language-text\">IQueryable</code> and wants to generate filters for it?</em></td>\n<td>Custom Visitor</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"custom-filterinputtype\" style=\"position:relative;\"><a href=\"#custom-filterinputtype\" aria-label=\"custom filterinputtype permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Custom FilterInputType</h1>\n<p>Under the hood, filtering is based on top of normal <em>Hot Chocolate</em> input types. You can easily customize them with a very familiar fluent interface. The filter input types follow the same <code class=\"language-text\">descriptor</code> scheme as you are used to from the normal filter input types. Just extend the base class <code class=\"language-text\">FilterInputType&lt;T&gt;</code> and override the descriptor method.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"25060291035871752000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class User\n{\n    public string Name {get; set; }\n\n    public string LastName {get; set; }\n}\n\npublic class UserFilterType\n    : FilterInputType<User>\n{\n    protected override void Configure( IFilterInputTypeDescriptor<User> descriptor) {\n\n    }\n}`, `25060291035871752000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> LastName <span class=\"token punctuation\">{</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserFilterType</span>\n    <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">FilterInputType<span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">IFilterInputTypeDescriptor<span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">></span></span> descriptor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">IFilterInputTypeDescriptor&lt;T&gt;</code> supports most of the methods of <code class=\"language-text\">IInputTypeDescriptor&lt;T&gt;</code> and adds the configuration interface for the filters. By default, <em>Hot Chocolate</em> generates filters for all properties of the type.\nIf you do want to specify the filters by yourself you can change this behavior with <code class=\"language-text\">BindFields</code>, <code class=\"language-text\">BindFieldsExplicitly</code> or <code class=\"language-text\">BindFieldsImplicitly</code>.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"30410694065115920000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class UserFilterType\n    : FilterInputType<User>\n{\n    protected override void Configure( IFilterInputTypeDescriptor<User> descriptor) {\n       descriptor.BindFieldsExplicitly();\n       descriptor.Filter(x => x.Name);\n    }\n}`, `30410694065115920000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserFilterType</span>\n    <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">FilterInputType<span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">IFilterInputTypeDescriptor<span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">></span></span> descriptor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">BindFieldsExplicitly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Filter</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"98091244273273030000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`input UserFilter {\n  name: String\n  name_contains: String\n  name_ends_with: String\n  name_in: [String]\n  name_not: String\n  name_not_contains: String\n  name_not_ends_with: String\n  name_not_in: [String]\n  name_not_starts_with: String\n  name_starts_with: String\n  AND: [UserFilter!]\n  OR: [UserFilter!]\n}`, `98091244273273030000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">input</span> UserFilter <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_contains</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_ends_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">name_not</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_not_contains</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_not_ends_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_not_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">name_not_starts_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_starts_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">AND</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UserFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">OR</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UserFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To add or customize a filter you must use <code class=\"language-text\">Filter(x =&gt; x.Foo)</code> for scalars <code class=\"language-text\">List(x =&gt; x.Bar)</code> for lists and <code class=\"language-text\">Object(x =&gt; x.Baz)</code> for nested objects.\nThese methods will return fluent interfaces to configure the filter for the selected field.</p>\n<p>A field has different filter operations that you can configure. You will find more about filter types and filter operations here &#x3C;<LINK>>\nWhen fields are bound implicitly, meaning filters are added for all properties, you may want to hide a few fields. You can do this with <code class=\"language-text\">Ignore(x =&gt; Bar)</code>.\nOperations on fields can again be bound implicitly or explicitly. By default, <em>Hot Chocolate</em> generates operations for all fields of the type.\nIf you do want to specify the operations by yourself you can change this behavior with <code class=\"language-text\">BindFilters</code>, <code class=\"language-text\">BindFiltersExplicitly</code> or <code class=\"language-text\">BindFiltersImplicitly</code>.</p>\n<p>It is also possible to customize the GraphQL field of the operation further. You can change the name, add a description or directive.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"1606460793200881200\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class UserFilterType\n    : FilterInputType<User>\n{\n    protected override void Configure( IFilterInputTypeDescriptor<User> descriptor) {\n       // descriptor.BindFieldsImplicitly(); <- is already the default\n       descriptor.Filter(x => x.Name)\n          .BindFilterExplicitly()\n          .AllowContains()\n            .Description(&quot;Checks if the provided string is contained in the \\`Name\\` of a User&quot;)\n            .And()\n          .AllowEquals()\n            .Name(&quot;exits_with_name&quot;)\n            .Directive(&quot;name&quot;);\n       descriptor.Ignore(x => x.Bar);\n    }\n}`, `1606460793200881200`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserFilterType</span>\n    <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">FilterInputType<span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">IFilterInputTypeDescriptor<span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">></span></span> descriptor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token comment\">// descriptor.BindFieldsImplicitly(); &lt;- is already the default</span>\n       descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Filter</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">BindFilterExplicitly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">AllowContains</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Description</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Checks if the provided string is contained in the `Name` of a User\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">AllowEquals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exits_with_name\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Directive</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Ignore</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"27748354898456617000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`input UserFilter {\n  exits_with_name: String @name\n  &quot;&quot;&quot;\n  Checks if the provided string is contained in the \\`Name\\` of a User\n  &quot;&quot;&quot;\n  name_contains: String\n  AND: [UserFilter!]\n  OR: [UserFilter!]\n}`, `27748354898456617000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">input</span> UserFilter <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">exits_with_name</span><span class=\"token punctuation\">:</span> String <span class=\"token directive function\">@name</span>\n  <span class=\"token description string\">\"\"\"<span class=\"token language-markdown\">\n  Checks if the provided string is contained in the `Name` of a User\n  </span>\"\"\"</span>\n  <span class=\"token attr-name\">name_contains</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">AND</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UserFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">OR</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UserFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>API Documentation</strong></p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-csharp\"><span class=\"token function\">BindFields</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BindingBehavior</span> bindingBehavior<span class=\"token punctuation\">)</span></code></td>\n<td>Defines the filter binding behavior. <code class=\"language-text\">Explicitly</code>or <code class=\"language-text\">Implicitly</code>. Default is <code class=\"language-text\">Implicitly</code></td>\n</tr>\n<tr>\n<td><code class=\"language-csharp\">BindFieldsExplicitly</code></td>\n<td>Defines that all filters have to be specified explicitly. This means that only the filters are applied that are added with <code class=\"language-text\">Filter(x =&gt; x.Foo)</code></td>\n</tr>\n<tr>\n<td><code class=\"language-csharp\">BindFieldsImplicitly</code></td>\n<td>The filter type will add filters for all compatible fields.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharp\"><span class=\"token function\">Description</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span></code></td>\n<td>Adds explanatory text of the <code class=\"language-text\">FilterInputType&lt;T&gt;</code> that can be accessed via introspection.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharp\"><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NameString</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span></code></td>\n<td>Defines the <em>GraphQL</em> name of the <code class=\"language-text\">FilterInputType&lt;T&gt;</code>.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharp\"><span class=\"token function\">Ignore</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Expression<span class=\"token punctuation\">&lt;</span>Func<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> property<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></td>\n<td>Ignore the specified property.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharp\"><span class=\"token function\">Filter</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Expression<span class=\"token punctuation\">&lt;</span>Func<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> property<span class=\"token punctuation\">)</span></code></td>\n<td>Defines a string filter for the selected property.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharp\"><span class=\"token function\">Filter</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Expression<span class=\"token punctuation\">&lt;</span>Func<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> property<span class=\"token punctuation\">)</span></code></td>\n<td>Defines a bool filter for the selected property.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharp\"><span class=\"token function\">Filter</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Expression<span class=\"token punctuation\">&lt;</span>Func<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span> IComparable<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> property<span class=\"token punctuation\">)</span></code></td>\n<td>Defines a comparable filter for the selected property.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharp\"><span class=\"token generic-method\"><span class=\"token function\">Object</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TObject<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Expression<span class=\"token punctuation\">&lt;</span>Func<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span> TObject<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> property<span class=\"token punctuation\">)</span></code></td>\n<td>Defines a object filter for the selected property.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharp\"><span class=\"token function\">List</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Expression<span class=\"token punctuation\">&lt;</span>Func<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span> IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> property<span class=\"token punctuation\">)</span></code></td>\n<td>Defines an array string filter for the selected property.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharp\"><span class=\"token function\">List</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Expression<span class=\"token punctuation\">&lt;</span>Func<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span> IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> property<span class=\"token punctuation\">)</span></code></td>\n<td>Defines an array bool filter for the selected property.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharp\"><span class=\"token function\">List</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Expression<span class=\"token punctuation\">&lt;</span>Func<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span> IEnumerable<span class=\"token punctuation\">&lt;</span>IComparable<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> property<span class=\"token punctuation\">)</span></code></td>\n<td>Defines an array comarable filter for the selected property.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharp\"><span class=\"token generic-method\"><span class=\"token function\">Filter</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TObject<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Expression<span class=\"token punctuation\">&lt;</span>Func<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span> IEnumerable<span class=\"token punctuation\">&lt;</span>TObject<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> property<span class=\"token punctuation\">)</span></code></td>\n<td>Defines an array object filter for the selected property.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharp\"><span class=\"token generic-method\"><span class=\"token function\">Directive</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TDirective<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TDirective</span> directiveInstance<span class=\"token punctuation\">)</span></code></td>\n<td>Add directive <code class=\"language-text\">directiveInstance</code> to the type</td>\n</tr>\n<tr>\n<td><code class=\"language-csharp\"><span class=\"token generic-method\"><span class=\"token function\">Directive</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TDirective<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TDirective</span> directiveInstance<span class=\"token punctuation\">)</span></code></td>\n<td>Add directive of type <code class=\"language-text\">TDirective</code> to the type</td>\n</tr>\n<tr>\n<td><code class=\"language-csharp\"><span class=\"token generic-method\"><span class=\"token function\">Directive</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TDirective<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NameString</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">params</span> <span class=\"token class-name\">ArgumentNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> arguments<span class=\"token punctuation\">)</span></code></td>\n<td>Add directive of type <code class=\"language-text\">TDirective</code> to the type</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"filter-conventions\" style=\"position:relative;\"><a href=\"#filter-conventions\" aria-label=\"filter conventions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Filter Conventions</h1>\n<p>The customization of filters with <code class=\"language-text\">FilterInputTypes&lt;T&gt;</code> works if you only want to customize one specific filter type.\nIf you want to change the behavior of all filter types, you want to create a convention for your filters. The filter convention comes with a fluent interface that is close to a type descriptor.\nYou can see the convention as a configuration object that holds the state that is used by the type system or the execution engine.</p>\n<h2 id=\"get-started\" style=\"position:relative;\"><a href=\"#get-started\" aria-label=\"get started permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Get Started</h2>\n<p>To use a filter convention, you can extend <code class=\"language-text\">FilterConvention</code> and override the <code class=\"language-text\">Configure</code> method. Alternatively, you can directly configure the convention over the constructor argument.\nYou then must register your custom convention on the schema builder with <code class=\"language-text\">AddConvention</code>.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"99900814735742170000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class CustomConvention\n    : FilterConvention\n{\n    protected override void Configure(IFilterConventionDescriptor descriptor) { }\n}\n\nSchemaBuilder.New().AddConvention<CustomConvention>();\n//\nSchemaBuilder.New().AddConvention(new FilterConvention(x => /* Config */));`, `99900814735742170000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomConvention</span>\n    <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">FilterConvention</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IFilterConventionDescriptor</span> descriptor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nSchemaBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddConvention</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>CustomConvention<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//</span>\nSchemaBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddConvention</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FilterConvention</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> <span class=\"token comment\">/* Config */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"convention-descriptor-basics\" style=\"position:relative;\"><a href=\"#convention-descriptor-basics\" aria-label=\"convention descriptor basics permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Convention Descriptor Basics</h2>\n<p>In this section, we will take a look at the basic features of the filter convention.\nThe documentation will reference often to <code class=\"language-text\">descriptor</code>. Imagine this <code class=\"language-text\">descriptor</code> as the parameter of the Configure method of the filter convention in the following context:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"57462288983144720000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class CustomConvention\n    : FilterConvention\n{\n    protected override void Configure(\n        /**highlight-start**/\n        IFilterConventionDescriptor descriptor\n        /**highlight-end**/\n    ) { }\n}\n\nSchemaBuilder.New().AddConvention<CustomConvention>();`, `57462288983144720000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomConvention</span>\n    <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">FilterConvention</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">        IFilterConventionDescriptor descriptor</span>    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nSchemaBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddConvention</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>CustomConvention<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br/>\n<h3 id=\"argument-name\" style=\"position:relative;\"><a href=\"#argument-name\" aria-label=\"argument name permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Argument Name</h3>\n<p>With the convention descriptor, you can easily change the argument name of the <code class=\"language-text\">FilterInputType</code>.</p>\n<p><strong>Configuration</strong></p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"44281209910803464000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`descriptor.ArgumentName(&quot;example_argument_name&quot;);`, `44281209910803464000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">ArgumentName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"example_argument_name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Result</strong></p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"72624389625924750000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`type Query {\n  users(example_argument_name: UserFilter): [User]\n}`, `72624389625924750000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">users</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">example_argument_name</span><span class=\"token punctuation\">:</span> UserFilter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>User<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"change-name-of-scalar-list-type-element\" style=\"position:relative;\"><a href=\"#change-name-of-scalar-list-type-element\" aria-label=\"change name of scalar list type element permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Change Name of Scalar List Type Element</h3>\n<p>You can change the name of the element of the list type.</p>\n<p><strong>Configuration</strong></p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"19986939226142675000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`descriptor.ElementName(&quot;example_element_name&quot;);`, `19986939226142675000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">ElementName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"example_element_name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Result</strong></p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"35949216353462178000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`input ISingleFilterOfInt16Filter {\n  AND: [ISingleFilterOfInt16Filter!]\n  example_element_name: Short\n  example_element_name_gt: Short\n  example_element_name_gte: Short\n  example_element_name_in: [Short!]\n  example_element_name_lt: Short\n  example_element_name_lte: Short\n  example_element_name_not: Short\n  example_element_name_not_gt: Short\n  example_element_name_not_gte: Short\n  example_element_name_not_in: [Short!]\n  example_element_name_not_lt: Short\n  example_element_name_not_lte: Short\n  OR: [ISingleFilterOfInt16Filter!]\n}`, `35949216353462178000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">input</span> ISingleFilterOfInt16Filter <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">AND</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>ISingleFilterOfInt16Filter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">example_element_name</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">example_element_name_gt</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">example_element_name_gte</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">example_element_name_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Short<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">example_element_name_lt</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">example_element_name_lte</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">example_element_name_not</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">example_element_name_not_gt</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">example_element_name_not_gte</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">example_element_name_not_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Short<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">example_element_name_not_lt</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">example_element_name_not_lte</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">OR</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>ISingleFilterOfInt16Filter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"configure-filter-type-name-globally\" style=\"position:relative;\"><a href=\"#configure-filter-type-name-globally\" aria-label=\"configure filter type name globally permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configure Filter Type Name Globally</h3>\n<p>You can change the way <em>Hot Chocolate</em> names the types by supplying a delegate.</p>\n<p>This delgate must be of the following type:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"48006177962893970000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public delegate NameString GetFilterTypeName(\n    IDescriptorContext context,\n    Type entityType);`, `48006177962893970000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">delegate</span> <span class=\"token return-type class-name\">NameString</span> <span class=\"token function\">GetFilterTypeName</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">IDescriptorContext</span> context<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Type</span> entityType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Configuration</strong></p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"7045378765116439000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`descriptor.TypeName((context,types) =>\n    context.Naming.GetTypeName(entityType, TypeKind.Object) + &quot;Custom&quot;);`, `7045378765116439000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">TypeName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span>types<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    context<span class=\"token punctuation\">.</span>Naming<span class=\"token punctuation\">.</span><span class=\"token function\">GetTypeName</span><span class=\"token punctuation\">(</span>entityType<span class=\"token punctuation\">,</span> TypeKind<span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"Custom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Result</strong></p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"95650501372006880000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`type Query {\n  users(where: UserCustom): [User]\n}`, `95650501372006880000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">users</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">where</span><span class=\"token punctuation\">:</span> UserCustom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>User<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"configure-filter-description-globally\" style=\"position:relative;\"><a href=\"#configure-filter-description-globally\" aria-label=\"configure filter description globally permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configure Filter Description Globally</h3>\n<p>To change the way filter types are named, you have to exchange the factory.</p>\n<p>You have to provide a delegate of the following type:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"78579392283694710000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public delegate string GetFilterTypeDescription(\n    IDescriptorContext context,\n    Type entityType);`, `78579392283694710000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">delegate</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">GetFilterTypeDescription</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">IDescriptorContext</span> context<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Type</span> entityType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Configuration</strong></p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"9470536084481206000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`descriptor.TypeName((context,types) =>\n    context.Naming.GetTypeDescription(entityType, TypeKind.Object); + &quot;Custom&quot;);`, `9470536084481206000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">TypeName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span>types<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    context<span class=\"token punctuation\">.</span>Naming<span class=\"token punctuation\">.</span><span class=\"token function\">GetTypeDescription</span><span class=\"token punctuation\">(</span>entityType<span class=\"token punctuation\">,</span> TypeKind<span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"Custom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Result</strong></p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"71885256891532575000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`&quot;&quot;&quot;\nCustom\n&quot;&quot;&quot;\ninput UserFilter {\n  AND: [UserFilter!]\n  isOnline: Boolean\n  isOnline_not: Boolean\n  OR: [UserFilter!]\n}`, `71885256891532575000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token description string\">\"\"\"<span class=\"token language-markdown\">\nCustom\n</span>\"\"\"</span>\n<span class=\"token keyword\">input</span> UserFilter <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">AND</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UserFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">isOnline</span><span class=\"token punctuation\">:</span> Boolean\n  <span class=\"token attr-name\">isOnline_not</span><span class=\"token punctuation\">:</span> Boolean\n  <span class=\"token attr-name\">OR</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UserFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"reset-configuration\" style=\"position:relative;\"><a href=\"#reset-configuration\" aria-label=\"reset configuration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reset Configuration</h3>\n<p><em>Hot Chocolate</em> shippes with well-defined defaults. To start from scratch, you need to call <code class=\"language-text\">Reset()</code>first.</p>\n<p><strong>Configuration</strong></p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"86975508861394470000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`descriptor.Reset();`, `86975508861394470000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Result</strong></p>\n<blockquote>\n<p><strong>⚠ Note:</strong> You will need to add a complete configuration, otherwise the filter will not work as desired!</p>\n</blockquote>\n<h2 id=\"describe-with-convention\" style=\"position:relative;\"><a href=\"#describe-with-convention\" aria-label=\"describe with convention permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Describe with convention</h2>\n<p>With the filter convention descriptor, you have full control over what filters are inferred, their names, operations, and a lot more.\nThe convention provides a familiar interface to the type configuration. We recommended to first take a look at <code class=\"language-text\">Filter &amp; Operations</code> to understand the concept of filters. This will help you understand how the filter configuration works.</p>\n<p>Filtering has two core components at its heart. First, you have the inference of filters based on .NET types. The second part is an interceptor that translates the filters to the desired output and applies it to the resolver pipeline. These two parts can (and have to) be configured completely independently. With this separation, it is possible to easily extend the behavior. The descriptor is designed to be extendable by extension methods.</p>\n<p><strong>It's fluent</strong></p>\n<p>Filter conventions are a completely fluent experience. You can write a whole configuration as a chain of method calls.\nThis provides a very clean interface, but can, on the other hand, get messy quickly. We recommend using indentation to keep the configuration comprehensible.\nYou can drill up with <code class=\"language-text\">And()</code>.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"47644247083904246000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(` descriptor.Operation(FilterOperationKind.Equals).Description(&quot;has to be equal&quot;);\n descriptor.Operation(FilterOperationKind.NotEquals).Description(&quot;has not to be equal&quot;);\n descriptor.Type(FilterKind.Comparable).Operation(FilterOperationKind.NotEquals).Description(&quot;has to be comparable and not equal&quot;)\n\n\n descriptor\n    .Operation(FilterOperationKind.Equals)\n        .Description(&quot;has to be equal&quot;)\n        .And()\n    .Operation(FilterOperationKind.NotEquals)\n        .Description(&quot;has not to be equal&quot;)\n        .And()\n    .Type(FilterKind.Comparable)\n        .Operation(FilterOperationKind.NotEquals)\n            .Description(&quot;has to be comparable and not equal&quot;)`, `47644247083904246000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"> descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Operation</span><span class=\"token punctuation\">(</span>FilterOperationKind<span class=\"token punctuation\">.</span>Equals<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Description</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"has to be equal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Operation</span><span class=\"token punctuation\">(</span>FilterOperationKind<span class=\"token punctuation\">.</span>NotEquals<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Description</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"has not to be equal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span>FilterKind<span class=\"token punctuation\">.</span>Comparable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Operation</span><span class=\"token punctuation\">(</span>FilterOperationKind<span class=\"token punctuation\">.</span>NotEquals<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Description</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"has to be comparable and not equal\"</span><span class=\"token punctuation\">)</span>\n\n\n descriptor\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Operation</span><span class=\"token punctuation\">(</span>FilterOperationKind<span class=\"token punctuation\">.</span>Equals<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Description</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"has to be equal\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Operation</span><span class=\"token punctuation\">(</span>FilterOperationKind<span class=\"token punctuation\">.</span>NotEquals<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Description</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"has not to be equal\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span>FilterKind<span class=\"token punctuation\">.</span>Comparable<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Operation</span><span class=\"token punctuation\">(</span>FilterOperationKind<span class=\"token punctuation\">.</span>NotEquals<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Description</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"has to be comparable and not equal\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"configuration-of-the-type-system\" style=\"position:relative;\"><a href=\"#configuration-of-the-type-system\" aria-label=\"configuration of the type system permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configuration of the type system</h3>\n<p>In this section, we will focus on the generation of the schema. If you are interested in changing how filters translate to the database, you have to look here &#x3C;<INSERT LINK HERE>></p>\n<h4 id=\"configure-filter-operations\" style=\"position:relative;\"><a href=\"#configure-filter-operations\" aria-label=\"configure filter operations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configure Filter Operations</h4>\n<p>There are two ways to configure Operations.</p>\n<p>You can configure a default configuration that applies to all operations of this kind. In this case the configuration for <code class=\"language-text\">FilterOperationKind.Equals</code> would be applied to all <code class=\"language-text\">FilterKind</code> that specify this operation.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"6458195664211596000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(` descriptor.Operation(FilterOperationKind.Equals)`, `6458195664211596000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"> descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Operation</span><span class=\"token punctuation\">(</span>FilterOperationKind<span class=\"token punctuation\">.</span>Equals<span class=\"token punctuation\">)</span></code></pre></div>\n<p>If you want to configure a more specific Operation e.g. <code class=\"language-text\">FilterOperationKind.Equal</code> of kind <code class=\"language-text\">FilterKind.String</code>, you can override the default behavior.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"61339544712811290000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(` descriptor.Type(FilterKind.String).Operation(FilterOperationKind.Equals)`, `61339544712811290000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"> descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span>FilterKind<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Operation</span><span class=\"token punctuation\">(</span>FilterOperationKind<span class=\"token punctuation\">.</span>Equals<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The operation descriptor allows you to configure the name, the description or even ignore an operation completely</p>\n<p>In this example, we will look at the following input type:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"96940820926908000000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`input UserFilter {\n  loggingCount: Int\n  loggingCount_gt: Int\n  loggingCount_gte: Int\n  loggingCount_in: [Int!]\n  loggingCount_lt: Int\n  loggingCount_lte: Int\n  loggingCount_not: Int\n  loggingCount_not_gt: Int\n  loggingCount_not_gte: Int\n  loggingCount_not_in: [Int!]\n  loggingCount_not_lt: Int\n  loggingCount_not_lte: Int\n  name: String\n  name_contains: String\n  name_ends_with: String\n  name_in: [String]\n  name_not: String\n  name_not_contains: String\n  name_not_ends_with: String\n  name_not_in: [String]\n  name_not_starts_with: String\n  name_starts_with: String\n  AND: [UserFilter!]\n  OR: [UserFilter!]\n}`, `96940820926908000000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">input</span> UserFilter <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">loggingCount</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_gt</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_gte</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Int<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">loggingCount_lt</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_lte</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_not</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_not_gt</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_not_gte</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_not_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Int<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">loggingCount_not_lt</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_not_lte</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_contains</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_ends_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">name_not</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_not_contains</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_not_ends_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_not_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">name_not_starts_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_starts_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">AND</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UserFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">OR</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UserFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5 id=\"change-the-name-of-an-operation\" style=\"position:relative;\"><a href=\"#change-the-name-of-an-operation\" aria-label=\"change the name of an operation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Change the name of an operation</h5>\n<p>To change the name of an operation you need to specify a delegate of the following type:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"66361377239624760000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public delegate NameString CreateFieldName(\n    FilterFieldDefintion definition,\n    FilterOperationKind kind);`, `66361377239624760000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">delegate</span> <span class=\"token return-type class-name\">NameString</span> <span class=\"token function\">CreateFieldName</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">FilterFieldDefintion</span> definition<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">FilterOperationKind</span> kind<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Configuration</strong></p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"14625471305304893000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(` // (A)\n // specifies that all not equals operations should be extended with _nada\n descriptor\n    .Operation(FilterOperationKind.NotEquals)\n        .Name((def, kind) => def.Name + &quot;_nada&quot; );\n // (B)\n // specifies that the not equals operations should be extended with _niente.\n // this overrides (A)\n descriptor\n    .Type(FilterKind.Comparable)\n        .Operation(FilterOperationKind.NotEquals)\n            .Name((def, kind) => def.Name + &quot;_niente&quot; )`, `14625471305304893000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"gatsby-highlight-code-line\"> <span class=\"token comment\">// (A)</span></span> <span class=\"token comment\">// specifies that all not equals operations should be extended with _nada</span>\n descriptor\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Operation</span><span class=\"token punctuation\">(</span>FilterOperationKind<span class=\"token punctuation\">.</span>NotEquals<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>def<span class=\"token punctuation\">,</span> kind<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> def<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">+</span> <span class=\"token string\">\"_nada\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"> <span class=\"token comment\">// (B)</span></span> <span class=\"token comment\">// specifies that the not equals operations should be extended with _niente.</span>\n <span class=\"token comment\">// this overrides (A)</span>\n descriptor\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span>FilterKind<span class=\"token punctuation\">.</span>Comparable<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Operation</span><span class=\"token punctuation\">(</span>FilterOperationKind<span class=\"token punctuation\">.</span>NotEquals<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>def<span class=\"token punctuation\">,</span> kind<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> def<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">+</span> <span class=\"token string\">\"_niente\"</span> <span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>result</strong></p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"61546147666513960000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`input UserFilter {\n  loggingCount: Int\n  loggingCount_gt: Int\n  loggingCount_gte: Int\n  loggingCount_in: [Int!]\n  loggingCount_lt: Int\n  loggingCount_lte: Int\n  loggingCount_niente: Int   <-- (B)\n  loggingCount_not_gt: Int\n  loggingCount_not_gte: Int\n  loggingCount_not_in: [Int!]\n  loggingCount_not_lt: Int\n  loggingCount_not_lte: Int\n  name: String\n  name_contains: String\n  name_ends_with: String\n  name_in: [String]\n  name_nada: String  <-- (A)\n  name_not_contains: String\n  name_not_ends_with: String\n  name_not_in: [String]\n  name_not_starts_with: String\n  name_starts_with: String\n  AND: [UserFilter!]\n  OR: [UserFilter!]\n}`, `61546147666513960000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">input</span> UserFilter <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">loggingCount</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_gt</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_gte</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Int<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">loggingCount_lt</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_lte</span><span class=\"token punctuation\">:</span> Int\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token attr-name\">loggingCount_niente</span><span class=\"token punctuation\">:</span> Int   &lt;-- <span class=\"token punctuation\">(</span><span class=\"token constant\">B</span><span class=\"token punctuation\">)</span></span>  <span class=\"token attr-name\">loggingCount_not_gt</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_not_gte</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_not_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Int<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">loggingCount_not_lt</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_not_lte</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_contains</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_ends_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token attr-name\">name_nada</span><span class=\"token punctuation\">:</span> String  &lt;-- <span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">)</span></span>  <span class=\"token attr-name\">name_not_contains</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_not_ends_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_not_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">name_not_starts_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_starts_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">AND</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UserFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">OR</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UserFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5 id=\"change-the-description-of-an-operation\" style=\"position:relative;\"><a href=\"#change-the-description-of-an-operation\" aria-label=\"change the description of an operation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Change the description of an operation</h5>\n<p>In the same way, you can configure names you can also configure the description of operations.\nYou can either set the description for all operations of this kind or only for a specific one in combination with a filter kind.</p>\n<p><strong>Configuration</strong></p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"56754078422834730000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(` descriptor\n    .Operation(FilterOperationKind.Equals)\n        .Description(&quot;has to be equal&quot;)\n        .And()\n    .Operation(FilterOperationKind.NotEquals)\n        .Description(&quot;has not to be equal&quot;)\n        .And()\n    .Type(FilterKind.Comparable)\n        .Operation(FilterOperationKind.NotEquals)\n            .Description(&quot;has to be comparable and not equal&quot;)`, `56754078422834730000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"> descriptor\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Operation</span><span class=\"token punctuation\">(</span>FilterOperationKind<span class=\"token punctuation\">.</span>Equals<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Description</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"has to be equal\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Operation</span><span class=\"token punctuation\">(</span>FilterOperationKind<span class=\"token punctuation\">.</span>NotEquals<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Description</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"has not to be equal\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span>FilterKind<span class=\"token punctuation\">.</span>Comparable<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Operation</span><span class=\"token punctuation\">(</span>FilterOperationKind<span class=\"token punctuation\">.</span>NotEquals<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Description</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"has to be comparable and not equal\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>result</strong></p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"69004341791527170000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`input UserFilter {\n  &quot;&quot;&quot;\n  has to be equal\n  &quot;&quot;&quot;\n  loggingCount: Int\n  loggingCount_gt: Int\n  loggingCount_gte: Int\n  loggingCount_in: [Int!]\n  loggingCount_lt: Int\n  loggingCount_lte: Int\n  &quot;&quot;&quot;\n  has to be comparable and not equal\n  &quot;&quot;&quot;\n  loggingCount_not: Int\n  loggingCount_not_gt: Int\n  loggingCount_not_gte: Int\n  loggingCount_not_in: [Int!]\n  loggingCount_not_lt: Int\n  loggingCount_not_lte: Int\n  &quot;&quot;&quot;\n  has to be equal\n  &quot;&quot;&quot;\n  name: String\n  name_contains: String\n  name_ends_with: String\n  name_in: [String]\n  &quot;&quot;&quot;\n  has not to be equal\n  &quot;&quot;&quot;\n  name_not: String\n  name_not_contains: String\n  name_not_ends_with: String\n  name_not_in: [String]\n  name_not_starts_with: String\n  name_starts_with: String\n  AND: [UserFilter!]\n  OR: [UserFilter!]\n}`, `69004341791527170000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">input</span> UserFilter <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token description string\">\"\"\"<span class=\"token language-markdown\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token language-markdown\">  has to be equal</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token language-markdown\">  </span>\"\"\"</span></span>  <span class=\"token attr-name\">loggingCount</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_gt</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_gte</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Int<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">loggingCount_lt</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_lte</span><span class=\"token punctuation\">:</span> Int\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token description string\">\"\"\"<span class=\"token language-markdown\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token language-markdown\">  has to be comparable and not equal</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token language-markdown\">  </span>\"\"\"</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token attr-name\">loggingCount_not</span><span class=\"token punctuation\">:</span> Int</span>  <span class=\"token attr-name\">loggingCount_not_gt</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_not_gte</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_not_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Int<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">loggingCount_not_lt</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_not_lte</span><span class=\"token punctuation\">:</span> Int\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token description string\">\"\"\"<span class=\"token language-markdown\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token language-markdown\">  has to be equal</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token language-markdown\">  </span>\"\"\"</span></span>  <span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_contains</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_ends_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token description string\">\"\"\"<span class=\"token language-markdown\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token language-markdown\">  has not to be equal</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token language-markdown\">  </span>\"\"\"</span></span>  <span class=\"token attr-name\">name_not</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_not_contains</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_not_ends_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_not_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">name_not_starts_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_starts_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">AND</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UserFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">OR</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UserFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5 id=\"hide-operations\" style=\"position:relative;\"><a href=\"#hide-operations\" aria-label=\"hide operations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hide Operations</h5>\n<p><em>Hot Chocolate</em> comes preconfigured with a set of operations. If you like to hide operations globally, you can use <code class=\"language-text\">Ignore</code> for it.\nIf your database provider does not support certain <code class=\"language-text\">IQueryable</code> methods you can just ignore the operation. Ignored operations do not generate filter input types.</p>\n<p>There are multiple ways to ignore an operation:</p>\n<p><strong>Configuration</strong></p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"84203791170726630000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(` descriptor\n    .Ignore(FilterOperationKind.Equals)\n    .Operation(FilterOperationKind.NotEquals)\n        .Ignore()\n        .And()\n    .Type(FilterKind.Comparable)\n          .Operation(FilterOperationKind.GreaterThanOrEqual)\n          .Ignore();`, `84203791170726630000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"> descriptor\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Ignore</span><span class=\"token punctuation\">(</span>FilterOperationKind<span class=\"token punctuation\">.</span>Equals<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Operation</span><span class=\"token punctuation\">(</span>FilterOperationKind<span class=\"token punctuation\">.</span>NotEquals<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Ignore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span>FilterKind<span class=\"token punctuation\">.</span>Comparable<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">Operation</span><span class=\"token punctuation\">(</span>FilterOperationKind<span class=\"token punctuation\">.</span>GreaterThanOrEqual<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">Ignore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>result</strong></p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"26303650648159384000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`input UserFilter {\n  ↵\n  loggingCount_gt: Int\n  ↵\n  loggingCount_in: [Int!]\n  loggingCount_lt: Int\n  loggingCount_lte: Int\n  ↵\n  loggingCount_not_gt: Int\n  loggingCount_not_gte: Int\n  loggingCount_not_in: [Int!]\n  loggingCount_not_lt: Int\n  loggingCount_not_lte: Int\n  ↵\n  name_contains: String\n  name_ends_with: String\n  name_in: [String]\n  ↵\n  name_not_contains: String\n  name_not_ends_with: String\n  name_not_in: [String]\n  name_not_starts_with: String\n  name_starts_with: String\n  AND: [UserFilter!]\n  OR: [UserFilter!]\n}`, `26303650648159384000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">input</span> UserFilter <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  ↵</span>  <span class=\"token attr-name\">loggingCount_gt</span><span class=\"token punctuation\">:</span> Int\n<span class=\"gatsby-highlight-code-line\">  ↵</span>  <span class=\"token attr-name\">loggingCount_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Int<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">loggingCount_lt</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_lte</span><span class=\"token punctuation\">:</span> Int\n<span class=\"gatsby-highlight-code-line\">  ↵</span>  <span class=\"token attr-name\">loggingCount_not_gt</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_not_gte</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_not_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Int<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">loggingCount_not_lt</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_not_lte</span><span class=\"token punctuation\">:</span> Int\n<span class=\"gatsby-highlight-code-line\">  ↵</span>  <span class=\"token attr-name\">name_contains</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_ends_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span>\n<span class=\"gatsby-highlight-code-line\">  ↵</span>  <span class=\"token attr-name\">name_not_contains</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_not_ends_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_not_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">name_not_starts_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_starts_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">AND</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UserFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">OR</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UserFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5 id=\"configure-implicit-filter\" style=\"position:relative;\"><a href=\"#configure-implicit-filter\" aria-label=\"configure implicit filter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configure Implicit Filter</h5>\n<p>The default binding behavior of <em>Hot Chocolate</em> is implicit. Filter types are no exception.\nThis first may seem like magic, but unfortunately, there is none. It is just code. With <code class=\"language-text\">AddImplicitFilter</code> you can add this pinch of magic to your extension too.\n<em>Hot Chocolate</em> creates the filters as it builds the input type. The type iterates over a list of factories sequentially and tries to create a definition for each property. The first factory that can handle the property wins and creates a definition for the filter.</p>\n<p>To configure you have to use the following delegate:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"4863007025205168000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`    public delegate bool TryCreateImplicitFilter(\n        IDescriptorContext context,\n        Type type,\n        PropertyInfo property,\n        IFilterConvention filterConventions,\n        [NotNullWhen(true)] out FilterFieldDefintion? definition);`, `4863007025205168000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">delegate</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">TryCreateImplicitFilter</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">IDescriptorContext</span> context<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Type</span> type<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">PropertyInfo</span> property<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">IFilterConvention</span> filterConventions<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">NotNullWhen</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\">FilterFieldDefintion<span class=\"token punctuation\">?</span></span> definition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>context</em></td>\n<td><code class=\"language-text\">IDescriptorContext</code></td>\n<td>The context of the type descriptor</td>\n</tr>\n<tr>\n<td><em>type</em></td>\n<td><code class=\"language-text\">Type</code></td>\n<td>The type of the property. <code class=\"language-text\">Nullable&lt;T&gt;</code> is already unwrapped (typeof(T))</td>\n</tr>\n<tr>\n<td><em>property</em></td>\n<td><code class=\"language-text\">PropertyInfo</code></td>\n<td>The property</td>\n</tr>\n<tr>\n<td><em>filterConventions</em></td>\n<td><code class=\"language-text\">IFilterConvention</code></td>\n<td>The instance of the <code class=\"language-text\">IFilterContention</code>.</td>\n</tr>\n<tr>\n<td><em>definition</em></td>\n<td><code class=\"language-text\">out FilterFieldDefintion?</code></td>\n<td>The generated definition for the property. Return null if the current factory cannot handle the property.</td>\n</tr>\n</tbody>\n</table>\n<p>If you just want to build your extension for implicit bindings, you can just out a custom <code class=\"language-text\">FilterFieldDefinition</code>.</p>\n<p>It makes sense to encapsulate that logic in a FilterFieldDescriptor though. You can reuse this descriptor also for the fluent configuration interface.</p>\n<p><strong>Example</strong></p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"63780545274910015000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`private static bool TryCreateStringFilter(\n    IDescriptorContext context,\n    Type type,\n    PropertyInfo property,\n    IFilterConvention filterConventions,\n    [NotNullWhen(true)] out FilterFieldDefintion? definition)\n{\n    if (type == typeof())\n    {\n        var field = new StringFilterFieldDescriptor(context, property, filterConventions);\n        definition = field.CreateDefinition();\n        return true;\n    }\n\n    definition = null;\n    return false;\n}`, `63780545274910015000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">TryCreateStringFilter</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">IDescriptorContext</span> context<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Type</span> type<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">PropertyInfo</span> property<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">IFilterConvention</span> filterConventions<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">NotNullWhen</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\">FilterFieldDefintion<span class=\"token punctuation\">?</span></span> definition<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">==</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\"></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> field <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StringFilterFieldDescriptor</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">,</span> filterConventions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        definition <span class=\"token operator\">=</span> field<span class=\"token punctuation\">.</span><span class=\"token function\">CreateDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    definition <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5 id=\"creating-a-fluent-filter-extension\" style=\"position:relative;\"><a href=\"#creating-a-fluent-filter-extension\" aria-label=\"creating a fluent filter extension permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating a fluent filter extension</h5>\n<p><em>Hot Chocolate</em> provides fluent interfaces for all its APIs. If you want to create an extension that integrates seamlessly with <em>Hot Chocolate</em> it makes sense to also provide fluent interfaces. It makes sense to briefly understand how <code class=\"language-text\">Type -&gt; Descriptor -&gt; Definition</code> work. You can read more about it here //TODO LINK</p>\n<p>Here a quick introduction:</p>\n<p><em>Type</em></p>\n<p>A type is a description of a GraphQL Type System Object. <em>Hot Chocolate</em> builds types during schema creation. Types specify how a GraphQL Type looks like. It holds, for example, the definition, fields, interfaces, and all life cycle methods. Type do only exist on startup; they do not exist on runtime.</p>\n<p><em>Type Definition</em></p>\n<p>Each type has a definition that describes the type. It holds, for example, the name, description, the CLR type and the field definitions. The field definitions describe the fields that are on the type.</p>\n<p><em>Type Descriptor</em></p>\n<p>A type descriptor is a fluent interface to describe the type over the definition. The type descriptor does not have access to the type itself. It operates solely on the definition.</p>\n<p>In the case of filtering, this works nearly the same. The <code class=\"language-text\">FilterInputType</code> is just an extension of the <code class=\"language-text\">InputObjectType</code>. It also has the same <em>Definition</em>. The <code class=\"language-text\">FilterInputType</code> stores <code class=\"language-text\">FilterOperationField</code> on this definition. These are extensions of the normal <code class=\"language-text\">InputField</code>'s and extend it by a <code class=\"language-text\">FilterOperationKind</code>.</p>\n<p>With a normal <code class=\"language-text\">InputTypeDescriptor</code> you declare a field by selecting a member. The filter descriptor works a little differently. You declare the <code class=\"language-text\">FilterKind</code> of a member by selecting it and then you declare the operations on this filter. These operations are the input field configuration.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"99029950177670380000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`InputTypeDescriptor<User> inputDesc;\ninputDesc.Field(x => x.Name)\n            .Description(&quot;This is the name&quot;)\n\n\nFilterInputTypeDescriptor<User> inputDesc;\ninputDesc.Filter(x => x.Name).AllowEqual().Description(&quot;This is the name&quot;)`, `99029950177670380000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">InputTypeDescriptor<span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">></span></span> inputDesc<span class=\"token punctuation\">;</span>\ninputDesc<span class=\"token punctuation\">.</span><span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Description</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is the name\"</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token class-name\">FilterInputTypeDescriptor<span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">></span></span> inputDesc<span class=\"token punctuation\">;</span>\ninputDesc<span class=\"token punctuation\">.</span><span class=\"token function\">Filter</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AllowEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Description</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is the name\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>We have a few case studies that will show you how you can change the inference:</p>\n<ol>\n<li>String \"_like\" shows an example of how you can easily add a \"_like\" operation to the string filter</li>\n<li>DateTime \"from\", \"to\"</li>\n<li>NetTopologySuite</li>\n</ol>\n<blockquote>\n<p>The configuration you see in this case study only shows how you add an operation to an already-existing filter. After this, the job is only half way done. To create a working filter, you must also change the expression visitor. Check the documentation for //TODO: ExpressionVisitor</p>\n</blockquote>\n<h5 id=\"case-study-string-_like\" style=\"position:relative;\"><a href=\"#case-study-string-_like\" aria-label=\"case study string _like permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Case Study: String \"_like\"</h5>\n<p><strong>Situation</strong>\nThe customer has requested a full-text search of the description field of a product. The product owner has promised the feature to the customer two sprints ago and it has still not been shipped. The UX guru of your company has, slightly under pressure, worked out a solution, and together with the frontend team they have already build a prototype. In the heat of the moment, they did not read the user story correctly and, unfortunately, realized last minute that the current filtering API does not fit their needs. The customer does also has to be able to create complex search queries. <code class=\"language-text\">This%Test</code> should match <code class=\"language-text\">This is a Test</code>. As you come back from lunch a hysterical product owner explains the situation to you. To you, it is immediately clear that this can be easily done by using the SQL <code class=\"language-text\">like</code> operator.</p>\n<p>In your codebase you use the <code class=\"language-text\">UseFiltering</code> middleware extensively. In some cases, you also have customized filter types. To cover all possible cases you need</p>\n<ol>\n<li>Implicit Binding: <code class=\"language-text\">[UseFiltering]</code> should automagically create the \"_like\" filter for every string filter</li>\n<li>Explicity Binding: <code class=\"language-text\">desc.Filter(x =&gt; x.Description).AllowLike())</code></li>\n<li>Expression Visitor: You want to directly filter on the database. You use EF Core.</li>\n</ol>\n<p><strong>Implicit Binding</strong>\nWith the conventions, it is easy to add operations on already existing filters. We will first look into the configuration for filter inference and in a second step into the code first extension.</p>\n<p>You just need to navigate to the filter you like to modify. <code class=\"language-text\">descriptor.Type(FilterKind.String)</code>. Just add the operation you need with <code class=\"language-text\">.Operation(FilterOperationKind.Like)</code>. The next step is to add factories for the name and the description.</p>\n<p>Altogether this looks like this:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"5941704752087063000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class CustomConvention : FilterConvention\n{\n    protected override void Configure(IFilterConventionDescriptor descriptor)\n    {\n      descriptor\n          .Type(FilterKind.String)\n            .Operation(FilterOperationKind.GreaterThanOrEqual)\n                .Name((def, kind) => def.Name + &quot;_like&quot; );\n                .Description(&quot;Full text search. Use % as a placeholder for any symbol&quot;);\n    }\n}`, `5941704752087063000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomConvention</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">FilterConvention</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IFilterConventionDescriptor</span> descriptor<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      descriptor\n          <span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span>FilterKind<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Operation</span><span class=\"token punctuation\">(</span>FilterOperationKind<span class=\"token punctuation\">.</span>GreaterThanOrEqual<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>def<span class=\"token punctuation\">,</span> kind<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> def<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">+</span> <span class=\"token string\">\"_like\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">Description</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Full text search. Use % as a placeholder for any symbol\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Explicit Binding</strong>\nBy extending the filter descriptor of the string filter you can add a fluent extension that seamlessly integrated with the <em>Hot Chocolate</em> API.</p>\n<p>//TODO: currently there <code class=\"language-text\">StringFilterOperationDescriptor</code> requires <code class=\"language-text\">StringFilterFieldDescriptor</code> instead of <code class=\"language-text\">StringFilterFieldDescriptor</code> and there is no way to <code class=\"language-text\">Allow&lt;T&gt;</code>\n//TODO: TYPO ! FilterFieldDefintion\n//TODO: Move RewriteType to convention .\n//TODO: Move up CreateFieldName</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"11546575242914870000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public static class StringLikeFilterExtension\n{\n    public static IStringFilterOperationDescriptor AllowLike(\n        IStringFilterFieldDescriptor descriptor)\n    {\n        return descriptor.Allow(\n            FilterOperationKind.ArrayAll,\n            (ctx, definition) =>\n            {\n                var operation = new FilterOperation(\n                    typeof(string), FilterOperationKind.ArrayAll, definition.Property);\n\n                return StringFilterOperationDescriptor.New(\n                    ctx,\n                    descriptor,\n                    ctx.GetFilterConvention().CreateFieldName(FilterOperationKind.ArrayAll),\n                    ctx.GetFilterConvention().RewriteType(FilterOperationKind.ArrayAll),\n                    operation);\n            }\n        )\n    }\n}`, `11546575242914870000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StringLikeFilterExtension</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IStringFilterOperationDescriptor</span> <span class=\"token function\">AllowLike</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">IStringFilterFieldDescriptor</span> descriptor<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Allow</span><span class=\"token punctuation\">(</span>\n            FilterOperationKind<span class=\"token punctuation\">.</span>ArrayAll<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> definition<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> operation <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FilterOperation</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\"><span class=\"token keyword\">string</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> FilterOperationKind<span class=\"token punctuation\">.</span>ArrayAll<span class=\"token punctuation\">,</span> definition<span class=\"token punctuation\">.</span>Property<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">return</span> StringFilterOperationDescriptor<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>\n                    ctx<span class=\"token punctuation\">,</span>\n                    descriptor<span class=\"token punctuation\">,</span>\n                    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">GetFilterConvention</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">CreateFieldName</span><span class=\"token punctuation\">(</span>FilterOperationKind<span class=\"token punctuation\">.</span>ArrayAll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">GetFilterConvention</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">RewriteType</span><span class=\"token punctuation\">(</span>FilterOperationKind<span class=\"token punctuation\">.</span>ArrayAll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    operation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h5 id=\"case-study-datetime-from-to\" style=\"position:relative;\"><a href=\"#case-study-datetime-from-to\" aria-label=\"case study datetime from to permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Case Study: DateTime \"from\", \"to\"</h5>\n<p><strong>Situation</strong></p>\n<ol>\n<li>Implicit Binding: <code class=\"language-text\">[UseFiltering]</code> should automagically create <code class=\"language-text\">DateTimeFilter</code> and the corresponding \"_from\" and \"_to\".</li>\n<li>Explicity Binding: <code class=\"language-text\">desc.Filter(x =&gt; x.OrderedAt).AllowFrom().AllowTo())</code></li>\n<li>Expression Visitor: You want to directly filter on the database. You use EF Core.</li>\n</ol>\n<p><strong>Configuration</strong></p>\n<p>It is slightly more complex to create a custom filter than just modifying existing operations. There are a few different parts that must come together to make this work. Implicit and Explicit Bindings are coming together in this example.</p>\n<p>Let's start with the configuration of the convention. By splitting the configuration up into a set of extension methods that can be applied to the convention, it is possible to easily replace sub-components of the extension. e.g. some users might want to use an expression visitor, some others might want to use MognoDB Native.</p>\n<ul>\n<li><code class=\"language-text\">UseDateTimeFilter</code> adds support for date-time filters and registers the expression visitor for it. Abstraction for <code class=\"language-text\">UseDateTimeFilterImplicitly().UseDateTimeExpression()</code></li>\n<li><code class=\"language-text\">UseDateTimeFilterImplicitly</code> only registers the configuration of the schema building part of the extension</li>\n<li><code class=\"language-text\">UseDateTimeExpression</code> only registers the expression visitor configuration.</li>\n</ul>\n<p>With this separation, a user that prefers to use a custom visitor, can just register the types and skip the expression visitor configuration</p>\n<p>TODO: UseExpressionVisitor should return expression visitor if it already exists\nTODO: Reference Definition from Filter Operation instead of property. This way we could reduce complexity further and improve extensibility</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"43004518592650850000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public static class DateTimeFilterConventionExtensions\n{\n    public static IFilterConventionDescriptor UseDateTimeFilter(\n        this IFilterConventionDescriptor descriptor) =>\n            descriptor.UseDateTimeFilterImplicitly()\n                .UseDateTimeFilterExpression();\n\n    public static IFilterConventionDescriptor UseDateTimeFilterImplicitly(\n        this IFilterConventionDescriptor descriptor) =>\n            descriptor.AddImplicitFilter(TryCreateDateTimeFilter)\n                .Type(FilterKind.DateTime)\n                .Operation(FilterOperationKind.GreaterThanOrEquals)\n                    .Name((def, _) => def.Name + &quot;_from&quot;)\n                    .Description(&quot;&quot;)\n                    .And()\n                .Operation(FilterOperationKind.LowerThanOrEquals)\n                    .Name((def, _) => def.Name + &quot;_to&quot;)\n                    .Description(&quot;&quot;)\n                    .And()\n                .And();\n\n    public static IFilterConventionDescriptor UseDateTimeFilterExpression(\n        this IFilterConventionDescriptor descriptor) =>\n            descriptor.UseExpressionVisitor()\n                .Kind(FilterKind.DateTime)\n                    .Operation(FilterOperationKind.LowerThanOrEquals)\n                        .Handler(ComparableOperationHandlers.LowerThanOrEquals).And()\n                    .Operation(FilterOperationKind.GreaterThanOrEquals)\n                    .Handler(ComparableOperationHandlers.GreaterThanOrEquals).And()\n                    .And()\n                  .And();\n}`, `43004518592650850000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DateTimeFilterConventionExtensions</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IFilterConventionDescriptor</span> <span class=\"token function\">UseDateTimeFilter</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">this</span> <span class=\"token class-name\">IFilterConventionDescriptor</span> descriptor<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n            descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">UseDateTimeFilterImplicitly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">UseDateTimeFilterExpression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IFilterConventionDescriptor</span> <span class=\"token function\">UseDateTimeFilterImplicitly</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">this</span> <span class=\"token class-name\">IFilterConventionDescriptor</span> descriptor<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n            descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">AddImplicitFilter</span><span class=\"token punctuation\">(</span>TryCreateDateTimeFilter<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span>FilterKind<span class=\"token punctuation\">.</span>DateTime<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">Operation</span><span class=\"token punctuation\">(</span>FilterOperationKind<span class=\"token punctuation\">.</span>GreaterThanOrEquals<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>def<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> def<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">+</span> <span class=\"token string\">\"_from\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">Description</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">Operation</span><span class=\"token punctuation\">(</span>FilterOperationKind<span class=\"token punctuation\">.</span>LowerThanOrEquals<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>def<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> def<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">+</span> <span class=\"token string\">\"_to\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">Description</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IFilterConventionDescriptor</span> <span class=\"token function\">UseDateTimeFilterExpression</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">this</span> <span class=\"token class-name\">IFilterConventionDescriptor</span> descriptor<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n            descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">UseExpressionVisitor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">Kind</span><span class=\"token punctuation\">(</span>FilterKind<span class=\"token punctuation\">.</span>DateTime<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">Operation</span><span class=\"token punctuation\">(</span>FilterOperationKind<span class=\"token punctuation\">.</span>LowerThanOrEquals<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">Handler</span><span class=\"token punctuation\">(</span>ComparableOperationHandlers<span class=\"token punctuation\">.</span>LowerThanOrEquals<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">Operation</span><span class=\"token punctuation\">(</span>FilterOperationKind<span class=\"token punctuation\">.</span>GreaterThanOrEquals<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">Handler</span><span class=\"token punctuation\">(</span>ComparableOperationHandlers<span class=\"token punctuation\">.</span>GreaterThanOrEquals<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Create Date Time Filter Implicitly</strong></p>\n<p><code class=\"language-text\">DateTime</code> is a new filter. <em>Hot Chocolate</em> is only aware of its existence because of the delegate passed to <code class=\"language-text\">AddImplicitFilter</code></p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"22138158008617650000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`private static bool TryCreateDateTimeFiler(\n    IDescriptorContext context,\n    Type type,\n    PropertyInfo property,\n    IFilterConvention filterConventions,\n    [NotNullWhen(true)] out FilterFieldDefintion? definition)\n{\n    if (type == typeof())\n    {\n        var field = new DateTimeFilterFieldDescriptor(\n          context, property, filterConventions);\n        definition = field.CreateDefinition();\n        return true;\n    }\n\n    definition = null;\n    return false;\n}`, `22138158008617650000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">TryCreateDateTimeFiler</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">IDescriptorContext</span> context<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Type</span> type<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">PropertyInfo</span> property<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">IFilterConvention</span> filterConventions<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">NotNullWhen</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\">FilterFieldDefintion<span class=\"token punctuation\">?</span></span> definition<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">==</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\"></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> field <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">DateTimeFilterFieldDescriptor</span><span class=\"token punctuation\">(</span>\n          context<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">,</span> filterConventions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        definition <span class=\"token operator\">=</span> field<span class=\"token punctuation\">.</span><span class=\"token function\">CreateDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    definition <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>TODO: make filters name based\n<strong>Filter Field</strong></p>\n<p>A filter field is a collection of operations. It holds the configuration of the different operations like <em>“from”</em> and <em>“to”</em>. In classic <em>Hot Chocolate</em> fashion there is a descriptor that describes these collections. <em>Hot Chocolate</em> provides the base class <code class=\"language-text\">FilterFieldDescriptorBase</code> you can use as an extension point. There is quite a lot of boilerplate code you need to write. e.g. it makes sense to define an interface for the descriptor.\nYou find an example here: //TODO LINK</p>\n<p>For the explicit binding, we need to override <code class=\"language-text\">CreateOperationDefinition</code>. In case the filter is bound implicitly, this method is invoked for each operation.\nTODO: I think there is an issue with AllowNotEndsWith.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"42325773596840070000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`// We override this method for implicity binding\nprotected override FilterOperationDefintion CreateOperationDefinition(\n    FilterOperationKind operationKind) =>\n        CreateOperation(operationKind).CreateDefinition();`, `42325773596840070000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// We override this method for implicity binding</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">FilterOperationDefintion</span> <span class=\"token function\">CreateOperationDefinition</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">FilterOperationKind</span> operationKind<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token function\">CreateOperation</span><span class=\"token punctuation\">(</span>operationKind<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">CreateDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>For the implicit binding, we only need to add the methods <code class=\"language-text\">AllowFrom</code> and <code class=\"language-text\">AllowTo</code>.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"11734512959917298000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`// The following to methods are for adding the filters explicitly\npublic IDateTimeFilterOperationDescriptor AllowFrom() =>\n    GetOrCreateOperation(FilterOperationKind.GreaterThanOrEqual);\n\npublic IDateTimeFilterOperationDescriptor AllowTo() =>\n    GetOrCreateOperation(FilterOperationKind.LowerThanOrEqual);\n\n// This is just a little helper that reduces code duplication\nprivate DateTimeFilterOperationDescriptor GetOrCreateOperation(\n    FilterOperationKind operationKind) =>\n        Filters.GetOrAddOperation(operationKind,\n            () => CreateOperation(operationKind));`, `11734512959917298000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// The following to methods are for adding the filters explicitly</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IDateTimeFilterOperationDescriptor</span> <span class=\"token function\">AllowFrom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token function\">GetOrCreateOperation</span><span class=\"token punctuation\">(</span>FilterOperationKind<span class=\"token punctuation\">.</span>GreaterThanOrEqual<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IDateTimeFilterOperationDescriptor</span> <span class=\"token function\">AllowTo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token function\">GetOrCreateOperation</span><span class=\"token punctuation\">(</span>FilterOperationKind<span class=\"token punctuation\">.</span>LowerThanOrEqual<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// This is just a little helper that reduces code duplication</span>\n<span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">DateTimeFilterOperationDescriptor</span> <span class=\"token function\">GetOrCreateOperation</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">FilterOperationKind</span> operationKind<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        Filters<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrAddOperation</span><span class=\"token punctuation\">(</span>operationKind<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">CreateOperation</span><span class=\"token punctuation\">(</span>operationKind<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>All the methods described above call <code class=\"language-text\">CreateOperation</code>. This method creates the operation descriptor. The <code class=\"language-text\">FitlerOperation</code> that is created here, will also be available for the expression visitor.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"54487514177910310000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`// This helper method creates the operation.\nprivate DateTimeFilterOperationDescriptor CreateOperation(\n    FilterOperationKind operationKind)\n    {\n        // This operation is also available in execution.\n        var operation = new FilterOperation(\n            typeof(DateTime),\n            Definition.Kind,\n            operationKind,\n            Definition.Property);\n\n        return DateTimeOffsetFilterOperationDescriptor.New(\n            Context,\n            this,\n            CreateFieldName(operationKind),\n            RewriteType(operationKind),\n            operation,\n            FilterConvention);\n    }`, `54487514177910310000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// This helper method creates the operation.</span>\n<span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">DateTimeFilterOperationDescriptor</span> <span class=\"token function\">CreateOperation</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">FilterOperationKind</span> operationKind<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// This operation is also available in execution.</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> operation <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FilterOperation</span><span class=\"token punctuation\">(</span>\n            <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">DateTime</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Definition<span class=\"token punctuation\">.</span>Kind<span class=\"token punctuation\">,</span>\n            operationKind<span class=\"token punctuation\">,</span>\n            Definition<span class=\"token punctuation\">.</span>Property<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> DateTimeOffsetFilterOperationDescriptor<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>\n            Context<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">CreateFieldName</span><span class=\"token punctuation\">(</span>operationKind<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">RewriteType</span><span class=\"token punctuation\">(</span>operationKind<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            operation<span class=\"token punctuation\">,</span>\n            FilterConvention<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Filter Operation</strong></p>\n<p>In this example; there are two filter operations <em>\"form\"</em> and <em>\"to\"</em>. The configuration with a descriptor combines explicit and implicit binding. As a base class, you can use <code class=\"language-text\">FilterOperationDescriptorBase</code>.\nHere is the interface that is used in this example:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"25128708273888600000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public interface IDateTimeFilterOperationDescriptor\n        : IDescriptor<FilterOperationDefintion>\n        , IFluent\n    {\n        /// Define filter operations for another field.\n        IDateTimeFilterFieldDescriptor And();\n\n        /// Specify the name of the filter operation.\n        IDateTimeFilterOperationDescriptor Name(NameString value);\n\n        /// Specify the description of the filter operation.\n        IDateTimeFilterOperationDescriptor Description(string value);\n\n        /// Annotate the operation filter field with a directive.\n        IDateTimeFilterOperationDescriptor Directive<T>(T directiveInstance)\n            where T : class;\n        IDateTimeFilterOperationDescriptor Directive<T>()\n            where T : class, new();\n        IDateTimeFilterOperationDescriptor Directive(\n            NameString name,\n            params ArgumentNode[] arguments);\n    }`, `25128708273888600000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IDateTimeFilterOperationDescriptor</span>\n        <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IDescriptor<span class=\"token punctuation\">&lt;</span>FilterOperationDefintion<span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">,</span> <span class=\"token class-name\">IFluent</span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/// Define filter operations for another field.</span>\n        <span class=\"token return-type class-name\">IDateTimeFilterFieldDescriptor</span> <span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// Specify the name of the filter operation.</span>\n        <span class=\"token return-type class-name\">IDateTimeFilterOperationDescriptor</span> <span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NameString</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// Specify the description of the filter operation.</span>\n        <span class=\"token return-type class-name\">IDateTimeFilterOperationDescriptor</span> <span class=\"token function\">Description</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// Annotate the operation filter field with a directive.</span>\n        <span class=\"token return-type class-name\">IDateTimeFilterOperationDescriptor</span> <span class=\"token generic-method\"><span class=\"token function\">Directive</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> directiveInstance<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">where</span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token keyword\">class</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token return-type class-name\">IDateTimeFilterOperationDescriptor</span> <span class=\"token generic-method\"><span class=\"token function\">Directive</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">where</span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token return-type class-name\">IDateTimeFilterOperationDescriptor</span> <span class=\"token function\">Directive</span><span class=\"token punctuation\">(</span>\n            <span class=\"token class-name\">NameString</span> name<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">params</span> <span class=\"token class-name\">ArgumentNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can find the implementation of this interface here: //TODO link</p>\n<p><strong>Filter Type Extension</strong>\nThe last missing piece to complete the integration into <em>Hot Chocolate</em> is an extension of <code class=\"language-text\">FilterInputType&lt;T&gt;</code>. This can again be done as a extension method.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"2885601497070134000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public IStringFilterFieldDescriptor Filter(\n    Expression<Func<T, string>> property)\n{\n    if (property.ExtractMember() is PropertyInfo p)\n    {\n        return Fields.GetOrAddDescriptor(p,\n            () => new StringFilterFieldDescriptor(Context, p));\n    }\n\n    throw new ArgumentException(\n        FilterResources.FilterInputTypeDescriptor_OnlyProperties,\n        nameof(property));\n}`, `2885601497070134000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IStringFilterFieldDescriptor</span> <span class=\"token function\">Filter</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">Expression<span class=\"token punctuation\">&lt;</span>Func<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> property<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">.</span><span class=\"token function\">ExtractMember</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token class-name\">PropertyInfo</span> p<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Fields<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrAddDescriptor</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StringFilterFieldDescriptor</span><span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentException</span><span class=\"token punctuation\">(</span>\n        FilterResources<span class=\"token punctuation\">.</span>FilterInputTypeDescriptor_OnlyProperties<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>//TODO Open this api</p>\n<hr>\n<h5 id=\"case-study-filters-for-nettopologysuite\" style=\"position:relative;\"><a href=\"#case-study-filters-for-nettopologysuite\" aria-label=\"case study filters for nettopologysuite permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Case Study: Filters for NetTopologySuite</h5>\n<p><strong>Situation</strong></p>\n<blockquote>\n<p><strong>Note:</strong> If you are searching for <code class=\"language-text\">NetTopologySuite</code>, they are already implemented. Have a look at//TODO LINK</p>\n</blockquote>\n<ol>\n<li>Implicit Binding: <code class=\"language-text\">[UseFiltering]</code> should automagically create <code class=\"language-text\">Point</code> and the corresponding \"_distance\"</li>\n<li>Explicity Binding: <code class=\"language-text\">desc.Filter(x =&gt; x.Location).AllowDistance()</code></li>\n<li>Expression Visitor: You want to directly filter on the database. You use EF Core.</li>\n</ol>\n<p>Things are different in this case, as there is no longer a 1:1 mapping of input type to method or property. Imagine you want to fetch all bakeries that are near you. In C# you would write something like <code class=\"language-text\">dbContext.Bakeries.Where(x =&gt; x.Location.Distance(me.Location) &lt; 5)</code>. This cannot be translated to a <em>GraphQL</em> input type directly.</p>\n<p>A <em>GraphQL</em> query might look like this.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"21050696951835790000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`{\n  bakeries(\n    where: { location: { distance: { from: { x: 32, y: 15 }, is_lt: 5 } } }\n  ) {\n    name\n  }\n}`, `21050696951835790000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  bakeries<span class=\"token punctuation\">(</span>\n    <span class=\"token attr-name\">where</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token attr-name\">location</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token attr-name\">distance</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token attr-name\">from</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token attr-name\">x</span><span class=\"token punctuation\">:</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">y</span><span class=\"token punctuation\">:</span> <span class=\"token number\">15</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">is_lt</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    name\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>GraphQL</em> input fields cannot have arguments. To work around this issue a data structure is needed that combines the filter payload and the operation. The input type for this example has the following structure.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"14203060737932626000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class FilterDistance\n{\n\n    public FilterDistance(\n        FilterPointData from)\n    {\n        From = from;\n    }\n    /// contains the x and y coordinates.\n    public FilterPointData From { get; }\n\n    public double Is { get; set; }\n}\n\n\\`\\`\\`graphql\ninput FilterDistanceInput {\n  from: FilterPointDataInput!\n  is: Float\n  is_gt: Float\n  is_gte: Float\n  is_lt: Float\n  is_lte: Float\n  is_in: Float\n  is_not: Float\n  is_not_gt: Float\n  is_not_gte: Float\n  is_not_lt: Float\n  is_not_lte: Float\n  is_not_in: Float\n}`, `14203060737932626000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FilterDistance</span>\n<span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">FilterDistance</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">FilterPointData</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        From <span class=\"token operator\">=</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/// contains the x and y coordinates.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">FilterPointData</span> From <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">double</span></span> Is <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n```graphql\n<span class=\"token return-type class-name\">input</span> FilterDistanceInput <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">from</span><span class=\"token punctuation\">:</span> FilterPointDataInput<span class=\"token operator\">!</span>\n  <span class=\"token keyword\">is</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Float</span>\n  is_gt<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Float</span>\n  is_gte<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Float</span>\n  is_lt<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Float</span>\n  is_lte<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Float</span>\n  is_in<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Float</span>\n  is_not<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Float</span>\n  is_not_gt<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Float</span>\n  is_not_gte<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Float</span>\n  is_not_lt<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Float</span>\n  is_not_lte<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Float</span>\n  is_not_in<span class=\"token punctuation\">:</span> Float\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>//TODO: Add skip / inopfield!</p>\n<p><em>Hot Chocolate</em> would generate nested filters for the payload property \"From\" by default. This can be avoided by declaring the field as input payload.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"53629918068549755000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class DistanceFilterType\n    : FilterInputType<FilterDistance>\n{\n    protected override void Configure(\n        IFilterInputTypeDescriptor<FilterDistance> descriptor)\n    {\n        descriptor.Input(x => x.From);\n        descriptor.Filter(x => x.Is);\n    }\n}`, `53629918068549755000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DistanceFilterType</span>\n    <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">FilterInputType<span class=\"token punctuation\">&lt;</span>FilterDistance<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">IFilterInputTypeDescriptor<span class=\"token punctuation\">&lt;</span>FilterDistance<span class=\"token punctuation\">></span></span> descriptor<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Input</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>From<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Filter</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Is<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Convention &#x26; Implicit Factory &#x26; Type Descriptor</strong></p>\n<p>The configuration of the convention, the implicit type factory and the descirptors are very similar to the the two examples before. To not bloat the documentation with duplication we just refere to these two examples and to the reference implementation here //TODO LINK</p>\n<hr>\n<h2 id=\"translating-filters\" style=\"position:relative;\"><a href=\"#translating-filters\" aria-label=\"translating filters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Translating Filters</h2>\n<p><em>Hot Chocolate</em> can translate incoming filters requests directly onto collections or even on to the database. In the default implementation, the output of this translation is a Linq expression that can be applied to <code class=\"language-text\">IQueryable</code> and <code class=\"language-text\">IEnumerable</code>. You can choose to change the expression that is generated or can even create custom output. <em>Hot Chocolate</em> is using visitors to translate input objects. <a href=\"TODO://ADDLINK\">You find more information about visitors here.</a>.</p>\n<h3 id=\"expression-filters\" style=\"position:relative;\"><a href=\"#expression-filters\" aria-label=\"expression filters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Expression Filters</h3>\n<p>Filter conventions make it easier to change how an expression should be generated. There are three different extension points you can use to change the behavior of the expression visitor. You do not have to worry about the visiting of the input object itself.</p>\n<h5 id=\"describe-the-expression-visitor\" style=\"position:relative;\"><a href=\"#describe-the-expression-visitor\" aria-label=\"describe the expression visitor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Describe the Expression Visitor</h5>\n<p>The expression visitor descriptor is accessible through the filter convention. By calling <code class=\"language-text\">UseExpressionVisitor</code> on the convention descriptor you gain access. The expression visitor has the default set of expressions preconfigured.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"21570510891408290000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class CustomConvention : FilterConvention\n{\n    protected override void Configure(\n        IFilterConventionDescriptor descriptor)\n    {\n        descriptor.UseExpressionVisitor()\n    }\n}`, `21570510891408290000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomConvention</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">FilterConvention</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">IFilterConventionDescriptor</span> descriptor<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">UseExpressionVisitor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The descriptor provides a fluent interface that is very similar to the one of the convention descriptor itself. You have to specify what <em>operation</em> on which <em>filter kind</em> you want to configure. You can drill with <code class=\"language-text\">Kind</code> and <code class=\"language-text\">Operation</code> and go back up by calling <code class=\"language-text\">And()</code>:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"87970237400241680000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class CustomConvention : FilterConvention\n{\n    protected override void Configure(\n        IFilterConventionDescriptor descriptor)\n    {\n        descriptor\n            .UseExpressionVisitor()\n                .Kind(FilterKind.String)\n                    .Operation(FilterKind.Equals)\n                    .And()\n                .And()\n                .Kind(FilterKind.Comparable)\n                    .Operation(FilterKind.In)\n    }\n}`, `87970237400241680000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomConvention</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">FilterConvention</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">IFilterConventionDescriptor</span> descriptor<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        descriptor\n            <span class=\"token punctuation\">.</span><span class=\"token function\">UseExpressionVisitor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">Kind</span><span class=\"token punctuation\">(</span>FilterKind<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">Operation</span><span class=\"token punctuation\">(</span>FilterKind<span class=\"token punctuation\">.</span>Equals<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">Kind</span><span class=\"token punctuation\">(</span>FilterKind<span class=\"token punctuation\">.</span>Comparable<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">Operation</span><span class=\"token punctuation\">(</span>FilterKind<span class=\"token punctuation\">.</span>In<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Visitation Flow</strong></p>\n<p>The expression visitor starts as any other visitor at the node you pass in. Usually, this is the node object value node of the filter argument. It then starts the visitation. Every time the visitor <em>enters</em> or <em>leaves</em> an object field, it looks for a matching configuration. If there is no special <em>enter</em> behavior of a field, the visitor generates the expression for the combination of <em>kind</em> and <em>operation</em>.</p>\n<p>The next two paragraphs show how the algorithm works in detail.</p>\n<p><em>Enter</em></p>\n<p>On <em>entering</em> a field, the visitor tries to get a <code class=\"language-text\">FilterFieldEnter</code> delegate for the <code class=\"language-text\">FilterKind</code> of the current field. If a delegate was found, executed, and the execution return true, the <code class=\"language-text\">Enter</code> method returns the <em>action</em> specified by the delegate. In all other cases, the visitor tries to execute an <code class=\"language-text\">OperationHandler</code> for the combination <code class=\"language-text\">FilterKind</code> and <code class=\"language-text\">OperationKind</code>. If the handler returns true, the expression returned by the handler is added to the context.</p>\n<ol>\n<li>Let <em>field</em> be the field that is visited</li>\n<li>Let <em>kind</em> be the <code class=\"language-text\">FilterKind</code> of <em>field</em></li>\n<li>Let <em>operation</em> be the <code class=\"language-text\">FilterOperationKind</code> of <em>field</em></li>\n<li>Let <em>convention</em> be the <code class=\"language-text\">FilterConvention</code> used by this visitor</li>\n<li>Let <em>enterField</em> be the <code class=\"language-text\">FilterFieldEnter</code> delegate for <em>kind</em> on <em>convention</em></li>\n<li>\n<p>If <em>enterField</em> is not null:</p>\n<ol>\n<li>Let <em>action</em> be the visitor action of <em>enterField</em></li>\n<li>If <em>enterField</em> returns true:</li>\n<li><strong>return</strong> <em>action</em></li>\n</ol>\n</li>\n<li>Let <em>operationHander</em> be the <code class=\"language-text\">FilterOperationHandler</code> delegate for (<em>kind</em>, <em>operation</em>) on <em>convention</em></li>\n<li>\n<p>If <em>operationHandler</em> is not null:</p>\n<ol>\n<li>Let <em>expression</em> be the expression generated by <em>operationHandler</em></li>\n<li>If <em>enterField</em> returns true:</li>\n<li>enqueue <em>expression</em></li>\n</ol>\n</li>\n<li><strong>return</strong> <code class=\"language-text\">SkipAndLeave</code></li>\n</ol>\n<p><em>Leave</em></p>\n<p>On <em>entering</em> a field, the visitor tries to get and execute a <code class=\"language-text\">FilterFieldLeave</code> delegate for the <code class=\"language-text\">FilterKind</code> of the current field.</p>\n<ol>\n<li>Let <em>field</em> be the field that is visited</li>\n<li>Let <em>kind</em> be the <code class=\"language-text\">FilterKind</code> of <em>field</em></li>\n<li>Let <em>operation</em> be the <code class=\"language-text\">FilterOperationKind</code> of <em>field</em></li>\n<li>Let <em>convention</em> be the <code class=\"language-text\">FilterConvention</code> used by this visitor</li>\n<li>Let <em>leaveField</em> be the <code class=\"language-text\">FilterFieldLeave</code> delegate for <em>kind</em> on <em>convention</em></li>\n<li>\n<p>If <em>leaveField</em> is not null:</p>\n<ol>\n<li>Execute <em>leaveField</em></li>\n</ol>\n</li>\n</ol>\n<p><strong>Operations</strong></p>\n<p>The operation descriptor provides you with the method <code class=\"language-text\">Handler</code>. With this method, you can configure, how the expression for the <em>operation</em> of this filter <em>kind</em> is generated. You have to pass a delegate of the following type:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"31272739451892818000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public delegate bool FilterOperationHandler(\n    FilterOperation operation,\n    IInputType type,\n    IValueNode value,\n    IQueryableFilterVisitorContext context,\n    [NotNullWhen(true)]out Expression? result);`, `31272739451892818000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">delegate</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">FilterOperationHandler</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">FilterOperation</span> operation<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">IInputType</span> type<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">IValueNode</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">IQueryableFilterVisitorContext</span> context<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">NotNullWhen</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><span class=\"token keyword\">out</span> <span class=\"token class-name\">Expression<span class=\"token punctuation\">?</span></span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This delegate might seem intimidating first, but it is not bad as it looks. If this delegate <code class=\"language-text\">true</code> the <code class=\"language-text\">out Expression?</code> is enqueued on the filters. This means that the visitor will pick it up as it composes the filters.</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">FilterOperation operation</code></td>\n<td>The operation of the current field</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">IInputType type</code></td>\n<td>The input type of the current field</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">IValueNode value</code></td>\n<td>The AST value node of the current field</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">IQueryableFilterVisitorContext context</code></td>\n<td>The context that builds up the state</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">out Expression? result</code></td>\n<td>The generated expression</td>\n</tr>\n</tbody>\n</table>\n<p>Operations handlers can be configured like the following:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"24945003487191376000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class CustomConvention : FilterConvention\n{\n    protected override void Configure(\n        IFilterConventionDescriptor descriptor)\n    {\n        descriptor\n            .UseExpressionVisitor()\n                .Kind(FilterKind.String)\n                    .Operation(FilterKind.Equals)\n                        .Handler(YourVeryOwnHandler.HandleEquals)\n                    .And()\n                    .Operation(FilterKind.NotEquals)\n                        .Handler(YourVeryOwnHandler.HandleNotEquals)\n    }\n}`, `24945003487191376000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomConvention</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">FilterConvention</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">IFilterConventionDescriptor</span> descriptor<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        descriptor\n            <span class=\"token punctuation\">.</span><span class=\"token function\">UseExpressionVisitor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">Kind</span><span class=\"token punctuation\">(</span>FilterKind<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">Operation</span><span class=\"token punctuation\">(</span>FilterKind<span class=\"token punctuation\">.</span>Equals<span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">                        <span class=\"token punctuation\">.</span><span class=\"token function\">Handler</span><span class=\"token punctuation\">(</span>YourVeryOwnHandler<span class=\"token punctuation\">.</span>HandleEquals<span class=\"token punctuation\">)</span></span>                    <span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">Operation</span><span class=\"token punctuation\">(</span>FilterKind<span class=\"token punctuation\">.</span>NotEquals<span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">                        <span class=\"token punctuation\">.</span><span class=\"token function\">Handler</span><span class=\"token punctuation\">(</span>YourVeryOwnHandler<span class=\"token punctuation\">.</span>HandleNotEquals<span class=\"token punctuation\">)</span></span>    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>TODO: add example</p>\n<p><strong>Kind</strong></p>\n<p>There are two extension points on each <em>filter kind</em>. You can alter the <em>entering</em> of a filter and the <em>leaving</em>.</p>\n<p><strong>Enter</strong>\nYou can configure the entering with the following delegate:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"62286495446680630000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public delegate bool FilterFieldEnter(\n    FilterOperationField field,\n    ObjectFieldNode node,\n    IQueryableFilterVisitorContext context,\n    [NotNullWhen(true)]out ISyntaxVisitorAction? action);`, `62286495446680630000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">delegate</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">FilterFieldEnter</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">FilterOperationField</span> field<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">ObjectFieldNode</span> node<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">IQueryableFilterVisitorContext</span> context<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">NotNullWhen</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><span class=\"token keyword\">out</span> <span class=\"token class-name\">ISyntaxVisitorAction<span class=\"token punctuation\">?</span></span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If this field returns <em>true</em> the filter visitor will continue visitation with the specified <em>action</em> in the out parameter <code class=\"language-text\">action</code>. <a href=\"http://addlinkshere\">Check out the visitor documentation for all possible actions</a>.\nIf the field does not return true and a visitor action, the visitor will continue and search for a <em>operation handler</em>. After this, the visitor will continue with <code class=\"language-text\">SkipAndLeave</code>.</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">FilterOperationField field</code></td>\n<td>The current field</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">ObjectFieldNode node</code></td>\n<td>The object node of the current field</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">IQueryableFilterVisitorContext context</code></td>\n<td>The context that builds up the state</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">out ISyntaxVisitorAction? action</code></td>\n<td>The visitor action</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Leave</strong>\nYou can configure the entering with the following delegate:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"31964539805620550000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public delegate void FilterFieldLeave(\n    FilterOperationField field,\n    ObjectFieldNode node,\n    IQueryableFilterVisitorContext context);`, `31964539805620550000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">delegate</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">FilterFieldLeave</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">FilterOperationField</span> field<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">ObjectFieldNode</span> node<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">IQueryableFilterVisitorContext</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">FilterOperationField field</code></td>\n<td>The current field</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">ObjectFieldNode node</code></td>\n<td>The object node of the current field</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">IQueryableFilterVisitorContext context</code></td>\n<td>The context that builds up the state</td>\n</tr>\n</tbody>\n</table>","tableOfContents":"<ul>\n<li><a href=\"/hotchocolate/api-reference/filtering/#overview\">Overview</a></li>\n<li><a href=\"/hotchocolate/api-reference/filtering/#customizing-filters\">Customizing Filters</a></li>\n<li><a href=\"/hotchocolate/api-reference/filtering/#sorting\">Sorting</a></li>\n<li>\n<p><a href=\"/hotchocolate/api-reference/filtering/#filter--operations-kinds\">Filter &#x26; Operations Kinds</a></p>\n<ul>\n<li><a href=\"/hotchocolate/api-reference/filtering/#filter-kinds\">Filter Kinds</a></li>\n<li><a href=\"/hotchocolate/api-reference/filtering/#operations-kinds\">Operations Kinds</a></li>\n<li><a href=\"/hotchocolate/api-reference/filtering/#boolean-filter\">Boolean Filter</a></li>\n<li><a href=\"/hotchocolate/api-reference/filtering/#comparable-filter\">Comparable Filter</a></li>\n<li><a href=\"/hotchocolate/api-reference/filtering/#string-filter\">String Filter</a></li>\n<li><a href=\"/hotchocolate/api-reference/filtering/#object-filter\">Object Filter</a></li>\n<li><a href=\"/hotchocolate/api-reference/filtering/#list-filter\">List Filter</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/hotchocolate/api-reference/filtering/#naming-conventions\">Naming Conventions</a></p>\n<ul>\n<li><a href=\"/hotchocolate/api-reference/filtering/#snake-case\">Snake Case</a></li>\n<li><a href=\"/hotchocolate/api-reference/filtering/#pascal-case\">Pascal Case</a></li>\n</ul>\n</li>\n<li><a href=\"/hotchocolate/api-reference/filtering/#customizing-filter\">Customizing Filter</a></li>\n<li><a href=\"/hotchocolate/api-reference/filtering/#custom-filterinputtype\">Custom FilterInputType</a></li>\n<li>\n<p><a href=\"/hotchocolate/api-reference/filtering/#filter-conventions\">Filter Conventions</a></p>\n<ul>\n<li><a href=\"/hotchocolate/api-reference/filtering/#get-started\">Get Started</a></li>\n<li><a href=\"/hotchocolate/api-reference/filtering/#convention-descriptor-basics\">Convention Descriptor Basics</a></li>\n<li><a href=\"/hotchocolate/api-reference/filtering/#describe-with-convention\">Describe with convention</a></li>\n<li><a href=\"/hotchocolate/api-reference/filtering/#translating-filters\">Translating Filters</a></li>\n</ul>\n</li>\n</ul>"}},"site":{"siteMetadata":{"siteUrl":"https://chillicream.com","repositoryUrl":"https://github.com/ChilliCream/hotchocolate","tools":{"slack":"https://join.slack.com/t/hotchocolategraphql/shared_invite/enQtNTA4NjA0ODYwOTQ0LTViMzA2MTM4OWYwYjIxYzViYmM0YmZhYjdiNzBjOTg2ZmU1YmMwNDZiYjUyZWZlMzNiMTk1OWUxNWZhMzQwY2Q"}}},"config":{"products":[{"path":"hotchocolate","title":"Hot Chocolate","description":"Build your own thin GraphQL API layer on top of any resource.","versions":[{"path":"v10","title":"v10 (stable)","items":[{"path":"index","title":"Introduction","items":null},{"path":"code-first","title":"Code-First","items":null},{"path":"schema-first","title":"Schema-First","items":null},{"path":"schema","title":"Schema","items":[{"path":"index","title":"Schema"},{"path":"object-type","title":"Object Type"},{"path":"interface-type","title":"Interface Type"},{"path":"union-type","title":"Union Type"},{"path":"input-object-type","title":"Input Object Type"},{"path":"enum-type","title":"Enum Type"},{"path":"descriptions","title":"Schema Descriptions"},{"path":"custom-scalar-types","title":"Scalar Type Support"},{"path":"descriptor-attributes","title":"Descriptor Attributes"},{"path":"extending-types","title":"Custom Base Classes"},{"path":"directives","title":"Directives"},{"path":"resolvers","title":"Resolvers"},{"path":"relay","title":"Relay"},{"path":"conventions","title":"Conventions"},{"path":"options","title":"Schema Options"}]},{"path":"data-fetching","title":"Data Fetching","items":[{"path":"index","title":"Data Loaders"},{"path":"pagination","title":"Pagination"},{"path":"filters","title":"Filters"}]},{"path":"security","title":"Security","items":[{"path":"index","title":"Authorization"},{"path":"security","title":"Security"}]},{"path":"execution-engine","title":"Execution Engine","items":[{"path":"index","title":"Middleware"},{"path":"validation-rules","title":"Validation Rules"},{"path":"instrumentation","title":"Instrumentation"},{"path":"apollo-tracing","title":"Apollo Tracing"},{"path":"batching","title":"Batching"},{"path":"persisted-queries","title":"Persisted Queries"},{"path":"custom-context-data","title":"Custom Context Data"},{"path":"subscriptions","title":"Subscriptions"},{"path":"type-conversion","title":"Type Conversion"},{"path":"error-filter","title":"Error Filter"},{"path":"execution-options","title":"Execution Options"}]},{"path":"server","title":"Server","items":[{"path":"index","title":"ASP.Net"},{"path":"dependency-injection","title":"Dependency Injection"}]},{"path":"stitching","title":"Schema Stitching","items":null},{"path":"tooling","title":"Tooling","items":null},{"path":"advanced","title":"Advanced","items":[{"path":"index","title":"Parser"},{"path":"dotnet-cli","title":".Net CLI"}]},{"path":"tutorials","title":"Tutorials","items":[{"path":"index","title":"Entity Framework"}]},{"path":"examples","title":"Examples","items":[{"path":"index","title":"Star Wars"},{"path":"slack-clone","title":"Slack Clone"},{"path":"other-examples","title":"Other Examples"}]}]},{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null},{"path":"getting-started","title":"Getting Started","items":null},{"path":"defining-a-schema","title":"Defining a schema","items":[{"path":"index","title":"Schema basics"},{"path":"versioning","title":"Versioning"},{"path":"unions-and-interfaces","title":"Unions and Interfaces"},{"path":"scalars","title":"Scalars"},{"path":"directives","title":"Directives"}]},{"path":"fetching-data","title":"Fetching data","items":[{"path":"index","title":"Resolver"},{"path":"fetching-from-databases","title":"Fetching from Databases"},{"path":"fetching-from-rest","title":"Fetching from REST"},{"path":"dataloader","title":"DataLoader"},{"path":"pagination","title":"Pagination"},{"path":"filtering","title":"Filtering"},{"path":"sorting","title":"Sorting"}]},{"path":"api-reference","title":"API Reference","items":[{"path":"index","title":"Overview"},{"path":"language","title":"Lanugage"},{"path":"visitors","title":"Visitors"}]}]}]},{"path":"bananacakepop","title":"Banana Cake Pop","description":"Use this GUI to get deep insights from any GraphQL API.","versions":[{"path":"","title":"v1 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"strawberryshake","title":"Strawberry Shake","description":"Generate a unique GraphQL client for .Net to fetch data from any GraphQL API.","versions":[{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"marshmallowpie","title":"Marshmallow Pie","description":"Configure a GraphQL registry to keep track of any GraphQL server and client.","versions":[{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"greendonut","title":"Green Donut","description":"Configure data loaders and caching for GraphQL endpoints.","versions":[{"path":"v10","title":"v10 (stable)","items":[{"path":"index","title":"Introduction","items":null},{"path":"installation","title":"Installation","items":null},{"path":"usage","title":"Usage","items":null},{"path":"api","title":"API","items":null},{"path":"advanced-concepts","title":"Advanced Concepts","items":[{"path":"index","title":"Custom DataLoader"},{"path":"diagnostics","title":"Diagnostic Events"}]}]},{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]}]}},"pageContext":{"originPath":"hotchocolate/api-reference/filtering.md"}},"staticQueryHashes":["2890364758","4218812017","63159454"]}