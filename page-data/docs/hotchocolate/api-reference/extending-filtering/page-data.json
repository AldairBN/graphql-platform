{"componentChunkName":"component---src-templates-doc-page-template-tsx","path":"/docs/hotchocolate/api-reference/extending-filtering","result":{"data":{"file":{"childMarkdownRemark":{"fields":{"slug":"/hotchocolate/api-reference/extending-filtering/"},"frontmatter":{"title":"Extending Filtering"},"html":"<blockquote>\n<p><strong>Work in progress</strong>: This documentation is not yet complete.</p>\n</blockquote>\n<p>The <code class=\"language-text\">HotChocolate.Data</code> package works with all databases that support <code class=\"language-text\">IQueryable</code>. Included in the\ndefault settings, are all filter operations that work over <code class=\"language-text\">IQueryable</code> on all databases.\nSometimes this is not enough. Some databases might not support <code class=\"language-text\">IQueryable</code>. Some other databases may have\ntechnology-specific operations (e.g. SQL Like). Filtering was designed with extensibility in mind.</p>\n<p>Filtering can be broken down into two basic parts. Schema building and execution. In schema building,\nthe input types are created. In execution, the data passed by the user is analyzed and translated to a\ndatabase query. Both parts can be configured over a convention.</p>\n<p>In theory, you are free to design the structure of filters as it suits you best.\nUsually, it makes sense to divide the structure into two parts. The <em>field</em> and the <em>operation</em>.</p>\n<p>The query below returns all movies where the franchise is equal to \"Star Wars\". The <em>field</em> <code class=\"language-text\">franchise</code> where the filter\nis applied to and the <em>operation</em> equals (<code class=\"language-text\">eq</code>) that should operate on this field.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n    movies(\n        where: { \n            franchise: {\n                eq: &quot;Star Wars&quot;\n            }\n        }) {\n        name\n    }\n}</code></pre></div>\n<p>Fields can also form paths. In the query below there are two <em>fields</em> <code class=\"language-text\">genre</code> and <code class=\"language-text\">totalMovieCount</code> and one operation equals\n<code class=\"language-text\">eq</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n    movies(\n        where: { \n            genre: {\n                totalMovieCount: {\n                    eq: 100\n                }\n            }\n        }) {\n        name\n    }\n}</code></pre></div>\n<p>The two queries above show the difference between <em>fields</em> and <em>operations</em> well. A field is always context-specific.\nEven when two fields have the same name, like the description of a movie and the description of a genre, they have different meanings.\nOne field refers to the description of a movie and the other description refers to the description of a genre.\nSame name, different meanings. An operation on the other hand, has always the same meaning.\nThe equals operation (<code class=\"language-text\">eq</code>) do always mean that the value of the selected field, should\nbe equals to the value that was provided in the query.\nOperations can be applied in different contexts, but the operation itself, stays the same.\nThe name of the operation should be consistent. There should only be one operation that checks for equality.\nThis operation should always have the same name.</p>\n<p>With this in mind, we can have a deeper dive into filtering. Buckle up, this might get exciting.</p>\n<h1 id=\"how-everything-fits-together\" style=\"position:relative;\"><a href=\"#how-everything-fits-together\" aria-label=\"how everything fits together permalink\" class=\"anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"16\" height=\"16\"><path d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"/></svg></a>How everything fits together</h1>\n<p>At the core of the configuration API of filtering there sits a convention. The convention holds the whole\nconfiguration that filtering needs to create filter types and to translate them to the database.\nDuring schema creation, the schema builder asks the convention how the schema should look like.\nThe convention defines the names and descriptions of types and fields and also what the type should be used for properties\nThe convention also defines what provider should be used to translate a GraphQL query to a database query.\nThe provider is the only thing that is used after the schema is built.\nEvery field or operation in a filter type has a handler annotated.<br>\nDuring schema initialization, these handlers are bound, to the GraphQL fields. The provider can specify which handler should be bound to which field.\nDuring execution, the provider visits the incoming value node and executes the handler on the fields.\nThis loose coupling allows defining the provider independently of the convention. </p>\n<h1 id=\"filter-convention\" style=\"position:relative;\"><a href=\"#filter-convention\" aria-label=\"filter convention permalink\" class=\"anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"16\" height=\"16\"><path d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"/></svg></a>Filter Convention</h1>\n<p>A filter convention is a dotnet class that has to implement the interface <code class=\"language-text\">IFilterConvention</code>.\nInstead of writing a convention completely new, it is recommended to extend the base convention <code class=\"language-text\">FilterConvention</code>\nThis convention is also configurable with a fluent interface, so in most cases you can probably just use the descriptor API.</p>\n<h2 id=\"descriptor\" style=\"position:relative;\"><a href=\"#descriptor\" aria-label=\"descriptor permalink\" class=\"anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"16\" height=\"16\"><path d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"/></svg></a>Descriptor</h2>\n<p>Most of the capabilities of the descriptor are already documented under <code class=\"language-text\">Fetching Data -&gt; Filtering</code>.\nIf you have not done this already, it is now the right time to head over to <a href=\"https://chillicream.com/docs/hotchocolate/fetching-data/filtering\">Filtering</a> and read the parts about the <code class=\"language-text\">FilterConventions</code></p>\n<p>There are two things on this descriptor that are not documented in <code class=\"language-text\">Fetching Data</code>: </p>\n<h3 id=\"operation\" style=\"position:relative;\"><a href=\"#operation\" aria-label=\"operation permalink\" class=\"anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"16\" height=\"16\"><path d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"/></svg></a>Operation</h3>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"98070491363353970000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`    IFilterOperationConventionDescriptor Operation(int operationId);`, `98070491363353970000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">    <span class=\"token return-type class-name\">IFilterOperationConventionDescriptor</span> <span class=\"token function\">Operation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> operationId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Operations are configured globally. Each operation has a unique identifier. You can find the build-in identifiers in <code class=\"language-text\">DefaultFilterOperations</code>.\nThis identifier is used in the <code class=\"language-text\">FilterInputType&lt;T&gt;</code>'s to bind operations on a type. Filter operations can also be configured with a fluent interface.\nYou can specify the name and the description of the operation. This configuration is applied to all operation fields a <code class=\"language-text\">FilterInputType&lt;T&gt;</code> defines.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"81517139341415150000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`conventionDescriptor\n    .Operation(DefaultFilterOperations.Equals)\n    .Name(&quot;equals&quot;)\n    .Description(&quot;Compares the value of the input to the value of the field&quot;);`, `81517139341415150000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">conventionDescriptor\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Operation</span><span class=\"token punctuation\">(</span>DefaultFilterOperations<span class=\"token punctuation\">.</span>Equals<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"equals\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Description</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Compares the value of the input to the value of the field\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>With this configuration, all equals operations are now no longer names <code class=\"language-text\">eq</code> but <code class=\"language-text\">equals</code> and have a description.</p>\n<p>If you want to create your own operations, you have to choose an identifier.\nTo make sure to not collide with the framework, choose a number that is higher than 1024.\nIf you are a framework developer and want to create an extension for HotChocolate, talk to us.\nWe can assign you a range of operations so you do not collide with the operations defined by users.</p>\n<p>You will need this identifier later, so it probably makes sense to store it somewhere on a class</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"86252235967230210000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public static class CustomOperations \n{\n    public const int Like = 1025;\n}\n\npublic static class CustomerFilterConventionExtensions \n{\n    public static IFilterConventionDescriptor AddInvariantComparison(\n        this IFilterConventionDescriptor conventionDescriptor) => \n        conventionDescriptor\n            .Operation(CustomOperations.Like)\n            .Name(&quot;like&quot;);\n}`, `86252235967230210000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomOperations</span> \n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> Like <span class=\"token operator\">=</span> <span class=\"token number\">1025</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomerFilterConventionExtensions</span> \n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IFilterConventionDescriptor</span> <span class=\"token function\">AddInvariantComparison</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">this</span> <span class=\"token class-name\">IFilterConventionDescriptor</span> conventionDescriptor<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> \n        conventionDescriptor\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Operation</span><span class=\"token punctuation\">(</span>CustomOperations<span class=\"token punctuation\">.</span>Like<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"like\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To apply this configuration to operations types, you can use the Configure method</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"76344523535308160000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`    conventionDescriptor.Configure<StringOperationInputType>(\n        x => x.Operation(CustomOperations.Like))`, `76344523535308160000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">    conventionDescriptor<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Configure</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>StringOperationInputType<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>\n        x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">Operation</span><span class=\"token punctuation\">(</span>CustomOperations<span class=\"token punctuation\">.</span>Like<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"provider\" style=\"position:relative;\"><a href=\"#provider\" aria-label=\"provider permalink\" class=\"anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"16\" height=\"16\"><path d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"/></svg></a>Provider</h3>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"31361237911834650000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`    IFilterConventionDescriptor Provider<TProvider>()\n        where TProvider : class, IFilterProvider;\n    IFilterConventionDescriptor Provider<TProvider>(TProvider provider)\n        where TProvider : class, IFilterProvider;\n    IFilterConventionDescriptor Provider(Type provider);`, `31361237911834650000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">    <span class=\"token return-type class-name\">IFilterConventionDescriptor</span> <span class=\"token generic-method\"><span class=\"token function\">Provider</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TProvider<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">where</span> <span class=\"token class-name\">TProvider</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IFilterProvider</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token return-type class-name\">IFilterConventionDescriptor</span> <span class=\"token generic-method\"><span class=\"token function\">Provider</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TProvider<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TProvider</span> provider<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">where</span> <span class=\"token class-name\">TProvider</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IFilterProvider</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token return-type class-name\">IFilterConventionDescriptor</span> <span class=\"token function\">Provider</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Type</span> provider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>On the convention, you can also specify what provider should be used. For now you need just to know\nthat you can configure the provider here. We will have a closer look at the provider later.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"38855802279615690000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`conventionDescriptor.Provider<CustomProvider>();`, `38855802279615690000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">conventionDescriptor<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Provider</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>CustomProvider<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"custom-conventions\" style=\"position:relative;\"><a href=\"#custom-conventions\" aria-label=\"custom conventions permalink\" class=\"anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"16\" height=\"16\"><path d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"/></svg></a>Custom Conventions</h2>\n<p>Most of the time the descriptor API should satisfy your needs. It is recommended to build extensions\nbased on the descriptor API, rather than creating a custom convention.\nHowever, if you want to have full control over naming and type creation, you can also override the methods\nyou need on the <code class=\"language-text\">FilterConvention</code>. </p>\n<p>You can also override the configure method to have a (probably) familiar API experience.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"8990599410824052000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class CustomConvention : FilterConventio\n{\n    protected override void Configure(IFilterConventionDescriptor descriptor)\n    {\n        desciptor.AddDefaults();\n    }\n\n    public override NameString GetTypeName(Type runtimeType) =>\n        base.GetTypeName(runtimeType) + &quot;Suffix&quot;;\n}`, `8990599410824052000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomConvention</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">FilterConventio</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IFilterConventionDescriptor</span> descriptor<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        desciptor<span class=\"token punctuation\">.</span><span class=\"token function\">AddDefaults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">NameString</span> <span class=\"token function\">GetTypeName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Type</span> runtimeType<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetTypeName</span><span class=\"token punctuation\">(</span>runtimeType<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"Suffix\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"providers\" style=\"position:relative;\"><a href=\"#providers\" aria-label=\"providers permalink\" class=\"anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"16\" height=\"16\"><path d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"/></svg></a>Providers</h1>\n<p>Like the convention, a provider can be configured over a fluent interface.\nEvery filter field or operation has a specific handler defined. The handler translates the operation to the database.\nThese handlers are stored on the provider. After the schema is initialized, an interceptor visits the filter types and requests a handler from the provider.\nThe handler is annotated directly on the field.\nThe provider translates an incoming query into a database query by traversing an input object and executing the handlers on the fields. </p>\n<p>The output of a translation is always some kind of <em>filter definition</em>. In case, of <code class=\"language-text\">IQueryable</code> this is an expression.\nIn case, of MongoDB this is a <code class=\"language-text\">FilterDefinition</code>. Provider, visitor context and handler, operate on and produce this <em>filter definition</em>.</p>\n<p>To inspect and analyze the input object, the provider uses a visitor.\nWhat a visitor is and how you can write you own visitor, you can find here: <a href=\"\">Visitor Documentation</a>\nVisitors are a powerful yet complex concept, we tried our best to abstract it away.\nFor most cases, you will not need to create a custom visitor.</p>\n<h2 id=\"provider-descriptor\" style=\"position:relative;\"><a href=\"#provider-descriptor\" aria-label=\"provider descriptor permalink\" class=\"anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"16\" height=\"16\"><path d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"/></svg></a>Provider Descriptor</h2>\n<p>The descriptor of a provider is simple. It only has one method:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"47453117977107366000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`    IFilterProviderDescriptor<TContext> AddFieldHandler<TFieldHandler>()\n        where TFieldHandler : IFilterFieldHandler<TContext>;`, `47453117977107366000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">    <span class=\"token return-type class-name\">IFilterProviderDescriptor<span class=\"token punctuation\">&lt;</span>TContext<span class=\"token punctuation\">></span></span> <span class=\"token generic-method\"><span class=\"token function\">AddFieldHandler</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TFieldHandler<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">where</span> <span class=\"token class-name\">TFieldHandler</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IFilterFieldHandler<span class=\"token punctuation\">&lt;</span>TContext<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>With this method you can register field handlers on the provider.</p>\n<h2 id=\"field-handler\" style=\"position:relative;\"><a href=\"#field-handler\" aria-label=\"field handler permalink\" class=\"anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"16\" height=\"16\"><path d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"/></svg></a>Field Handler</h2>\n<p>Every field or operation is annotated with an instance of a <code class=\"language-text\">FilterFieldHandler&lt;TContext, T&gt;</code>. When the provider is asked for a handler for a field, it iterates sequentially through the list of existing field handlers and calls the <code class=\"language-text\">CanHandle</code> method.\nThe first field handler that can handle the field, is annotated on the field.\nAs the visitor traverses the input object, it calls <code class=\"language-text\">TryHandleEnter</code> as it enters the input field and <code class=\"language-text\">TryHandleLeave</code> as it leaves it.</p>\n<blockquote>\n<p>A field handler supports constructor injection and is a singleton. Do not store data on the field handler. use the <code class=\"language-text\">context</code> of the visitor for state management.</p>\n</blockquote>\n<h3 id=\"canhandle\" style=\"position:relative;\"><a href=\"#canhandle\" aria-label=\"canhandle permalink\" class=\"anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"16\" height=\"16\"><path d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"/></svg></a>CanHandle</h3>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"13404694766749903000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`    bool CanHandle(\n        ITypeCompletionContext context,\n        IFilterInputTypeDefinition typeDefinition,\n        IFilterFieldDefinition fieldDefinition);`, `13404694766749903000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">    <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">CanHandle</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">ITypeCompletionContext</span> context<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">IFilterInputTypeDefinition</span> typeDefinition<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">IFilterFieldDefinition</span> fieldDefinition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Tests if this field handler can handle a field. If it can handle the field it will be attached to it.</p>\n<h3 id=\"tryhandleenter\" style=\"position:relative;\"><a href=\"#tryhandleenter\" aria-label=\"tryhandleenter permalink\" class=\"anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"16\" height=\"16\"><path d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"/></svg></a>TryHandleEnter</h3>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"46217074127884850000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`bool TryHandleEnter(\n    TContext context,\n    IFilterField field,\n    ObjectFieldNode node,\n    [NotNullWhen(true)] out ISyntaxVisitorAction? action);`, `46217074127884850000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">TryHandleEnter</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">TContext</span> context<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">IFilterField</span> field<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">ObjectFieldNode</span> node<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">NotNullWhen</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\">ISyntaxVisitorAction<span class=\"token punctuation\">?</span></span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This method is called when the visitor encounters a field. </p>\n<ul>\n<li><code class=\"language-text\">context</code> is the context of the visitor</li>\n<li><code class=\"language-text\">field</code> is the instance of the field that is currently visited</li>\n<li><code class=\"language-text\">node</code> is the field node of the input object. <code class=\"language-text\">node.Value</code> contains the value of the field.</li>\n<li><code class=\"language-text\">action</code> If <code class=\"language-text\">TryHandleEnter</code> returns true, the action is used for further processing by the visitor.</li>\n</ul>\n<h3 id=\"tryhandleleave\" style=\"position:relative;\"><a href=\"#tryhandleleave\" aria-label=\"tryhandleleave permalink\" class=\"anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"16\" height=\"16\"><path d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"/></svg></a>TryHandleLeave</h3>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"68548106936885600000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`bool TryHandleLeave(\n    TContext context,\n    IFilterField field,\n    ObjectFieldNode node,\n    [NotNullWhen(true)] out ISyntaxVisitorAction? action);`, `68548106936885600000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">TryHandleLeave</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">TContext</span> context<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">IFilterField</span> field<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">ObjectFieldNode</span> node<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">NotNullWhen</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\">ISyntaxVisitorAction<span class=\"token punctuation\">?</span></span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This method is called when the visitor leave the field it previously entered.</p>\n<ul>\n<li><code class=\"language-text\">context</code> is the context of the visitor</li>\n<li><code class=\"language-text\">field</code> is the instance of the field that is currently visited</li>\n<li><code class=\"language-text\">node</code> is the field node of the input object. <code class=\"language-text\">node.Value</code> contains the value of the field.</li>\n<li><code class=\"language-text\">action</code> If <code class=\"language-text\">TryHandleLeave</code> returns true, the action is used for further processing by the visitor.</li>\n</ul>\n<h2 id=\"filter-operation-handlers\" style=\"position:relative;\"><a href=\"#filter-operation-handlers\" aria-label=\"filter operation handlers permalink\" class=\"anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"16\" height=\"16\"><path d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"/></svg></a>Filter Operation Handlers</h2>\n<p>There is only one kind of field handler. To make it easier to handle operations, there also exists <code class=\"language-text\">FilterOperationHandler&lt;TContext, T&gt;</code>, a more specific abstraction.\nYou can override <code class=\"language-text\">TryHandleOperation</code> to handle operations.</p>\n<h2 id=\"the-context\" style=\"position:relative;\"><a href=\"#the-context\" aria-label=\"the context permalink\" class=\"anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"16\" height=\"16\"><path d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"/></svg></a>The Context</h2>\n<p>As the visitor and the field handlers are singletons, a context object is passed along with the traversation of input objects.\nField handlers can push data on this context, to make it available for other handlers further down in the tree.</p>\n<p>The context contains <code class=\"language-text\">Types</code>, <code class=\"language-text\">Operations</code>, <code class=\"language-text\">Errors</code> and <code class=\"language-text\">Scopes</code>. It is very provider-specific what data you need to store in the context.\nIn the case of the <code class=\"language-text\">IQueryable</code> provider, it also contains <code class=\"language-text\">RuntimeTypes</code> and knows if the source is <code class=\"language-text\">InMemory</code> or a database call.</p>\n<p>With <code class=\"language-text\">Scopes</code> it is possible to add multiple logical layers to a context. In the case of <code class=\"language-text\">IQuerable</code> this is needed, whenever a new closure starts</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"82618570824701720000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`//          /------------------------ SCOPE 1 -----------------------------\\\n//                                        /----------- SCOPE 2 -------------\\\nusers.Where(x => x.Company.Addresses.Any(y => y.Street == &quot;221B Baker Street&quot;))`, `82618570824701720000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//          /------------------------ SCOPE 1 -----------------------------\\</span>\n<span class=\"token comment\">//                                        /----------- SCOPE 2 -------------\\</span>\nusers<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Company<span class=\"token punctuation\">.</span>Addresses<span class=\"token punctuation\">.</span><span class=\"token function\">Any</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">=></span> y<span class=\"token punctuation\">.</span>Street <span class=\"token operator\">==</span> <span class=\"token string\">\"221B Baker Street\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>A filter statement that produces the expression above would look like this</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"37592352776846070000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`{\n    users(\n        where: {\n            company: {\n                addresses: {\n                   any: {\n                       street: {\n                           eq: &quot;221B Baker Street&quot; \n                       }\n                   }\n               }\n            }\n    }){\n        name\n    }\n}`, `37592352776846070000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n    users<span class=\"token punctuation\">(</span>\n        <span class=\"token attr-name\">where</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token attr-name\">company</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token attr-name\">addresses</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                   <span class=\"token attr-name\">any</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                       <span class=\"token attr-name\">street</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                           <span class=\"token attr-name\">eq</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"221B Baker Street\"</span> \n                       <span class=\"token punctuation\">}</span>\n                   <span class=\"token punctuation\">}</span>\n               <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        name\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A little simplified this is what happens during visitation:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"21438378345542386000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`{\n    users(\n        where: \n        # Create SCOPE 1 with parameter x of type User \n        # instance[0] = x\n        # level[0] = []\n        {\n            # Push property User.Company onto the scope \n            # instance[1] =  x.Company\n            # level[1] = []\n            company: {\n                # Push property Company.Addresses onto the scope \n                # instance[2] x.Company.Addresses\n                # level[2] = []\n                addresses: {\n                    # Create SCOPE 2 with parameter y of type Address \n                    # instance[0] = y\n                    # level[0] = []\n                    any: {\n                        # Push poperty Address.Street onto the scope \n                        # instance[1] = y.Street\n                        # level[1] = []\n                        street: {\n                            # Create and push the operation onto the scope  \n                            # instance[2] = y.Street\n                            # level[2] = [y.Street == &quot;221B Baker Street&quot;]\n                            eq: &quot;221B Baker Street&quot; \n                        }\n                        # Combine everything of the current level and pop the porperty street from the instance\n                        # instance[1] = y.Street\n                        # level[1] = [y.Street == &quot;221B Baker Street&quot;]\n                    }\n                    # Combine everything of the current level, create the any operation and exit SCOPE 2\n                    # instance[2] = x.Company.Addresses\n                    # level[2] = [x.Company.Addresses.Any(y => y.Street == &quot;221B Baker Street&quot;)]\n                }\n                # Combine everything of the current level and pop the porperty street from the instance\n                # instance[1] = x.Company\n                # level[1] = [x.Company.Addresses.Any(y => y.Street == &quot;221B Baker Street&quot;)]\n            }\n            # Combine everything of the current level and pop the porperty street from the instance\n            # instance[0] = x\n            # level[0] = [x.Company.Addresses.Any(y => y.Street == &quot;221B Baker Street&quot;)]\n    }\n){\n        name\n    }\n}`, `21438378345542386000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n    users<span class=\"token punctuation\">(</span>\n        <span class=\"token attr-name\">where</span><span class=\"token punctuation\">:</span> \n        <span class=\"token comment\"># Create SCOPE 1 with parameter x of type User </span>\n        <span class=\"token comment\"># instance[0] = x</span>\n        <span class=\"token comment\"># level[0] = []</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\"># Push property User.Company onto the scope </span>\n            <span class=\"token comment\"># instance[1] =  x.Company</span>\n            <span class=\"token comment\"># level[1] = []</span>\n            <span class=\"token attr-name\">company</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\"># Push property Company.Addresses onto the scope </span>\n                <span class=\"token comment\"># instance[2] x.Company.Addresses</span>\n                <span class=\"token comment\"># level[2] = []</span>\n                <span class=\"token attr-name\">addresses</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\"># Create SCOPE 2 with parameter y of type Address </span>\n                    <span class=\"token comment\"># instance[0] = y</span>\n                    <span class=\"token comment\"># level[0] = []</span>\n                    <span class=\"token attr-name\">any</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token comment\"># Push poperty Address.Street onto the scope </span>\n                        <span class=\"token comment\"># instance[1] = y.Street</span>\n                        <span class=\"token comment\"># level[1] = []</span>\n                        <span class=\"token attr-name\">street</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token comment\"># Create and push the operation onto the scope  </span>\n                            <span class=\"token comment\"># instance[2] = y.Street</span>\n                            <span class=\"token comment\"># level[2] = [y.Street == \"221B Baker Street\"]</span>\n                            <span class=\"token attr-name\">eq</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"221B Baker Street\"</span> \n                        <span class=\"token punctuation\">}</span>\n                        <span class=\"token comment\"># Combine everything of the current level and pop the porperty street from the instance</span>\n                        <span class=\"token comment\"># instance[1] = y.Street</span>\n                        <span class=\"token comment\"># level[1] = [y.Street == \"221B Baker Street\"]</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token comment\"># Combine everything of the current level, create the any operation and exit SCOPE 2</span>\n                    <span class=\"token comment\"># instance[2] = x.Company.Addresses</span>\n                    <span class=\"token comment\"># level[2] = [x.Company.Addresses.Any(y => y.Street == \"221B Baker Street\")]</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token comment\"># Combine everything of the current level and pop the porperty street from the instance</span>\n                <span class=\"token comment\"># instance[1] = x.Company</span>\n                <span class=\"token comment\"># level[1] = [x.Company.Addresses.Any(y => y.Street == \"221B Baker Street\")]</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\"># Combine everything of the current level and pop the porperty street from the instance</span>\n            <span class=\"token comment\"># instance[0] = x</span>\n            <span class=\"token comment\"># level[0] = [x.Company.Addresses.Any(y => y.Street == \"221B Baker Street\")]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        name\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"extending-iqueryable\" style=\"position:relative;\"><a href=\"#extending-iqueryable\" aria-label=\"extending iqueryable permalink\" class=\"anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"16\" height=\"16\"><path d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"/></svg></a>Extending IQueryable</h1>\n<p>The default filtering implementation uses <code class=\"language-text\">IQueryable</code> under the hood. You can customize the translation of queries by registering handlers on the <code class=\"language-text\">QueryableFilterProvider</code>. </p>\n<p>The following example creates a <code class=\"language-text\">StringOperationHandler</code> that supports case insensitive filtering:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"44140686461011630000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`// The QueryableStringOperationHandler already has an implemenation of CanHandle\n// It checks if the field is declared in a string operation type and also checks if \n// the operation of this field uses the \\`Operation\\` specified in the override property further \n// below\npublic class QueryableStringInvariantEqualsHandler : QueryableStringOperationHandler\n{\n    // For creating a expression tree we need the \\`MethodInfo\\` of the \\`ToLower\\` method of string\n    private static readonly MethodInfo _toLower = typeof(string)\n        .GetMethods()\n        .Single(\n            x => x.Name == nameof(string.ToLower) &&\n            x.GetParameters().Length == 0);\n\n    // This is used to match the handler to all \\`eq\\` fields\n    protected override int Operation => DefaultFilterOperations.Equals;\n\n    public override Expression HandleOperation(\n        QueryableFilterContext context,\n        IFilterOperationField field,\n        IValueNode value,\n        object parsedValue)\n    {\n        // We get the instance of the context. This is the expression path to the propert\n        // e.g. ~> y.Street\n        Expression property = context.GetInstance();\n        \n        // the parsed value is what was specified in the query\n        // e.g. ~> eq: &quot;221B Baker Street&quot; \n        if (parsedValue is string str)\n        {\n            // Creates and returnes the operation \n            // e.g. ~> y.Street.ToLower() == &quot;221b baker street&quot;\n            return Expression.Equal(\n                Expression.Call(property, _toLower),\n                Expression.Constant(str.ToLower()));\n        }\n\n        // Something went wrong 😱\n        throw new InvalidOperationException();\n    }\n}`, `44140686461011630000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// The QueryableStringOperationHandler already has an implemenation of CanHandle</span>\n<span class=\"token comment\">// It checks if the field is declared in a string operation type and also checks if </span>\n<span class=\"token comment\">// the operation of this field uses the `Operation` specified in the override property further </span>\n<span class=\"token comment\">// below</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">QueryableStringInvariantEqualsHandler</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">QueryableStringOperationHandler</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// For creating a expression tree we need the `MethodInfo` of the `ToLower` method of string</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">MethodInfo</span> _toLower <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\"><span class=\"token keyword\">string</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">GetMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Single</span><span class=\"token punctuation\">(</span>\n            x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">==</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span>ToLower<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n            x<span class=\"token punctuation\">.</span><span class=\"token function\">GetParameters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// This is used to match the handler to all `eq` fields</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Operation <span class=\"token operator\">=></span> DefaultFilterOperations<span class=\"token punctuation\">.</span>Equals<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">Expression</span> <span class=\"token function\">HandleOperation</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">QueryableFilterContext</span> context<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">IFilterOperationField</span> field<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">IValueNode</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">object</span></span> parsedValue<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// We get the instance of the context. This is the expression path to the propert</span>\n        <span class=\"token comment\">// e.g. ~> y.Street</span>\n        <span class=\"token class-name\">Expression</span> property <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">// the parsed value is what was specified in the query</span>\n        <span class=\"token comment\">// e.g. ~> eq: \"221B Baker Street\" </span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parsedValue <span class=\"token keyword\">is</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> str<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Creates and returnes the operation </span>\n            <span class=\"token comment\">// e.g. ~> y.Street.ToLower() == \"221b baker street\"</span>\n            <span class=\"token keyword\">return</span> Expression<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>\n                Expression<span class=\"token punctuation\">.</span><span class=\"token function\">Call</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">,</span> _toLower<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                Expression<span class=\"token punctuation\">.</span><span class=\"token function\">Constant</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Something went wrong 😱</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">InvalidOperationException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This operation handler can be registered on the convention </p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"99691447281699540000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class CustomFilteringConvention : FilterConvention\n{\n    protected override void Configure(IFilterConventionDescriptor descriptor)\n    {\n        descriptor.AddDefaults();\n        descriptor.AddProvider(\n            new QueryableFilterProvider(\n                x => x\n                    .AddDefaultHandlers()\n                    .AddFieldHandler<QueryableStringInvariantEqualsHandler>()));\n    }\n}\n\n// and then \nservices.AddGraphQLServer()\n    .AddFiltering<CustomFilteringConvention>();`, `99691447281699540000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomFilteringConvention</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">FilterConvention</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IFilterConventionDescriptor</span> descriptor<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">AddDefaults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">AddProvider</span><span class=\"token punctuation\">(</span>\n            <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">QueryableFilterProvider</span><span class=\"token punctuation\">(</span>\n                x <span class=\"token operator\">=></span> x\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">AddDefaultHandlers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddFieldHandler</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>QueryableStringInvariantEqualsHandler<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// and then </span>\nservices<span class=\"token punctuation\">.</span><span class=\"token function\">AddGraphQLServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddFiltering</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>CustomFilteringConvention<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>To make this registration easier, HotChocolate also supports convention and provider extensions.\nInstead of creating a customer <code class=\"language-text\">FilterConvention</code>, you can also do the follwing:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"58131767571598060000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`services.AddGraphQLServer()\n    .AddFiltering<CustomFilteringConvention>();\n    .AddConvention<IFilterConvention>(\n        new FilterConventionConvention(\n            x => x.AddProviderExtension(\n                new QueryableFilterProviderExtension(\n                    y => y.AddFieldHandler<QueryableStringInvariantEqualsHandler>()))));`, `58131767571598060000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddGraphQLServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddFiltering</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>CustomFilteringConvention<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddConvention</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IFilterConvention<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FilterConventionConvention</span><span class=\"token punctuation\">(</span>\n            x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">AddProviderExtension</span><span class=\"token punctuation\">(</span>\n                <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">QueryableFilterProviderExtension</span><span class=\"token punctuation\">(</span>\n                    y <span class=\"token operator\">=></span> y<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddFieldHandler</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>QueryableStringInvariantEqualsHandler<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","tableOfContents":"<ul>\n<li><a href=\"/hotchocolate/api-reference/extending-filtering/#how-everything-fits-together\">How everything fits together</a></li>\n<li>\n<p><a href=\"/hotchocolate/api-reference/extending-filtering/#filter-convention\">Filter Convention</a></p>\n<ul>\n<li><a href=\"/hotchocolate/api-reference/extending-filtering/#descriptor\">Descriptor</a></li>\n<li><a href=\"/hotchocolate/api-reference/extending-filtering/#custom-conventions\">Custom Conventions</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/hotchocolate/api-reference/extending-filtering/#providers\">Providers</a></p>\n<ul>\n<li><a href=\"/hotchocolate/api-reference/extending-filtering/#provider-descriptor\">Provider Descriptor</a></li>\n<li><a href=\"/hotchocolate/api-reference/extending-filtering/#field-handler\">Field Handler</a></li>\n<li><a href=\"/hotchocolate/api-reference/extending-filtering/#filter-operation-handlers\">Filter Operation Handlers</a></li>\n<li><a href=\"/hotchocolate/api-reference/extending-filtering/#the-context\">The Context</a></li>\n</ul>\n</li>\n<li><a href=\"/hotchocolate/api-reference/extending-filtering/#extending-iqueryable\">Extending IQueryable</a></li>\n</ul>"}},"site":{"siteMetadata":{"siteUrl":"https://chillicream.com","repositoryUrl":"https://github.com/ChilliCream/hotchocolate","tools":{"slack":"https://join.slack.com/t/hotchocolategraphql/shared_invite/enQtNTA4NjA0ODYwOTQ0LTViMzA2MTM4OWYwYjIxYzViYmM0YmZhYjdiNzBjOTg2ZmU1YmMwNDZiYjUyZWZlMzNiMTk1OWUxNWZhMzQwY2Q"}}},"config":{"products":[{"path":"hotchocolate","title":"Hot Chocolate","description":"Build your own thin GraphQL API layer on top of any resource.","versions":[{"path":"","title":"v11 (latest)","items":[{"path":"index","title":"Introduction","items":null},{"path":"get-started","title":"Get Started","items":null},{"path":"defining-a-schema","title":"Defining a schema","items":[{"path":"index","title":"Schema basics"},{"path":"versioning","title":"Versioning"},{"path":"unions-and-interfaces","title":"Unions and Interfaces"},{"path":"scalars","title":"Scalars"},{"path":"directives","title":"Directives"}]},{"path":"fetching-data","title":"Fetching data","items":[{"path":"index","title":"Resolver"},{"path":"fetching-from-databases","title":"Fetching from Databases"},{"path":"fetching-from-rest","title":"Fetching from REST"},{"path":"dataloader","title":"DataLoader"},{"path":"pagination","title":"Pagination"},{"path":"filtering","title":"Filtering"},{"path":"sorting","title":"Sorting"},{"path":"projections","title":"Projections"}]},{"path":"integrations","title":"Integrations","items":[{"path":"index","title":"Overview"},{"path":"entity-framework","title":"Entity Framework"},{"path":"spatial-data","title":"Spatial Data"}]},{"path":"api-reference","title":"API Reference","items":[{"path":"index","title":"Overview"},{"path":"object-type","title":"Object Type"},{"path":"language","title":"Language"},{"path":"extending-filtering","title":"Extending Filtering"},{"path":"visitors","title":"Visitors"},{"path":"aspnetcore","title":"ASP.NET Core"},{"path":"executable","title":"Executable"},{"path":"migrate-from-10-to-11","title":"Migrate from 10.5 to 11.0"}]}]},{"path":"v10","title":"v10 (previous)","items":[{"path":"index","title":"Introduction","items":null},{"path":"code-first","title":"Code-First","items":null},{"path":"schema-first","title":"Schema-First","items":null},{"path":"schema","title":"Schema","items":[{"path":"index","title":"Schema"},{"path":"object-type","title":"Object Type"},{"path":"interface-type","title":"Interface Type"},{"path":"union-type","title":"Union Type"},{"path":"input-object-type","title":"Input Object Type"},{"path":"enum-type","title":"Enum Type"},{"path":"descriptions","title":"Schema Descriptions"},{"path":"custom-scalar-types","title":"Scalar Type Support"},{"path":"descriptor-attributes","title":"Descriptor Attributes"},{"path":"extending-types","title":"Custom Base Classes"},{"path":"directives","title":"Directives"},{"path":"resolvers","title":"Resolvers"},{"path":"relay","title":"Relay"},{"path":"conventions","title":"Conventions"},{"path":"options","title":"Schema Options"}]},{"path":"data-fetching","title":"Data Fetching","items":[{"path":"index","title":"Data Loaders"},{"path":"pagination","title":"Pagination"},{"path":"filters","title":"Filters"}]},{"path":"security","title":"Security","items":[{"path":"index","title":"Authorization"},{"path":"security","title":"Security"}]},{"path":"execution-engine","title":"Execution Engine","items":[{"path":"index","title":"Middleware"},{"path":"validation-rules","title":"Validation Rules"},{"path":"instrumentation","title":"Instrumentation"},{"path":"apollo-tracing","title":"Apollo Tracing"},{"path":"batching","title":"Batching"},{"path":"persisted-queries","title":"Persisted Queries"},{"path":"custom-context-data","title":"Custom Context Data"},{"path":"subscriptions","title":"Subscriptions"},{"path":"type-conversion","title":"Type Conversion"},{"path":"error-filter","title":"Error Filter"},{"path":"execution-options","title":"Execution Options"}]},{"path":"server","title":"Server","items":[{"path":"index","title":"ASP.Net"},{"path":"dependency-injection","title":"Dependency Injection"}]},{"path":"stitching","title":"Schema Stitching","items":null},{"path":"tooling","title":"Tooling","items":null},{"path":"advanced","title":"Advanced","items":[{"path":"index","title":"Parser"},{"path":"dotnet-cli","title":".Net CLI"}]},{"path":"tutorials","title":"Tutorials","items":[{"path":"index","title":"Entity Framework"}]},{"path":"examples","title":"Examples","items":[{"path":"index","title":"Star Wars"},{"path":"slack-clone","title":"Slack Clone"},{"path":"other-examples","title":"Other Examples"}]}]}]},{"path":"bananacakepop","title":"Banana Cake Pop","description":"Use this GUI to get deep insights from any GraphQL API.","versions":[{"path":"","title":"v1 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"greendonut","title":"Green Donut","description":"Configure data loaders and caching for GraphQL endpoints.","versions":[{"path":"","title":"v11 (latest)","items":[{"path":"index","title":"Introduction","items":null}]},{"path":"v10","title":"v10 (previous)","items":[{"path":"index","title":"Introduction","items":null},{"path":"installation","title":"Installation","items":null},{"path":"usage","title":"Usage","items":null},{"path":"api","title":"API","items":null},{"path":"advanced-concepts","title":"Advanced Concepts","items":[{"path":"index","title":"Custom DataLoader"},{"path":"diagnostics","title":"Diagnostic Events"}]}]}]}]}},"pageContext":{"originPath":"hotchocolate/api-reference/extending-filtering.md"}},"staticQueryHashes":["1014893094","2890364758","4218812017"]}