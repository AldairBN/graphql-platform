{"componentChunkName":"component---src-templates-doc-page-template-tsx","path":"/docs/hotchocolate/defining-a-schema/scalars","result":{"data":{"file":{"childMdx":{"fields":{"slug":"/docs/hotchocolate/defining-a-schema/scalars","lastUpdated":"2021-06-14","lastAuthorName":"Tobias Tengler"},"frontmatter":{"title":"Scalars"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Scalars\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A GraphQL schema should be built as expressive as possible.\\nJust from looking at the schema, a developer should know how to use the API.\\nIn GraphQL we are not limited to only describing the structure of a type, we can even describe value types.\\nScalar types represent types that can hold data of a specific kind.\\nScalars are leaf types, meaning we cannot use e.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{ fieldname }\"), \" to further drill down into the type.\"), mdx(\"p\", null, \"A scalar must only know how to serialize and deserialize the value of the field.\\nGraphQL gives us the freedom to define custom scalar types.\\nThis makes them the perfect tool for expressive value types.\\nWe could, for example, create a scalar for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CreditCardNumber\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NonEmptyString\"), \".\"), mdx(\"p\", null, \"The GraphQL specification defines the following scalars\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Int\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Signed 32-bit numeric non-fractional value\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Float\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Double-precision fractional values as specified by IEEE 754\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"String\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"UTF-8 character sequences\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Boolean\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Boolean type representing true or false\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ID\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Unique identifier\")))), mdx(\"h1\", {\n    \"id\": \"net-scalars\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#net-scalars\",\n    \"aria-label\": \"net scalars permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 512 512\",\n    \"width\": \"16\",\n    \"height\": \"16\",\n    \"fill\": \"var(--heading-text-color)\"\n  }, \"\\n                        \", mdx(\"path\", {\n    parentName: \"svg\",\n    \"d\": \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  }), \"\\n                      \")), \".NET Scalars\"), mdx(\"p\", null, \"In addition to the scalars defined by the specification, Hot Chocolate also supports the following set of scalar types:\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Byte\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Byte\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ByteArray\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Base64 encoded array of bytes\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Short\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Signed 16-bit numeric non-fractional value\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Long\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Signed 64-bit numeric non-fractional value\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Decimal\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \".NET Floating Point Type\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Url\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Url\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"DateTime\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ISO-8601 date time\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Date\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ISO-8601 date\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"TimeSpan\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ISO-8601 duration\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Uuid\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"GUID\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Any\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"This type can be anything, string, int, list or object, etc.\")))), mdx(\"h2\", {\n    \"id\": \"uuid-type\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#uuid-type\",\n    \"aria-label\": \"uuid type permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 512 512\",\n    \"width\": \"16\",\n    \"height\": \"16\",\n    \"fill\": \"var(--heading-text-color)\"\n  }, \"\\n                        \", mdx(\"path\", {\n    parentName: \"svg\",\n    \"d\": \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  }), \"\\n                      \")), \"Uuid Type\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Uuid\"), \" scalar supports the following serialization formats.\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Specifier\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Format\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"N (default)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"00000000000000000000000000000000\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"D\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"00000000-0000-0000-0000-000000000000\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"B\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"{00000000-0000-0000-0000-000000000000}\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"P\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(00000000-0000-0000-0000-000000000000)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"X\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"{0x00000000,0x0000,0x0000,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}}\")))), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UuidType\"), \" will always return the value in the specified format. In case it is used as an input type, it will first try to parse the result in the specified format. If the parsing does not succeed, it will try to parse the value in other formats.\"), mdx(\"p\", null, \"To change the default format we have to register the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UuidType\"), \" with the specfier on the schema:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"services\\n   .AddGraphQLServer()\\n   .AddType(new UuidType('D'));\\n\")), mdx(\"h2\", {\n    \"id\": \"any-type\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#any-type\",\n    \"aria-label\": \"any type permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 512 512\",\n    \"width\": \"16\",\n    \"height\": \"16\",\n    \"fill\": \"var(--heading-text-color)\"\n  }, \"\\n                        \", mdx(\"path\", {\n    parentName: \"svg\",\n    \"d\": \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  }), \"\\n                      \")), \"Any Type\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Any\"), \" scalar is a special type that can be compared to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"object\"), \" in C#.\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Any\"), \" allows us to specify any literal or return any output type.\"), mdx(\"p\", null, \"Consider the following type:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sdl\"\n  }, \"type Query {\\n  foo(bar: Any): String\\n}\\n\")), mdx(\"p\", null, \"Since our field \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"foo\"), \" specifies an argument \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bar\"), \" of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Any\"), \" all of the following queries would be valid:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-graphql\"\n  }, \"{\\n  a: foo(bar: 1)\\n  b: foo(bar: [1, 2, 3, 4, 5])\\n  a: foo(bar: \\\"abcdef\\\")\\n  a: foo(bar: true)\\n  a: foo(bar: { a: \\\"foo\\\", b: { c: 1 } })\\n  a: foo(bar: [{ a: \\\"foo\\\", b: { c: 1 } }, { a: \\\"foo\\\", b: { c: 1 } }])\\n}\\n\")), mdx(\"p\", null, \"The same goes for the output side. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Any\"), \" can return a structure of data although it is a scalar type.\"), mdx(\"p\", null, \"If we want to access the data we can either fetch data as an object or you can ask the context to provide it as a specific object.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"object foo = context.ArgumentValue<object>(\\\"bar\\\");\\nFoo foo = context.ArgumentValue<Foo>(\\\"bar\\\");\\n\")), mdx(\"p\", null, \"We can also ask the context which kind the current argument is:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"ValueKind kind = context.ArgumentKind(\\\"bar\\\");\\n\")), mdx(\"p\", null, \"The value kind will tell us by which kind of literal the argument is represented.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"An integer literal can still contain a long value and a float literal could be a decimal but it also could just be a float.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public enum ValueKind\\n{\\n    String,\\n    Integer,\\n    Float,\\n    Boolean,\\n    Enum,\\n    Object,\\n    Null\\n}\\n\")), mdx(\"p\", null, \"If we want to access an object dynamically without serializing it to a strongly typed model we can get it as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IReadOnlyDictionary<string, object>\"), \" or as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ObjectValueNode\"), \".\"), mdx(\"p\", null, \"Lists can be accessed generically by getting them as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IReadOnlyList<object>\"), \" or as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ListValueNode\"), \".\"), mdx(\"h1\", {\n    \"id\": \"additional-scalars\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#additional-scalars\",\n    \"aria-label\": \"additional scalars permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 512 512\",\n    \"width\": \"16\",\n    \"height\": \"16\",\n    \"fill\": \"var(--heading-text-color)\"\n  }, \"\\n                        \", mdx(\"path\", {\n    parentName: \"svg\",\n    \"d\": \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  }), \"\\n                      \")), \"Additional Scalars\"), mdx(\"p\", null, \"We also offer a separate package with scalars for more specific usecases.\"), mdx(\"p\", null, \"To use these scalars we have to add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HotChocolate.Types.Scalars\"), \" package.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"dotnet add package HotChocolate.Types.Scalars\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Available Scalars:\")), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"EmailAddress\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Email address, represented as UTF-8 character sequences, as defined in \", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"https://tools.ietf.org/html/rfc5322\"\n  }, \"RFC5322\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"HexColor\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"HEX color code\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Hsl\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"CSS HSL color as defined \", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#hsl_colors\"\n  }, \"here\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Hsla\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"CSS HSLA color as defined \", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#hsl_colors\"\n  }, \"here\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"IPv4\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"IPv4 address as defined \", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"https://en.wikipedia.org/wiki/IPv4\"\n  }, \"here\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"IPv6\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"IPv6 address as defined in \", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"https://tools.ietf.org/html/rfc8064\"\n  }, \"RFC8064\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Isbn\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ISBN-10 or ISBN-13 number as defined \", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"https://en.wikipedia.org/wiki/International_Standard_Book_Number\"\n  }, \"here\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Latitude\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Decimal degrees latitude number\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Longitude\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Decimal degrees longitude number\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"LocalCurrency\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Currency string\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"LocalDate\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ISO date string, represented as UTF-8 character sequences yyyy-mm-dd, as defined in \", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"https://tools.ietf.org/html/rfc3339\"\n  }, \"RFC3339\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"LocalTime\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Local time string (i.e., with no associated timezone) in 24-hr \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"HH:mm:ss\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"MacAddress\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"IEEE 802 48-bit (MAC-48/EUI-48) and 64-bit (EUI-64) Mac addresses, represented as UTF-8 character sequences, as defined in \", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"https://tools.ietf.org/html/rfc7042#page-19\"\n  }, \"RFC7042\"), \" and \", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"https://tools.ietf.org/html/rfc7043\"\n  }, \"RFC7043\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"NegativeFloat\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Double\\u2010precision fractional value less than 0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"NegativeInt\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Signed 32-bit numeric non-fractional with a maximum of -1\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"NonEmptyString\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Non empty textual data, represented as UTF\\u20108 character sequences with at least one character\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"NonNegativeFloat\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Double\\u2010precision fractional value greater than or equal to 0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"NonNegativeInt\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Unsigned 32-bit numeric non-fractional value greater than or equal to 0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"NonPositiveFloat\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Double\\u2010precision fractional value less than or equal to 0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"NonPositiveInt\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Signed 32-bit numeric non-fractional value less than or equal to 0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"PhoneNumber\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"A value that conforms to the standard E.164 format as defined \", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"https://en.wikipedia.org/wiki/E.164\"\n  }, \"here\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"PositiveInt\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Signed 32\\u2010bit numeric non\\u2010fractional value of at least the value 1\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"PostalCode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Postal code\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Port\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"TCP port within the range of 0 to 65535\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Rgb\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"CSS RGB color as defined \", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb_colors\"\n  }, \"here\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Rgba\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"CSS RGBA color as defined \", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb_colors\"\n  }, \"here\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"UnsignedInt\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Unsigned 32\\u2010bit numeric non\\u2010fractional value greater than or equal to 0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"UnsignedLong\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Unsigned 64\\u2010bit numeric non\\u2010fractional value greater than or equal to 0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"UtcOffset\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"A value of format \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"\\xB1hh:mm\"))))), mdx(\"p\", null, \"Most of these scalars are built on top of native .NET types. An Email Address for example is represented as a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"string\"), \", but just returning a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"string\"), \" from our resolver would result in Hot Chocolate interpreting it as a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"StringType\"), \". We need to explicitly specify that the returned type (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"string\"), \") should be treated as an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"EmailAddressType\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"[GraphQLType(typeof(EmailAddressType))]\\npublic string GetEmail() => \\\"test@example.com\\\";\\n\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/hotchocolate/defining-a-schema/object-types#explicit-types\"\n  }, \"Learn more about explicitly specifying GraphQL types\")), mdx(\"h2\", {\n    \"id\": \"nodatime\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#nodatime\",\n    \"aria-label\": \"nodatime permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 512 512\",\n    \"width\": \"16\",\n    \"height\": \"16\",\n    \"fill\": \"var(--heading-text-color)\"\n  }, \"\\n                        \", mdx(\"path\", {\n    parentName: \"svg\",\n    \"d\": \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  }), \"\\n                      \")), \"NodaTime\"), mdx(\"p\", null, \"We also offer a package specifically for \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/nodatime/nodatime\"\n  }, \"NodaTime\"), \".\"), mdx(\"p\", null, \"It can be installed like the following.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"dotnet add package HotChocolate.Types.NodaTime\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Available Scalars:\")), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Example\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"DateTimeZone\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"A \", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"https://nodatime.org/TimeZones\"\n  }, \"NodaTime DateTimeZone\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"\\\"Europe/Rome\\\"\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Duration\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"A \", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"https://nodatime.org/3.0.x/userguide/duration-patterns\"\n  }, \"NodaTime Duration\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"\\\"-123:07:53:10.019\\\"\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Instant\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"A \", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"https://nodatime.org/3.0.x/userguide/instant-patterns\"\n  }, \"NodaTime Instant\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"\\\"2020-02-20T17:42:59Z\\\"\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"IsoDayOfWeek\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"A \", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"https://nodatime.org/3.0.x/api/NodaTime.IsoDayOfWeek.html\"\n  }, \"NodaTime IsoDayOfWeek\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"7\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"LocalDate\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"A \", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"https://nodatime.org/3.0.x/userguide/localdate-patterns\"\n  }, \"NodaTime LocalDate\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"\\\"2020-12-25\\\"\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"LocalDateTime\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"A \", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"https://nodatime.org/3.0.x/userguide/localdatetime-patterns\"\n  }, \"NodaTime LocalDateTime\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"\\\"2020-12-25T13:46:78\\\"\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"LocalTime\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"A \", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"https://nodatime.org/3.0.x/userguide/localtime-patterns\"\n  }, \"NodaTime LocalTime\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"\\\"12:42:13.03101\\\"\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"OffsetDateTime\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"A \", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"https://nodatime.org/3.0.x/userguide/offsetdatetime-patterns\"\n  }, \"NodaTime OffsetDateTime\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"\\\"2020-12-25T13:46:78+02:35\\\"\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"OffsetDate\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"A \", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"https://nodatime.org/3.0.x/userguide/offsetdate-patterns\"\n  }, \"NodaTime OffsetDate\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"\\\"2020-12-25+02:35\\\"\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"OffsetTime\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"A \", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"https://nodatime.org/3.0.x/userguide/offsettime-patterns\"\n  }, \"NodaTime OffsetTime\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"\\\"13:46:78+02:35\\\"\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Offset\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"A \", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"https://nodatime.org/3.0.x/userguide/offset-patterns\"\n  }, \"NodeTime Offset\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"\\\"+02:35\\\"\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Period\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"A \", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"https://nodatime.org/3.0.x/userguide/period-patterns\"\n  }, \"NodeTime Period\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"\\\"P-3W3DT139t\\\"\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ZonedDateTime\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"A \", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"https://nodatime.org/3.0.x/userguide/zoneddatetime-patterns\"\n  }, \"NodaTime ZonedDateTime\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"\\\"2020-12-31T19:40:13 Asia/Kathmandu +05:45\\\"\"))))), mdx(\"p\", null, \"When returning a NodaTime type from one of our resolvers, for example a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NodaTime.Duration\"), \", we also need to explicitly register the corresponding scalar type. In the case of a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NodaTime.Duration\"), \" this would be the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DurationType\"), \" scalar.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public class Query\\n{\\n    public Duration GetDuration() => Duration.FromMinutes(3);\\n}\\n\\npublic class Startup\\n{\\n    public void ConfigureServices(IServiceCollection services)\\n    {\\n        services\\n            .AddGraphQLServer()\\n            .AddQueryType<Query>()\\n            .AddType<DurationType>();\\n    }\\n}\\n\")), mdx(\"p\", null, \"This package was originally developed by \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/shoooe\"\n  }, \"@shoooe\"), \".\"), mdx(\"h1\", {\n    \"id\": \"binding-behavior\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#binding-behavior\",\n    \"aria-label\": \"binding behavior permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 512 512\",\n    \"width\": \"16\",\n    \"height\": \"16\",\n    \"fill\": \"var(--heading-text-color)\"\n  }, \"\\n                        \", mdx(\"path\", {\n    parentName: \"svg\",\n    \"d\": \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  }), \"\\n                      \")), \"Binding behavior\"), mdx(\"p\", null, \"Hot Chocolate binds most of the native .NET types automatically.\\nA \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"System.String\"), \" is for example automatically mapped to a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"StringType\"), \" in the schema.\"), mdx(\"p\", null, \"We can override these mappings by explicitly specifying type bindings.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"services\\n    .AddGraphQLServer()\\n    .BindRuntimeType<string, StringType>();\\n\")), mdx(\"p\", null, \"Furthermore, we can also bind scalars to arrays or type structures:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"services\\n    .AddGraphQLServer()\\n    .BindRuntimeType<byte[], ByteArrayType>();\\n\")), mdx(\"p\", null, \"Hot Chocolate only exposes the used scalars in the generated schema, keeping it simple and clean.\"), mdx(\"h1\", {\n    \"id\": \"custom-converters\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#custom-converters\",\n    \"aria-label\": \"custom converters permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 512 512\",\n    \"width\": \"16\",\n    \"height\": \"16\",\n    \"fill\": \"var(--heading-text-color)\"\n  }, \"\\n                        \", mdx(\"path\", {\n    parentName: \"svg\",\n    \"d\": \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  }), \"\\n                      \")), \"Custom Converters\"), mdx(\"p\", null, \"We can reuse existing scalar types and bind them to different runtime types by specifying converters.\"), mdx(\"p\", null, \"We could for example register converters between \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://nodatime.org/\"\n  }, \"NodaTime\"), \"'s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OffsetDateTime\"), \" and .NET's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DateTimeOffset\"), \" to reuse the existing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DateTimeType\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public class Query\\n{\\n    public OffsetDateTime GetDateTime(OffsetDateTime offsetDateTime)\\n    {\\n        return offsetDateTime;\\n    }\\n}\\n\\npublic class Startup\\n{\\n    public void ConfigureServices(IServiceCollection services)\\n    {\\n        services\\n            .AddGraphQLServer()\\n            .AddQueryType<Query>()\\n            .BindRuntimeType<OffsetDateTime, DateTimeType>()\\n            .AddTypeConverter<OffsetDateTime, DateTimeOffset>(\\n                x => x.ToDateTimeOffset())\\n            .AddTypeConverter<DateTimeOffset, OffsetDateTime>(\\n                x => OffsetDateTime.FromDateTimeOffset(x));\\n    }\\n}\\n\")), mdx(\"h1\", {\n    \"id\": \"scalar-options\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#scalar-options\",\n    \"aria-label\": \"scalar options permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 512 512\",\n    \"width\": \"16\",\n    \"height\": \"16\",\n    \"fill\": \"var(--heading-text-color)\"\n  }, \"\\n                        \", mdx(\"path\", {\n    parentName: \"svg\",\n    \"d\": \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  }), \"\\n                      \")), \"Scalar Options\"), mdx(\"p\", null, \"Some scalars like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TimeSpan\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Uuid\"), \" have options like their serialization format.\"), mdx(\"p\", null, \"We can specify these options by registering the scalar explictly.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"services\\n   .AddGraphQLServer()\\n   .AddType(new UuidType('D'));\\n\")), mdx(\"h1\", {\n    \"id\": \"custom-scalars\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#custom-scalars\",\n    \"aria-label\": \"custom scalars permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 512 512\",\n    \"width\": \"16\",\n    \"height\": \"16\",\n    \"fill\": \"var(--heading-text-color)\"\n  }, \"\\n                        \", mdx(\"path\", {\n    parentName: \"svg\",\n    \"d\": \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  }), \"\\n                      \")), \"Custom Scalars\"), mdx(\"p\", null, \"All scalars in Hot Chocolate are defined through a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ScalarType\"), \".\\nThe easiest way to create a custom scalar is to extend \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ScalarType<TRuntimeType, TLiteral>\"), \".\\nThis base class already includes basic serialization and parsing logic.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public sealed class CreditCardNumberType : ScalarType<string, StringValueNode>\\n{\\n    private readonly ICreditCardValidator _validator;\\n\\n    // we can inject services that have been registered\\n    // with the DI container\\n    public CreditCardNumberType(ICreditCardValidator validator)\\n        : base(\\\"CreditCardNumber\\\")\\n    {\\n        _validator = validator;\\n\\n        Description = \\\"Represents a credit card number\\\";\\n    }\\n\\n    // is another StringValueNode an instance of this scalar\\n    protected override bool IsInstanceOfType(StringValueNode valueSyntax)\\n        => IsInstanceOfType(valueSyntax.Value);\\n\\n    // is another string .NET type an instance of this scalar\\n    protected override bool IsInstanceOfType(string runtimeValue)\\n        => _validator.ValidateCreditCard(runtimeValue);\\n\\n    public override IValueNode ParseResult(object? resultValue)\\n        => ParseValue(resultValue);\\n\\n    // define how a value node is parsed to the string .NET type\\n    protected override string ParseLiteral(StringValueNode valueSyntax)\\n        => valueSyntax.Value;\\n\\n    // define how the string .NET type is parsed to a value node\\n    protected override StringValueNode ParseValue(string runtimeValue)\\n        => new StringValueNode(runtimeValue);\\n\\n    public override bool TryDeserialize(object? resultValue,\\n        out object? runtimeValue)\\n    {\\n        runtimeValue = null;\\n\\n        if (resultValue is string s && _validator.ValidateCreditCard(s))\\n        {\\n            runtimeValue = s;\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    public override bool TrySerialize(object? runtimeValue,\\n        out object? resultValue)\\n    {\\n        resultValue = null;\\n\\n        if (runtimeValue is string s && _validator.ValidateCreditCard(s))\\n        {\\n            resultValue = s;\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n}\\n\")), mdx(\"p\", null, \"By extending \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ScalarType\"), \" we have full control over serialization and parsing.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public class CreditCardNumberType : ScalarType\\n{\\n    private readonly ICreditCardValidator _validator;\\n\\n    public CreditCardNumberType(ICreditCardValidator validator)\\n        : base(\\\"CreditCardNumber\\\")\\n    {\\n        _validator = validator;\\n\\n        Description = \\\"Represents a credit card number\\\";\\n    }\\n\\n    // define which .NET type represents your type\\n    public override Type RuntimeType { get; } = typeof(string);\\n\\n    // define which value nodes this type can be parsed from\\n    public override bool IsInstanceOfType(IValueNode valueSyntax)\\n    {\\n        if (valueSyntax == null)\\n        {\\n            throw new ArgumentNullException(nameof(valueSyntax));\\n        }\\n\\n        return valueSyntax is StringValueNode stringValueNode &&\\n            _validator.ValidateCreditCard(stringValueNode.Value);\\n    }\\n\\n    // define how a value node is parsed to the native .NET type\\n    public override object ParseLiteral(IValueNode valueSyntax,\\n        bool withDefaults = true)\\n    {\\n        if (valueSyntax is StringValueNode stringLiteral &&\\n            _validator.ValidateCreditCard(stringLiteral.Value))\\n        {\\n            return stringLiteral.Value;\\n        }\\n\\n        throw new SerializationException(\\n            \\\"The specified value has to be a credit card number in the format \\\"\\n                + \\\"XXXX XXXX XXXX XXXX\\\",\\n            this);\\n    }\\n\\n    // define how the .NET type is parsed to a value node\\n    public override IValueNode ParseValue(object? runtimeValue)\\n    {\\n        if (runtimeValue is string s &&\\n            _validator.ValidateCreditCard(s))\\n        {\\n            return new StringValueNode(null, s, false);\\n        }\\n\\n        throw new SerializationException(\\n            \\\"The specified value has to be a credit card number in the format \\\"\\n                + \\\"XXXX XXXX XXXX XXXX\\\",\\n            this);\\n    }\\n\\n    public override IValueNode ParseResult(object? resultValue)\\n    {\\n        if (resultValue is string s &&\\n            _validator.ValidateCreditCard(s))\\n        {\\n            return new StringValueNode(null, s, false);\\n        }\\n\\n        throw new SerializationException(\\n            \\\"The specified value has to be a credit card number in the format \\\"\\n                + \\\"XXXX XXXX XXXX XXXX\\\",\\n            this);\\n    }\\n\\n    public override bool TrySerialize(object? runtimeValue,\\n        out object? resultValue)\\n    {\\n        resultValue = null;\\n\\n        if (runtimeValue is string s &&\\n            _validator.ValidateCreditCard(s))\\n        {\\n            resultValue = s;\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    public override bool TryDeserialize(object? resultValue,\\n        out object? runtimeValue)\\n    {\\n        runtimeValue = null;\\n\\n        if (resultValue is string s &&\\n            _validator.ValidateCreditCard(s))\\n        {\\n            runtimeValue = s;\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n}\\n\")), mdx(\"p\", null, \"The implementation of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/ChilliCream/hotchocolate/tree/main/src/HotChocolate/Core/src/Types.Scalars\"\n  }, \"Hot Chocolate's own scalars\"), \" can be used as a reference for writing custom scalars.\"));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":1,"value":".NET Scalars"},{"depth":2,"value":"Uuid Type"},{"depth":2,"value":"Any Type"},{"depth":1,"value":"Additional Scalars"},{"depth":2,"value":"NodaTime"},{"depth":1,"value":"Binding behavior"},{"depth":1,"value":"Custom Converters"},{"depth":1,"value":"Scalar Options"},{"depth":1,"value":"Custom Scalars"}]}},"site":{"siteMetadata":{"siteUrl":"https://chillicream.com","repositoryUrl":"https://github.com/ChilliCream/hotchocolate","tools":{"slack":"https://bit.ly/joinchilli"}}},"config":{"products":[{"path":"hotchocolate","title":"Hot Chocolate","description":"Build your own thin GraphQL API layer on top of any resource.","versions":[{"path":"","title":"v11","items":[{"path":"index","title":"Introduction","items":null},{"path":"get-started","title":"Get Started","items":null},{"path":"defining-a-schema","title":"Defining a schema","items":[{"path":"index","title":"Overview"},{"path":"queries","title":"Queries"},{"path":"mutations","title":"Mutations"},{"path":"subscriptions","title":"Subscriptions"},{"path":"object-types","title":"Object Types"},{"path":"scalars","title":"Scalars"},{"path":"arguments","title":"Arguments"},{"path":"input-object-types","title":"Input Object Types"},{"path":"lists","title":"Lists"},{"path":"non-null","title":"Non-Null"},{"path":"enums","title":"Enums"},{"path":"interfaces","title":"Interfaces"},{"path":"unions","title":"Unions"},{"path":"extending-types","title":"Extending Types"},{"path":"directives","title":"Directives"},{"path":"documentation","title":"Documentation"},{"path":"versioning","title":"Versioning"}]},{"path":"fetching-data","title":"Fetching data","items":[{"path":"index","title":"Resolver"},{"path":"fetching-from-databases","title":"Fetching from Databases"},{"path":"fetching-from-rest","title":"Fetching from REST"},{"path":"dataloader","title":"DataLoader"},{"path":"pagination","title":"Pagination"},{"path":"filtering","title":"Filtering"},{"path":"sorting","title":"Sorting"},{"path":"projections","title":"Projections"}]},{"path":"distributed-schema","title":"Distributed Schemas","items":[{"path":"index","title":"Overview"},{"path":"schema-stitching","title":"Schema Stitching"},{"path":"schema-federations","title":"Schema Federations"},{"path":"schema-configuration","title":"Schema Configuration"}]},{"path":"integrations","title":"Integrations","items":[{"path":"index","title":"Overview"},{"path":"entity-framework","title":"Entity Framework"},{"path":"spatial-data","title":"Spatial Data"},{"path":"mongodb","title":"MongoDB"}]},{"path":"performance","title":"Performance","items":[{"path":"index","title":"Overview"},{"path":"persisted-queries","title":"Persisted queries"},{"path":"automatic-persisted-queries","title":"Automatic persisted queries"}]},{"path":"security","title":"Security","items":[{"path":"index","title":"Overview"},{"path":"authentication","title":"Authentication"},{"path":"authorization","title":"Authorization"}]},{"path":"api-reference","title":"API Reference","items":[{"path":"index","title":"Overview"},{"path":"custom-attributes","title":"Custom Attributes"},{"path":"language","title":"Language"},{"path":"extending-filtering","title":"Extending Filtering"},{"path":"visitors","title":"Visitors"},{"path":"aspnetcore","title":"ASP.NET Core"},{"path":"dependency-injection","title":"Dependency Injection"},{"path":"executable","title":"Executable"},{"path":"apollo-tracing","title":"Apollo Tracing"},{"path":"migrate-from-10-to-11","title":"Migrate from 10.5 to 11.0"}]}]},{"path":"v10","title":"v10","items":[{"path":"index","title":"Introduction","items":null},{"path":"code-first","title":"Code-First","items":null},{"path":"schema-first","title":"Schema-First","items":null},{"path":"schema","title":"Schema","items":[{"path":"index","title":"Schema"},{"path":"object-type","title":"Object Type"},{"path":"interface-type","title":"Interface Type"},{"path":"union-type","title":"Union Type"},{"path":"input-object-type","title":"Input Object Type"},{"path":"enum-type","title":"Enum Type"},{"path":"descriptions","title":"Schema Descriptions"},{"path":"custom-scalar-types","title":"Scalar Type Support"},{"path":"descriptor-attributes","title":"Descriptor Attributes"},{"path":"extending-types","title":"Custom Base Classes"},{"path":"directives","title":"Directives"},{"path":"resolvers","title":"Resolvers"},{"path":"relay","title":"Relay"},{"path":"conventions","title":"Conventions"},{"path":"options","title":"Schema Options"}]},{"path":"data-fetching","title":"Data Fetching","items":[{"path":"index","title":"Data Loaders"},{"path":"pagination","title":"Pagination"},{"path":"filters","title":"Filters"}]},{"path":"security","title":"Security","items":[{"path":"index","title":"Authorization"},{"path":"security","title":"Security"}]},{"path":"execution-engine","title":"Execution Engine","items":[{"path":"index","title":"Middleware"},{"path":"validation-rules","title":"Validation Rules"},{"path":"instrumentation","title":"Instrumentation"},{"path":"apollo-tracing","title":"Apollo Tracing"},{"path":"batching","title":"Batching"},{"path":"persisted-queries","title":"Persisted Queries"},{"path":"custom-context-data","title":"Custom Context Data"},{"path":"subscriptions","title":"Subscriptions"},{"path":"type-conversion","title":"Type Conversion"},{"path":"error-filter","title":"Error Filter"},{"path":"execution-options","title":"Execution Options"}]},{"path":"server","title":"Server","items":[{"path":"index","title":"ASP.NET"},{"path":"dependency-injection","title":"Dependency Injection"}]},{"path":"stitching","title":"Schema Stitching","items":null},{"path":"tooling","title":"Tooling","items":null},{"path":"advanced","title":"Advanced","items":[{"path":"index","title":"Parser"},{"path":"dotnet-cli","title":".NET CLI"}]},{"path":"tutorials","title":"Tutorials","items":[{"path":"index","title":"Entity Framework"}]},{"path":"examples","title":"Examples","items":[{"path":"index","title":"Star Wars"},{"path":"slack-clone","title":"Slack Clone"},{"path":"other-examples","title":"Other Examples"}]}]}]},{"path":"bananacakepop","title":"Banana Cake Pop","description":"Use this GUI to get deep insights from any GraphQL API.","versions":[{"path":"","title":"v1","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"strawberryshake","title":"Strawberry Shake","description":"The only GraphQL client you will every need in the .NET ecosystem.","versions":[{"path":"","title":"v11","items":[{"path":"index","title":"Introduction","items":null},{"path":"get-started","title":"Get Started","items":[{"path":"index","title":"Blazor"},{"path":"xamarin","title":"Xamarin"},{"path":"console","title":"Console"}]},{"path":"subscriptions","title":"Subscriptions","items":null},{"path":"tooling","title":"Tooling / CLI","items":null},{"path":"caching","title":"Caching","items":[{"path":"index","title":"Overview"},{"path":"entities","title":"Entities"},{"path":"invalidation","title":"Invalidation"}]},{"path":"performance","title":"Performance","items":[{"path":"index","title":"Overview"},{"path":"persisted-queries","title":"Persisted Queries"},{"path":"persisted-state","title":"Persisted State"}]},{"path":"networking","title":"Networking","items":[{"path":"index","title":"Protocols"},{"path":"authentication","title":"Authentication"}]},{"path":"scalars","title":"Scalars","items":null}]}]},{"path":"greendonut","title":"Green Donut","description":"Configure data loaders and caching for GraphQL endpoints.","versions":[{"path":"","title":"v11","items":[{"path":"index","title":"Introduction","items":null}]},{"path":"v10","title":"v10","items":[{"path":"index","title":"Introduction","items":null},{"path":"installation","title":"Installation","items":null},{"path":"usage","title":"Usage","items":null},{"path":"api","title":"API","items":null},{"path":"advanced-concepts","title":"Advanced Concepts","items":[{"path":"index","title":"Custom DataLoader"},{"path":"diagnostics","title":"Diagnostic Events"}]}]}]}]}},"pageContext":{"originPath":"hotchocolate/defining-a-schema/scalars.md"}},"staticQueryHashes":["2890364758","3416206942","4218812017"]}