{"componentChunkName":"component---src-templates-doc-page-template-tsx","path":"/docs/hotchocolate/defining-a-schema","result":{"data":{"file":{"childMdx":{"fields":{"slug":"/hotchocolate/defining-a-schema/"},"frontmatter":{"title":"Schema basics"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Schema basics\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The schema in GraphQL represents the type system and exposes your business model in a strong and rich way. The schema fully describes the shape of your data and how you can interact with it.\"), mdx(\"h1\", null, \"Object Type\"), mdx(\"p\", null, \"The most important type in a GraphQL schema is the object type which lets you consume data. Every object type has to have at least one field which holds the data of an object. Fields can return simple scalars like String, Int, or again object types.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sdl\"\n  }), \"type Book {\\n  title: String\\n  author: String\\n}\\n\")), mdx(\"h2\", null, \"Operations\"), mdx(\"p\", null, \"In GraphQL, we have three root types from which only the Query type has to be defined. Root types provide the entry points that let you fetch data, mutate data, or subscribe to events. Root types themself are object types.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sdl\"\n  }), \"schema {\\n  query: Query\\n}\\n\\ntype Query {\\n  book: Book\\n}\\n\\ntype Book {\\n  title: String\\n  author: String\\n}\\n\")), mdx(\"p\", null, \"In Hot Chocolate, there are three ways to define an object type.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" Every single code example will be shown in three different approaches, annotation-based (previously known as pure code-first), code-first, and schema-first. However, they will always result in the same outcome on a GraphQL schema perspective and internally in Hot Chocolate. All three approaches have their pros and cons and can be combined when needed with each other. If you would like to learn more about the three approaches in Hot Chocolate, click on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/hotchocolate/api-reference/coding-approaches\"\n  }), \"Coding Approaches\"), \".\")), mdx(ExampleTabs, {\n    mdxType: \"ExampleTabs\"\n  }, mdx(ExampleTabs.Annotation, null, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"// Query.cs\\npublic class Query\\n{\\n    public Book GetBook() => new Book { Title  = \\\"C# in depth\\\", Author = \\\"Jon Skeet\\\" };\\n}\\n\\n// Book.cs\\npublic class Book\\n{\\n    public string Title { get; set; }\\n\\n    public string Author { get; set; }\\n}\\n\\n// Startup.cs\\npublic class Startup\\n{\\n    public void ConfigureServices(IServiceCollection services)\\n    {\\n        services\\n            .AddRouting()\\n            .AddGraphQLServer()\\n            .AddQueryType<Query>();\\n    }\\n\\n    // Omitted code for brevity\\n}\\n\"))), mdx(ExampleTabs.Code, null, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"// Query.cs\\npublic class Query\\n{\\n    public Book GetBook() => new Book { Title  = \\\"C# in depth\\\", Author = \\\"Jon Skeet\\\" };\\n}\\n\\n// QueryType.cs\\npublic class QueryType : ObjectType<Query>\\n{\\n    protected override void Configure(IObjectTypeDescriptor<Query> descriptor)\\n    {\\n        descriptor\\n            .Field(f => f.GetBook())\\n            .Type<BookType>();\\n    }\\n}\\n\\n// Book.cs\\npublic class Book\\n{\\n    public string Title { get; set; }\\n\\n    public string Author { get; set; }\\n}\\n\\n// BookType.cs\\npublic class BookType : ObjectType<Book>\\n{\\n    protected override void Configure(IObjectTypeDescriptor<Query> descriptor)\\n    {\\n        descriptor\\n            .Field(f => f.Title)\\n            .Type<StringType>();\\n\\n        descriptor\\n            .Field(f => f.Author)\\n            .Type<StringType>();\\n    }\\n}\\n\\n\\n// Startup.cs\\npublic class Startup\\n{\\n    public void ConfigureServices(IServiceCollection services)\\n    {\\n        services\\n            .AddRouting()\\n            .AddGraphQLServer()\\n            .AddQueryType<QueryType>();\\n    }\\n\\n    // Omitted code for brevity\\n}\\n\"))), mdx(ExampleTabs.Schema, null, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"// Query.cs\\npublic class Query\\n{\\n    public Book GetBook() => new Book { Title  = \\\"C# in depth\\\", Author = \\\"Jon Skeet\\\" };\\n}\\n\\n// Startup.cs\\npublic class Startup\\n{\\n    public void ConfigureServices(IServiceCollection services)\\n    {\\n        services\\n            .AddRouting()\\n            .AddGraphQLServer()\\n            .AddDocumentFromString(@\\\"\\n                type Query {\\n                  book: Book\\n                }\\n\\n                type Book {\\n                  title: String\\n                  author: String\\n                }\\n            \\\")\\n            .BindComplexType<Query>();\\n    }\\n\\n    // Omitted code for brevity\\n}\\n\")))), mdx(\"h2\", null, \"Fields\"), mdx(\"p\", null, \"Fields of object types can be compared to methods in C# and allow us to pass in arguments.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sdl\"\n  }), \"type Query {\\n  book(id: String): Book\\n}\\n\\ntype Book {\\n  title: String\\n  author: String\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"{\\n  book(id: \\\"abc\\\") {\\n    title\\n  }\\n}\\n\")), mdx(ExampleTabs, {\n    mdxType: \"ExampleTabs\"\n  }, mdx(ExampleTabs.Annotation, null, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"// Query.cs\\npublic class Query\\n{\\n    public Task<Book> GetBookAsync(string id)\\n    {\\n        // Omitted code for brevity\\n    }\\n}\\n\\n// Book.cs\\npublic class Book\\n{\\n    public string Title { get; set; }\\n\\n    public string Author { get; set; }\\n}\\n\\n// Startup.cs\\npublic class Startup\\n{\\n    public void ConfigureServices(IServiceCollection services)\\n    {\\n        services\\n            .AddRouting()\\n            .AddGraphQLServer()\\n            .AddQueryType<Query>();\\n    }\\n\\n    // Omitted code for brevity\\n}\\n\"))), mdx(ExampleTabs.Code, null, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"// Query.cs\\npublic class Query\\n{\\n    public Task<Book> GetBookAsync(string id)\\n    {\\n        // Omitted code for brevity\\n    }\\n}\\n\\n// QueryType.cs\\npublic class QueryType : ObjectType<Query>\\n{\\n    protected override void Configure(IObjectTypeDescriptor<Query> descriptor)\\n    {\\n        descriptor\\n            .Field(f => f.GetBook(default))\\n            .Type<BookType>();\\n    }\\n}\\n\\n// Book.cs\\npublic class Book\\n{\\n    public string Title { get; set; }\\n\\n    public string Author { get; set; }\\n}\\n\\n// BookType.cs\\npublic class BookType : ObjectType<Book>\\n{\\n    protected override void Configure(IObjectTypeDescriptor<Query> descriptor)\\n    {\\n        descriptor\\n            .Field(f => f.Title)\\n            .Type<StringType>();\\n\\n        descriptor\\n            .Field(f => f.Author)\\n            .Type<StringType>();\\n    }\\n}\\n\\n\\n// Startup.cs\\npublic class Startup\\n{\\n    public void ConfigureServices(IServiceCollection services)\\n    {\\n        services\\n            .AddRouting()\\n            .AddGraphQLServer()\\n            .AddQueryType<QueryType>();\\n    }\\n\\n    // Omitted code for brevity\\n}\\n\"))), mdx(ExampleTabs.Schema, null, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"// Query.cs\\npublic class Query\\n{\\n    public Task<Book> GetBookAsync(string id)\\n    {\\n        // Omitted code for brevity\\n    }\\n}\\n\\n// Startup.cs\\npublic class Startup\\n{\\n    public void ConfigureServices(IServiceCollection services)\\n    {\\n        services\\n            .AddRouting()\\n            .AddGraphQLServer()\\n            .AddDocumentFromString(@\\\"\\n                type Query {\\n                  book(id: String): Book\\n                }\\n\\n                type Book {\\n                  title: String\\n                  author: String\\n                }\\n            \\\")\\n            .BindComplexType<Query>();\\n    }\\n\\n    // Omitted code for brevity\\n}\\n\")))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Further reading:\"), mdx(\"ul\", {\n    parentName: \"blockquote\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/docs/hotchocolate/api-reference/object-type\"\n  }), \"Object Types\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/docs/hotchocolate/fetching-data\"\n  }), \"Resolvers\"), \".\"))), mdx(\"h1\", null, \"Input Objects\"), mdx(\"p\", null, \"In GraphQL we distinguish between input- and output-types. We already learned about object types which is the most prominent output-type and lets us consume data. Further, we used simple scalars like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"String\"), \" to pass data into a field as an argument. In order to define complex structures of raw data that can be used as input data GraphQL defines input objects.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sdl\"\n  }), \"input BookInput {\\n  title: String\\n  author: String\\n}\\n\")), mdx(\"p\", null, \"If we wanted for instance to create a new book with a mutation we could do that like the following.\"), mdx(ExampleTabs, {\n    mdxType: \"ExampleTabs\"\n  }, mdx(ExampleTabs.Annotation, null, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"// Query.cs\\npublic class Query\\n{\\n    // Omitted code for brevity\\n}\\n\\n// Query.cs\\npublic class Mutation\\n{\\n    public async Task<Book> CreateBook(Book book)\\n    {\\n\\n    }\\n}\\n\\n// Book.cs\\npublic class Book\\n{\\n    public string Title { get; set; }\\n\\n    public string Author { get; set; }\\n}\\n\\n// Startup.cs\\npublic class Startup\\n{\\n    public void ConfigureServices(IServiceCollection services)\\n    {\\n        services\\n            .AddRouting()\\n            .AddGraphQLServer()\\n            .AddQueryType<Query>();\\n    }\\n\\n    // Omitted code for brevity\\n}\\n\"))), mdx(ExampleTabs.Code, null, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"// Query.cs\\npublic class Query\\n{\\n    public Task<Book> GetBookAsync(string id)\\n    {\\n        // Omitted code for brevity\\n    }\\n}\\n\\n// QueryType.cs\\npublic class QueryType : ObjectType<Query>\\n{\\n    protected override void Configure(IObjectTypeDescriptor<Query> descriptor)\\n    {\\n        descriptor\\n            .Field(f => f.GetBook(default))\\n            .Type<BookType>();\\n    }\\n}\\n\\n// Book.cs\\npublic class Book\\n{\\n    public string Title { get; set; }\\n\\n    public string Author { get; set; }\\n}\\n\\n// BookType.cs\\npublic class BookType : ObjectType<Book>\\n{\\n    protected override void Configure(IObjectTypeDescriptor<Query> descriptor)\\n    {\\n        descriptor\\n            .Field(f => f.Title)\\n            .Type<StringType>();\\n\\n        descriptor\\n            .Field(f => f.Author)\\n            .Type<StringType>();\\n    }\\n}\\n\\n\\n// Startup.cs\\npublic class Startup\\n{\\n    public void ConfigureServices(IServiceCollection services)\\n    {\\n        services\\n            .AddRouting()\\n            .AddGraphQLServer()\\n            .AddQueryType<QueryType>();\\n    }\\n\\n    // Omitted code for brevity\\n}\\n\"))), mdx(ExampleTabs.Schema, null, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"// Query.cs\\npublic class Query\\n{\\n    public Task<Book> GetBookAsync(string id)\\n    {\\n        // Omitted code for brevity\\n    }\\n}\\n\\n// Startup.cs\\npublic class Startup\\n{\\n    public void ConfigureServices(IServiceCollection services)\\n    {\\n        services\\n            .AddRouting()\\n            .AddGraphQLServer()\\n            .AddDocumentFromString(@\\\"\\n                type Query {\\n                  book(id: String): Book\\n                }\\n\\n                type Book {\\n                  title: String\\n                  author: String\\n                }\\n            \\\")\\n            .BindComplexType<Query>();\\n    }\\n\\n    // Omitted code for brevity\\n}\\n\")))), mdx(\"h1\", null, \"Lists\"), mdx(\"h1\", null, \"Nullability\"), mdx(\"p\", null, \"GraphQL has a concept of nun-null types. Basically any type can be a non-nullable type, in the SDL we decorate non-nullable types with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Bang\"), \" token \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"!\"), \". In order to describe this in C# we can use attributes, use C# nullable reference types or use the underlying schema types to describe our GraphQL type explicitly.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#object-type","title":"Object Type","items":[{"url":"#operations","title":"Operations"},{"url":"#fields","title":"Fields"}]},{"url":"#input-objects","title":"Input Objects"},{"url":"#lists","title":"Lists"},{"url":"#nullability","title":"Nullability"}]}}},"site":{"siteMetadata":{"siteUrl":"https://chillicream.com","repositoryUrl":"https://github.com/ChilliCream/hotchocolate","tools":{"slack":"https://join.slack.com/t/hotchocolategraphql/shared_invite/enQtNTA4NjA0ODYwOTQ0LTViMzA2MTM4OWYwYjIxYzViYmM0YmZhYjdiNzBjOTg2ZmU1YmMwNDZiYjUyZWZlMzNiMTk1OWUxNWZhMzQwY2Q"}}},"config":{"products":[{"path":"hotchocolate","title":"Hot Chocolate","description":"Build your own thin GraphQL API layer on top of any resource.","versions":[{"path":"","title":"v11 (latest)","items":[{"path":"index","title":"Introduction","items":null},{"path":"get-started","title":"Get Started","items":null},{"path":"defining-a-schema","title":"Defining a schema","items":[{"path":"index","title":"Schema basics"},{"path":"versioning","title":"Versioning"},{"path":"unions-and-interfaces","title":"Unions and Interfaces"},{"path":"scalars","title":"Scalars"},{"path":"directives","title":"Directives"}]},{"path":"fetching-data","title":"Fetching data","items":[{"path":"index","title":"Resolver"},{"path":"fetching-from-databases","title":"Fetching from Databases"},{"path":"fetching-from-rest","title":"Fetching from REST"},{"path":"dataloader","title":"DataLoader"},{"path":"pagination","title":"Pagination"},{"path":"filtering","title":"Filtering"},{"path":"sorting","title":"Sorting"},{"path":"projections","title":"Projections"}]},{"path":"integrations","title":"Integrations","items":[{"path":"index","title":"Overview"},{"path":"entity-framework","title":"Entity Framework"},{"path":"spatial-data","title":"Spatial Data"}]},{"path":"performance","title":"Performance","items":[{"path":"index","title":"Overview"},{"path":"persisted-queries","title":"Persisted queries"},{"path":"automatic-persisted-queries","title":"Automatic persisted queries"}]},{"path":"api-reference","title":"API Reference","items":[{"path":"index","title":"Overview"},{"path":"object-type","title":"Object Type"},{"path":"language","title":"Language"},{"path":"extending-filtering","title":"Extending Filtering"},{"path":"visitors","title":"Visitors"},{"path":"aspnetcore","title":"ASP.NET Core"},{"path":"executable","title":"Executable"},{"path":"migrate-from-10-to-11","title":"Migrate from 10.5 to 11.0"}]}]},{"path":"v10","title":"v10 (previous)","items":[{"path":"index","title":"Introduction","items":null},{"path":"code-first","title":"Code-First","items":null},{"path":"schema-first","title":"Schema-First","items":null},{"path":"schema","title":"Schema","items":[{"path":"index","title":"Schema"},{"path":"object-type","title":"Object Type"},{"path":"interface-type","title":"Interface Type"},{"path":"union-type","title":"Union Type"},{"path":"input-object-type","title":"Input Object Type"},{"path":"enum-type","title":"Enum Type"},{"path":"descriptions","title":"Schema Descriptions"},{"path":"custom-scalar-types","title":"Scalar Type Support"},{"path":"descriptor-attributes","title":"Descriptor Attributes"},{"path":"extending-types","title":"Custom Base Classes"},{"path":"directives","title":"Directives"},{"path":"resolvers","title":"Resolvers"},{"path":"relay","title":"Relay"},{"path":"conventions","title":"Conventions"},{"path":"options","title":"Schema Options"}]},{"path":"data-fetching","title":"Data Fetching","items":[{"path":"index","title":"Data Loaders"},{"path":"pagination","title":"Pagination"},{"path":"filters","title":"Filters"}]},{"path":"security","title":"Security","items":[{"path":"index","title":"Authorization"},{"path":"security","title":"Security"}]},{"path":"execution-engine","title":"Execution Engine","items":[{"path":"index","title":"Middleware"},{"path":"validation-rules","title":"Validation Rules"},{"path":"instrumentation","title":"Instrumentation"},{"path":"apollo-tracing","title":"Apollo Tracing"},{"path":"batching","title":"Batching"},{"path":"persisted-queries","title":"Persisted Queries"},{"path":"custom-context-data","title":"Custom Context Data"},{"path":"subscriptions","title":"Subscriptions"},{"path":"type-conversion","title":"Type Conversion"},{"path":"error-filter","title":"Error Filter"},{"path":"execution-options","title":"Execution Options"}]},{"path":"server","title":"Server","items":[{"path":"index","title":"ASP.Net"},{"path":"dependency-injection","title":"Dependency Injection"}]},{"path":"stitching","title":"Schema Stitching","items":null},{"path":"tooling","title":"Tooling","items":null},{"path":"advanced","title":"Advanced","items":[{"path":"index","title":"Parser"},{"path":"dotnet-cli","title":".Net CLI"}]},{"path":"tutorials","title":"Tutorials","items":[{"path":"index","title":"Entity Framework"}]},{"path":"examples","title":"Examples","items":[{"path":"index","title":"Star Wars"},{"path":"slack-clone","title":"Slack Clone"},{"path":"other-examples","title":"Other Examples"}]}]}]},{"path":"bananacakepop","title":"Banana Cake Pop","description":"Use this GUI to get deep insights from any GraphQL API.","versions":[{"path":"","title":"v1 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"greendonut","title":"Green Donut","description":"Configure data loaders and caching for GraphQL endpoints.","versions":[{"path":"","title":"v11 (latest)","items":[{"path":"index","title":"Introduction","items":null}]},{"path":"v10","title":"v10 (previous)","items":[{"path":"index","title":"Introduction","items":null},{"path":"installation","title":"Installation","items":null},{"path":"usage","title":"Usage","items":null},{"path":"api","title":"API","items":null},{"path":"advanced-concepts","title":"Advanced Concepts","items":[{"path":"index","title":"Custom DataLoader"},{"path":"diagnostics","title":"Diagnostic Events"}]}]}]}]}},"pageContext":{"originPath":"hotchocolate/defining-a-schema/index.md"}},"staticQueryHashes":["1014893094","2890364758","4218812017"]}