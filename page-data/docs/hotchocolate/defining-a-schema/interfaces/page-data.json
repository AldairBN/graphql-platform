{"componentChunkName":"component---src-templates-doc-page-template-tsx","path":"/docs/hotchocolate/defining-a-schema/interfaces","result":{"data":{"file":{"childMdx":{"fields":{"slug":"/hotchocolate/defining-a-schema/interfaces/","lastUpdated":"2021-06-02","lastAuthorName":"Tobias Tengler"},"frontmatter":{"title":"Interfaces"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Interfaces\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"An interface is an abstract type that defines a certain set of fields that another type must include to implement the interface.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sdl\"\n  }), \"interface Message {\\n  author: User!\\n  createdAt: DateTime!\\n}\\n\\ntype TextMessage implements Message {\\n  author: User!\\n  createdAt: DateTime!\\n  content: String!\\n}\\n\")), mdx(\"p\", null, \"Clients can query fields returning an interface like the following.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"{\\n  messages {\\n    author {\\n      name\\n    }\\n    ... on TextMessage {\\n      content\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"Learn more about interfaces \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://graphql.org/learn/schema/#interfaces\"\n  }), \"here\"), \".\"), mdx(\"h1\", {\n    \"id\": \"usage\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h1\"\n  }, {\n    \"href\": \"#usage\",\n    \"aria-label\": \"usage permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 512 512\",\n    \"width\": \"16\",\n    \"height\": \"16\"\n  }), \"\\n                        \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  })), \"\\n                      \")), \"Usage\"), mdx(\"p\", null, \"Interfaces can be defined like the following.\"), mdx(ExampleTabs, {\n    mdxType: \"ExampleTabs\"\n  }, mdx(ExampleTabs.Annotation, null, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"[InterfaceType(\\\"Message\\\")]\\npublic interface IMessage\\n{\\n    User Author { get; set; }\\n\\n    DateTime CreatedAt { get; set; }\\n}\\n\\npublic class TextMessage : IMessage\\n{\\n    public User Author { get; set; }\\n\\n    public DateTime CreatedAt { get; set; }\\n\\n    public string Content { get; set; }\\n}\\n\\npublic class Query\\n{\\n    public IMessage[] GetMessages()\\n    {\\n        // Omitted code for brevity\\n    }\\n}\\n\\npublic class Startup\\n{\\n    public void ConfigureServices(IServiceCollection services)\\n    {\\n        services\\n            .AddGraphQLServer()\\n            .AddQueryType<Query>()\\n            .AddType<TextMessage>();\\n    }\\n}\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"The following does not currently work (\", mdx(\"a\", _extends({\n    parentName: \"strong\"\n  }, {\n    \"href\": \"https://github.com/ChilliCream/hotchocolate/issues/3577\"\n  }), \"3577\"), \")\")), mdx(\"p\", null, \"We can also use classes to define an interface.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"[InterfaceType]\\npublic abstract class Message\\n{\\n    public User SendBy { get; set; }\\n\\n    public DateTime CreatedAt { get; set; }\\n}\\n\\npublic class TextMessage : Message\\n{\\n    public string Content { get; set; }\\n}\\n\\npublic class Startup\\n{\\n    public void ConfigureServices(IServiceCollection services)\\n    {\\n        services\\n            .AddGraphQLServer()\\n            // ...\\n            .AddType<TextMessage>();\\n    }\\n}\\n\"))), mdx(ExampleTabs.Code, null, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"public interface IMessage\\n{\\n    User Author { get; set; }\\n\\n    DateTime CreatedAt { get; set; }\\n}\\n\\npublic class MessageType : InterfaceType<IMessage>\\n{\\n    protected override void Configure(\\n        IInterfaceTypeDescriptor<IMessage> descriptor)\\n    {\\n        descriptor.Name(\\\"Message\\\");\\n    }\\n}\\n\\npublic class TextMessage : IMessage\\n{\\n    public User Author { get; set; }\\n\\n    public DateTime CreatedAt { get; set; }\\n\\n    public string Content { get; set; }\\n}\\n\\npublic class TextMessageType : ObjectType<TextMessage>\\n{\\n    protected override void Configure(\\n        IObjectTypeDescriptor<TextMessage> descriptor)\\n    {\\n        descriptor.Name(\\\"TextMessage\\\");\\n\\n        // The interface that is being implemented\\n        descriptor.Implements<MessageType>();\\n    }\\n}\\n\\npublic class Query\\n{\\n    public IMessage[] GetMessages()\\n    {\\n        // Omitted code for brevity\\n    }\\n}\\n\\npublic class QueryType : ObjectType<Query>\\n{\\n    protected override void Configure(IObjectTypeDescriptor<Query> descriptor)\\n    {\\n        descriptor\\n            .Field(f => f.GetMessages(default));\\n    }\\n}\\n\\npublic class Startup\\n{\\n    public void ConfigureServices(IServiceCollection services)\\n    {\\n        services\\n            .AddGraphQLServer()\\n            .AddQueryType<QueryType>()\\n            .AddType<TextMessageType>();\\n    }\\n}\\n\"))), mdx(ExampleTabs.Schema, null, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"public interface IMessage\\n{\\n    string Author { get; set; }\\n\\n    DateTime CreatedAt { get; set; }\\n}\\npublic class TextMessage : IMessage\\n{\\n    public string Author { get; set; }\\n\\n    public DateTime CreatedAt { get; set; }\\n\\n    public string Content { get; set; }\\n}\\n\\npublic class Startup\\n{\\n    public void ConfigureServices(IServiceCollection services)\\n    {\\n        services\\n            .AddGraphQLServer()\\n            .AddDocumentFromString(@\\\"\\n                type Query {\\n                  messages: [Message]\\n                }\\n\\n                interface Message {\\n                  author: User!\\n                  createdAt: DateTime!\\n                }\\n\\n                type TextMessage implements Message {\\n                  author: User!\\n                  createdAt: DateTime!\\n                  content: String!\\n                }\\n            \\\")\\n            .BindComplexType<TextMessage>()\\n            .AddResolver(\\\"Query\\\", \\\"messages\\\", (context) =>\\n            {\\n                // Omitted code for brevity\\n            });\\n    }\\n}\\n\")))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Note: We have to explicitly register the interface implementations:\"), mdx(\"pre\", {\n    parentName: \"blockquote\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"services.AddType<TextMessageType>()\\n\"))), mdx(\"h1\", {\n    \"id\": \"interfaces-implementing-interfaces\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h1\"\n  }, {\n    \"href\": \"#interfaces-implementing-interfaces\",\n    \"aria-label\": \"interfaces implementing interfaces permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 512 512\",\n    \"width\": \"16\",\n    \"height\": \"16\"\n  }), \"\\n                        \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  })), \"\\n                      \")), \"Interfaces implementing interfaces\"), mdx(\"p\", null, \"Interfaces can also implement other interfaces.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sdl\"\n  }), \"interface Message {\\n  author: User\\n}\\n\\ninterface DatedMessage implements Message {\\n  createdAt: DateTime!\\n  author: User\\n}\\n\\ntype TextMessage implements DatedMessage & Message {\\n  author: User\\n  createdAt: DateTime!\\n  content: String\\n}\\n\")), mdx(\"p\", null, \"We can implement this like the following.\"), mdx(ExampleTabs, {\n    mdxType: \"ExampleTabs\"\n  }, mdx(ExampleTabs.Annotation, null, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"[InterfaceType(\\\"Message\\\")]\\npublic interface IMessage\\n{\\n    User Author { get; set; }\\n}\\n\\n[InterfaceType(\\\"DatedMessage\\\")]\\npublic interface IDatedMessage : IMessage\\n{\\n    DateTime CreatedAt { get; set; }\\n}\\n\\npublic class TextMessage : IDatedMessage\\n{\\n    public User Author { get; set; }\\n\\n    public DateTime CreatedAt { get; set; }\\n\\n    public string Content { get; set; }\\n}\\n\\npublic class Query\\n{\\n    public IMessage[] GetMessages()\\n    {\\n        // Omitted code for brevity\\n    }\\n}\\n\\npublic class Startup\\n{\\n    public void ConfigureServices(IServiceCollection services)\\n    {\\n        services\\n            .AddGraphQLServer()\\n            .AddQueryType<Query>()\\n            .AddType<IDatedMessage>()\\n            .AddType<TextMessage>();\\n    }\\n}\\n\"))), mdx(ExampleTabs.Code, null, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"public interface IMessage\\n{\\n    User Author { get; set; }\\n}\\n\\npublic class MessageType : InterfaceType<IMessage>\\n{\\n    protected override void Configure(\\n        IInterfaceTypeDescriptor<IMessage> descriptor)\\n    {\\n        descriptor.Name(\\\"Message\\\");\\n    }\\n}\\n\\npublic interface IDatedMessage : IMessage\\n{\\n    DateTime CreatedAt { get; set; }\\n}\\n\\npublic class DatedMessageType : InterfaceType<IDatedMessage>\\n{\\n    protected override void Configure(\\n        IInterfaceTypeDescriptor<IDatedMessage> descriptor)\\n    {\\n        descriptor.Name(\\\"DatedMessage\\\");\\n\\n        descriptor.Implements<MessageType>();\\n    }\\n}\\n\\npublic class TextMessage : IDatedMessage\\n{\\n    public User Author { get; set; }\\n\\n    public DateTime CreatedAt { get; set; }\\n\\n    public string Content { get; set; }\\n}\\n\\npublic class TextMessageType : ObjectType<TextMessage>\\n{\\n    protected override void Configure(\\n        IObjectTypeDescriptor<TextMessage> descriptor)\\n    {\\n        descriptor.Name(\\\"TextMessage\\\");\\n\\n        // The interface that is being implemented\\n        descriptor.Implements<DatedMessageType>();\\n    }\\n}\\n\\npublic class Query\\n{\\n    public IMessage[] GetMessages()\\n    {\\n        // Omitted code for brevity\\n    }\\n}\\n\\npublic class QueryType : ObjectType<Query>\\n{\\n    protected override void Configure(IObjectTypeDescriptor<Query> descriptor)\\n    {\\n        descriptor\\n            .Field(f => f.GetMessages(default));\\n    }\\n}\\n\\npublic class Startup\\n{\\n    public void ConfigureServices(IServiceCollection services)\\n    {\\n        services\\n            .AddGraphQLServer()\\n            .AddQueryType<QueryType>()\\n            .AddType<DatedMessageType>()\\n            .AddType<TextMessageType>();\\n    }\\n}\\n\"))), mdx(ExampleTabs.Schema, null, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"public interface IMessage\\n{\\n    User Author { get; set; }\\n}\\n\\npublic interface IDatedMessage : IMessage\\n{\\n    DateTime CreatedAt { get; set; }\\n}\\n\\npublic class TextMessage : IDatedMessage\\n{\\n    public User Author { get; set; }\\n\\n    public DateTime CreatedAt { get; set; }\\n\\n    public string Content { get; set; }\\n}\\n\\npublic class Startup\\n{\\n    public void ConfigureServices(IServiceCollection services)\\n    {\\n        services\\n            .AddGraphQLServer()\\n            .AddDocumentFromString(@\\\"\\n                type Query {\\n                  messages: [Message]\\n                }\\n\\n                interface Message {\\n                  author: User\\n                }\\n\\n                interface DatedMessage implements Message {\\n                  createdAt: DateTime!\\n                  author: User\\n                }\\n\\n                type TextMessage implements DatedMessage & Message {\\n                  author: User\\n                  createdAt: DateTime!\\n                  content: String\\n                }\\n            \\\")\\n            .BindComplexType<TextMessage>()\\n            .AddResolver(\\\"Query\\\", \\\"messages\\\", (context) =>\\n            {\\n                // Omitted code for brevity\\n            });\\n    }\\n}\\n\")))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Note: We also have to register the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DatedMessage\"), \" interface manually, if we do not expose it through a field directly:\"), mdx(\"pre\", {\n    parentName: \"blockquote\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"services.AddType<DatedMessageType>()\\n\"))), mdx(\"h1\", {\n    \"id\": \"dynamic-fields\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h1\"\n  }, {\n    \"href\": \"#dynamic-fields\",\n    \"aria-label\": \"dynamic fields permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 512 512\",\n    \"width\": \"16\",\n    \"height\": \"16\"\n  }), \"\\n                        \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  })), \"\\n                      \")), \"Dynamic fields\"), mdx(\"p\", null, \"We can also declare additional dynamic fields (resolvers) on our interfaces.\"), mdx(ExampleTabs, {\n    mdxType: \"ExampleTabs\"\n  }, mdx(ExampleTabs.Annotation, null, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"[InterfaceType(\\\"Message\\\")]\\npublic interface IMessage\\n{\\n    User Author { get; set; }\\n\\n    DateTime GetCreatedAt();\\n}\\n\\npublic class TextMessage : IMessage\\n{\\n    public User Author { get; set; }\\n\\n    public DateTime GetCreatedAt()\\n    {\\n        // Omitted code for brevity\\n    }\\n}\\n\"))), mdx(ExampleTabs.Code, null, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"public interface IMessage\\n{\\n    User Author { get; set; }\\n\\n    DateTime GetCreatedAt();\\n}\\n\\npublic class MessageType : InterfaceType<IMessage>\\n{\\n    protected override void Configure(\\n        IInterfaceTypeDescriptor<IMessage> descriptor)\\n    {\\n        descriptor.Name(\\\"Message\\\");\\n    }\\n}\\n\\npublic class TextMessage : IMessage\\n{\\n    public User Author { get; set; }\\n\\n    public DateTime GetCreatedAt()\\n    {\\n        // Omitted code for brevity\\n    }\\n}\\n\\npublic class TextMessageType : ObjectType<TextMessage>\\n{\\n    protected override void Configure(\\n        IObjectTypeDescriptor<TextMessage> descriptor)\\n    {\\n        descriptor.Name(\\\"TextMessage\\\");\\n\\n        // The interface that is being implemented\\n        descriptor.Implements<MessageType>();\\n    }\\n}\\n\")), mdx(\"p\", null, \"If we do not want to pollute our interface with methods, we can also declare them directly on the interface type.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"public class MessageType : InterfaceType<IMessage>\\n{\\n    protected override void Configure(\\n        IInterfaceTypeDescriptor<IMessage> descriptor)\\n    {\\n        descriptor.Name(\\\"Message\\\");\\n\\n        // this is an additional field\\n        descriptor\\n            .Field(\\\"createdAt\\\")\\n            .Type<DateTimeType>();\\n    }\\n}\\n\\npublic class TextMessage : IMessage\\n{\\n    public User Author { get; set; }\\n}\\n\\npublic class TextMessageType : ObjectType<TextMessage>\\n{\\n    protected override void Configure(\\n        IObjectTypeDescriptor<TextMessage> descriptor)\\n    {\\n        descriptor.Name(\\\"TextMessage\\\");\\n\\n        // The interface that is being implemented\\n        descriptor.Implements<MessageType>();\\n\\n        descriptor\\n            .Field(\\\"createdAt\\\")\\n            .Resolve(context =>\\n            {\\n                // Omitted code for brevity\\n            });\\n    }\\n}\\n\")), mdx(\"p\", null, \"We do not have to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"descriptor\"), \", we could also create a new method or property named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CreatedAt\"), \" in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TextMessage\"), \" class.\"), mdx(\"p\", null, \"If we are dealing with lots of interface implementations, which all have the same logic for resolving a dynamic field, we can create an extension method for the field declarations.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"public static class MessageExtensions\\n{\\n    public static void AddCreatedAt<T>(this IObjectTypeDescriptor<T> descriptor)\\n        where T : IMessage\\n    {\\n        descriptor\\n            .Field(\\\"createdAt\\\")\\n            .Resolve(context =>\\n            {\\n                // Omitted code for brevity\\n            });\\n    }\\n}\\n\\npublic class TextMessageType : ObjectType<TextMessage>\\n{\\n    protected override void Configure(\\n        IObjectTypeDescriptor<TextMessage> descriptor)\\n    {\\n        descriptor.Name(\\\"TextMessage\\\");\\n\\n        // The interface that is being implemented\\n        descriptor.Implements<MessageType>();\\n\\n        // call to our extension method defined above\\n        descriptor.AddCreatedAt();\\n    }\\n}\\n\"))), mdx(ExampleTabs.Schema, null, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"public interface IMessage\\n{\\n    string Author { get; set; }\\n}\\n\\npublic class TextMessage : IMessage\\n{\\n    public string Author { get; set; }\\n}\\n\\npublic class Startup\\n{\\n    public void ConfigureServices(IServiceCollection services)\\n    {\\n        services\\n            .AddGraphQLServer()\\n            .AddDocumentFromString(@\\\"\\n                interface Message {\\n                  author: User\\n                  createdAt: DateTime!\\n                }\\n\\n                type TextMessage implements Message {\\n                  author: User\\n                  createdAt: DateTime!\\n                }\\n            \\\")\\n            .BindComplexType<TextMessage>()\\n            .AddResolver(\\\"TextMessage\\\", \\\"createdAt\\\", (context) =>\\n            {\\n                // Omitted code for brevity\\n            });\\n    }\\n}\\n\")))));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":1,"value":"Usage"},{"depth":1,"value":"Interfaces implementing interfaces"},{"depth":1,"value":"Dynamic fields"}]}},"site":{"siteMetadata":{"siteUrl":"https://chillicream.com","repositoryUrl":"https://github.com/ChilliCream/hotchocolate","tools":{"slack":"https://bit.ly/joinchilli"}}},"config":{"products":[{"path":"hotchocolate","title":"Hot Chocolate","description":"Build your own thin GraphQL API layer on top of any resource.","versions":[{"path":"","title":"v11 (latest)","items":[{"path":"index","title":"Introduction","items":null},{"path":"get-started","title":"Get Started","items":null},{"path":"defining-a-schema","title":"Defining a schema","items":[{"path":"index","title":"Overview"},{"path":"queries","title":"Queries"},{"path":"mutations","title":"Mutations"},{"path":"subscriptions","title":"Subscriptions"},{"path":"object-types","title":"Object Types"},{"path":"scalars","title":"Scalars"},{"path":"arguments","title":"Arguments"},{"path":"input-object-types","title":"Input Object Types"},{"path":"lists","title":"Lists"},{"path":"non-null","title":"Non-Null"},{"path":"enums","title":"Enums"},{"path":"interfaces","title":"Interfaces"},{"path":"unions","title":"Unions"},{"path":"extending-types","title":"Extending Types"},{"path":"directives","title":"Directives"},{"path":"documentation","title":"Documentation"},{"path":"versioning","title":"Versioning"}]},{"path":"fetching-data","title":"Fetching data","items":[{"path":"index","title":"Resolver"},{"path":"fetching-from-databases","title":"Fetching from Databases"},{"path":"fetching-from-rest","title":"Fetching from REST"},{"path":"dataloader","title":"DataLoader"},{"path":"pagination","title":"Pagination"},{"path":"filtering","title":"Filtering"},{"path":"sorting","title":"Sorting"},{"path":"projections","title":"Projections"}]},{"path":"distributed-schema","title":"Distributed Schemas","items":[{"path":"index","title":"Overview"},{"path":"schema-stitching","title":"Schema Stitching"},{"path":"schema-federations","title":"Schema Federations"},{"path":"schema-configuration","title":"Schema Configuration"}]},{"path":"integrations","title":"Integrations","items":[{"path":"index","title":"Overview"},{"path":"entity-framework","title":"Entity Framework"},{"path":"spatial-data","title":"Spatial Data"},{"path":"mongodb","title":"MongoDB"}]},{"path":"performance","title":"Performance","items":[{"path":"index","title":"Overview"},{"path":"persisted-queries","title":"Persisted queries"},{"path":"automatic-persisted-queries","title":"Automatic persisted queries"}]},{"path":"api-reference","title":"API Reference","items":[{"path":"index","title":"Overview"},{"path":"custom-attributes","title":"Custom Attributes"},{"path":"language","title":"Language"},{"path":"extending-filtering","title":"Extending Filtering"},{"path":"visitors","title":"Visitors"},{"path":"aspnetcore","title":"ASP.NET Core"},{"path":"dependency-injection","title":"Dependency Injection"},{"path":"executable","title":"Executable"},{"path":"apollo-tracing","title":"Apollo Tracing"},{"path":"migrate-from-10-to-11","title":"Migrate from 10.5 to 11.0"}]}]},{"path":"v10","title":"v10 (previous)","items":[{"path":"index","title":"Introduction","items":null},{"path":"code-first","title":"Code-First","items":null},{"path":"schema-first","title":"Schema-First","items":null},{"path":"schema","title":"Schema","items":[{"path":"index","title":"Schema"},{"path":"object-type","title":"Object Type"},{"path":"interface-type","title":"Interface Type"},{"path":"union-type","title":"Union Type"},{"path":"input-object-type","title":"Input Object Type"},{"path":"enum-type","title":"Enum Type"},{"path":"descriptions","title":"Schema Descriptions"},{"path":"custom-scalar-types","title":"Scalar Type Support"},{"path":"descriptor-attributes","title":"Descriptor Attributes"},{"path":"extending-types","title":"Custom Base Classes"},{"path":"directives","title":"Directives"},{"path":"resolvers","title":"Resolvers"},{"path":"relay","title":"Relay"},{"path":"conventions","title":"Conventions"},{"path":"options","title":"Schema Options"}]},{"path":"data-fetching","title":"Data Fetching","items":[{"path":"index","title":"Data Loaders"},{"path":"pagination","title":"Pagination"},{"path":"filters","title":"Filters"}]},{"path":"security","title":"Security","items":[{"path":"index","title":"Authorization"},{"path":"security","title":"Security"}]},{"path":"execution-engine","title":"Execution Engine","items":[{"path":"index","title":"Middleware"},{"path":"validation-rules","title":"Validation Rules"},{"path":"instrumentation","title":"Instrumentation"},{"path":"apollo-tracing","title":"Apollo Tracing"},{"path":"batching","title":"Batching"},{"path":"persisted-queries","title":"Persisted Queries"},{"path":"custom-context-data","title":"Custom Context Data"},{"path":"subscriptions","title":"Subscriptions"},{"path":"type-conversion","title":"Type Conversion"},{"path":"error-filter","title":"Error Filter"},{"path":"execution-options","title":"Execution Options"}]},{"path":"server","title":"Server","items":[{"path":"index","title":"ASP.NET"},{"path":"dependency-injection","title":"Dependency Injection"}]},{"path":"stitching","title":"Schema Stitching","items":null},{"path":"tooling","title":"Tooling","items":null},{"path":"advanced","title":"Advanced","items":[{"path":"index","title":"Parser"},{"path":"dotnet-cli","title":".NET CLI"}]},{"path":"tutorials","title":"Tutorials","items":[{"path":"index","title":"Entity Framework"}]},{"path":"examples","title":"Examples","items":[{"path":"index","title":"Star Wars"},{"path":"slack-clone","title":"Slack Clone"},{"path":"other-examples","title":"Other Examples"}]}]}]},{"path":"bananacakepop","title":"Banana Cake Pop","description":"Use this GUI to get deep insights from any GraphQL API.","versions":[{"path":"","title":"v1 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"strawberryshake","title":"Strawberry Shake","description":"The only GraphQL client you will every need in the .NET ecosystem.","versions":[{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null},{"path":"get-started","title":"Get Started","items":[{"path":"index","title":"Blazor"},{"path":"xamarin","title":"Xamarin"},{"path":"console","title":"Console"}]},{"path":"subscriptions","title":"Subscriptions","items":null},{"path":"tooling","title":"Tooling / CLI","items":null},{"path":"caching","title":"Caching","items":[{"path":"index","title":"Overview"},{"path":"entities","title":"Entities"},{"path":"invalidation","title":"Invalidation"}]},{"path":"performance","title":"Performance","items":[{"path":"index","title":"Overview"},{"path":"persisted-queries","title":"Persisted Queries"},{"path":"persisted-state","title":"Persisted State"}]},{"path":"networking","title":"Networking","items":[{"path":"index","title":"Protocols"},{"path":"authentication","title":"Authentication"}]},{"path":"scalars","title":"Scalars","items":null}]}]},{"path":"greendonut","title":"Green Donut","description":"Configure data loaders and caching for GraphQL endpoints.","versions":[{"path":"","title":"v11 (latest)","items":[{"path":"index","title":"Introduction","items":null}]},{"path":"v10","title":"v10 (previous)","items":[{"path":"index","title":"Introduction","items":null},{"path":"installation","title":"Installation","items":null},{"path":"usage","title":"Usage","items":null},{"path":"api","title":"API","items":null},{"path":"advanced-concepts","title":"Advanced Concepts","items":[{"path":"index","title":"Custom DataLoader"},{"path":"diagnostics","title":"Diagnostic Events"}]}]}]}]}},"pageContext":{"originPath":"hotchocolate/defining-a-schema/interfaces.md"}},"staticQueryHashes":["1014893094","2890364758","4218812017"]}