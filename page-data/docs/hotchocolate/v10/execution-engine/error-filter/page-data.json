{"componentChunkName":"component---src-templates-doc-page-template-tsx","path":"/docs/hotchocolate/v10/execution-engine/error-filter","result":{"data":{"file":{"childMarkdownRemark":{"fields":{"slug":"/hotchocolate/v10/execution-engine/error-filter/"},"frontmatter":{"title":"Error Filter"},"html":"<p>GraphQL errors in Hot Chocolate are passed to the query result by returning an instance of <code class=\"language-text\">IError</code> or an enumerable of <code class=\"language-text\">IError</code> in a field resolver.</p>\n<p>Moreover, you can throw a <code class=\"language-text\">QueryException</code> that will be be caught by the query engine and translated to a field error.</p>\n<p>One further way to raise an error are non-terminating field errors. This can be raised by using <code class=\"language-text\">IResolverContext.RaiseError</code>. So, with this you can provide a result and raise an error for your current field.</p>\n<blockquote>\n<p>If you do want to log errors head over to our diagnostic source <a href=\"/docs/hotchocolate/v10/execution-engine/instrumentation\">documentation</a> and see how you can hook up your logging framework of choice to it.</p>\n</blockquote>\n<h1 id=\"error-builder\" style=\"position:relative;\"><a href=\"#error-builder\" aria-label=\"error builder permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Error Builder</h1>\n<p>Since, errors can have a lot of properties depending on your case we have introduced a new error builder which provides a nice API without thousands of overloads.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"61290647145984310000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`return ErrorBuilder.New()\n    .SetMessage(&quot;This is my error.&quot;)\n    .SetCode(&quot;FOO_BAR&quot;)\n    .Build();`, `61290647145984310000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">return</span> ErrorBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">SetMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is my error.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">SetCode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FOO_BAR\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1 id=\"exceptions\" style=\"position:relative;\"><a href=\"#exceptions\" aria-label=\"exceptions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exceptions</h1>\n<p>If some other exception is thrown during the query execution, then the execution engine will create an instance of <code class=\"language-text\">IError</code> with the message <strong>Unexpected Execution Error</strong> and the actual exception assigned to the error. However, the exception details will not be serialized so by default the user will only see the error message <strong>Unexpected Execution Error</strong>.</p>\n<p>If you want to translate exceptions into errors with useful information then you can write an <code class=\"language-text\">IErrorFilter</code>.</p>\n<p>An error filter has to be registered with the execution builder or with your dependency injection.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"90314173838419500000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`IQueryExecuter executer = schema.MakeExecutable(builder =>\n    builder.UseDefaultPipeline(options)\n        .AddErrorFilter<MyErrorFilter>());`, `90314173838419500000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">IQueryExecuter</span> executer <span class=\"token operator\">=</span> schema<span class=\"token punctuation\">.</span><span class=\"token function\">MakeExecutable</span><span class=\"token punctuation\">(</span>builder <span class=\"token operator\">=></span>\n    builder<span class=\"token punctuation\">.</span><span class=\"token function\">UseDefaultPipeline</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddErrorFilter</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MyErrorFilter<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>OR</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"70251736419444910000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`services.AddErrorFilter<MyErrorFilter>();`, `70251736419444910000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddErrorFilter</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MyErrorFilter<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>It is also possible to just register the error filter as a delegate like the following.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"85248858426526520000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`IQueryExecuter executer = schema.MakeExecutable(builder =>\n    builder.UseDefaultPipeline(options)\n        .AddErrorFilter(error =>\n        {\n            if (error.Exception is NullReferenceException)\n            {\n                return error.WithCode(&quot;NullRef&quot;);\n            }\n            return error;\n        }));`, `85248858426526520000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">IQueryExecuter</span> executer <span class=\"token operator\">=</span> schema<span class=\"token punctuation\">.</span><span class=\"token function\">MakeExecutable</span><span class=\"token punctuation\">(</span>builder <span class=\"token operator\">=></span>\n    builder<span class=\"token punctuation\">.</span><span class=\"token function\">UseDefaultPipeline</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">AddErrorFilter</span><span class=\"token punctuation\">(</span>error <span class=\"token operator\">=></span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>Exception <span class=\"token keyword\">is</span> <span class=\"token class-name\">NullReferenceException</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> error<span class=\"token punctuation\">.</span><span class=\"token function\">WithCode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NullRef\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> error<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Since errors are immutable we have added some helper functions like <code class=\"language-text\">WithMessage</code>, <code class=\"language-text\">WithCode</code> and so on that create a new error with the desired properties. Moreover, you can create an error builder from an error and modify multiple properties and then rebuild the error object.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"10823410112347642000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`return ErrorBuilder.FromError(error)\n    .SetMessage(&quot;This is my error.&quot;)\n    .SetCode(&quot;FOO_BAR&quot;)\n    .Build();`, `10823410112347642000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">return</span> ErrorBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">FromError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">SetMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is my error.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">SetCode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FOO_BAR\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1 id=\"exception-details\" style=\"position:relative;\"><a href=\"#exception-details\" aria-label=\"exception details permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exception Details</h1>\n<p>In order to automatically add exception details to your GraphQL error you can switch the execution option to include exception details. By default we will switch this on if the debugger is attached. You can overwrite the behavior by setting the option.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"68498104010906410000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`SchemaBuilder.New()\n    ...\n    .Create()\n    .MakeExecutable(new QueryExecutionOptions\n    {\n        IncludeExceptionDetails = true\n    });`, `68498104010906410000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">SchemaBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">MakeExecutable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">QueryExecutionOptions</span>\n    <span class=\"token punctuation\">{</span>\n        IncludeExceptionDetails <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","tableOfContents":"<ul>\n<li><a href=\"/hotchocolate/v10/execution-engine/error-filter/#error-builder\">Error Builder</a></li>\n<li><a href=\"/hotchocolate/v10/execution-engine/error-filter/#exceptions\">Exceptions</a></li>\n<li><a href=\"/hotchocolate/v10/execution-engine/error-filter/#exception-details\">Exception Details</a></li>\n</ul>"}},"site":{"siteMetadata":{"siteUrl":"https://chillicream.com","repositoryUrl":"https://github.com/ChilliCream/hotchocolate","tools":{"slack":"https://join.slack.com/t/hotchocolategraphql/shared_invite/enQtNTA4NjA0ODYwOTQ0LTViMzA2MTM4OWYwYjIxYzViYmM0YmZhYjdiNzBjOTg2ZmU1YmMwNDZiYjUyZWZlMzNiMTk1OWUxNWZhMzQwY2Q"}}},"config":{"products":[{"path":"hotchocolate","title":"Hot Chocolate","description":"Build your own thin GraphQL API layer on top of any resource.","versions":[{"path":"v10","title":"v10 (stable)","items":[{"path":"index","title":"Introduction","items":null},{"path":"code-first","title":"Code-First","items":null},{"path":"schema-first","title":"Schema-First","items":null},{"path":"schema","title":"Schema","items":[{"path":"index","title":"Schema"},{"path":"object-type","title":"Object Type"},{"path":"interface-type","title":"Interface Type"},{"path":"union-type","title":"Union Type"},{"path":"input-object-type","title":"Input Object Type"},{"path":"enum-type","title":"Enum Type"},{"path":"descriptions","title":"Schema Descriptions"},{"path":"custom-scalar-types","title":"Scalar Type Support"},{"path":"descriptor-attributes","title":"Descriptor Attributes"},{"path":"extending-types","title":"Custom Base Classes"},{"path":"directives","title":"Directives"},{"path":"resolvers","title":"Resolvers"},{"path":"relay","title":"Relay"},{"path":"conventions","title":"Conventions"},{"path":"options","title":"Schema Options"}]},{"path":"data-fetching","title":"Data Fetching","items":[{"path":"index","title":"Data Loaders"},{"path":"pagination","title":"Pagination"},{"path":"filters","title":"Filters"}]},{"path":"security","title":"Security","items":[{"path":"index","title":"Authorization"},{"path":"security","title":"Security"}]},{"path":"execution-engine","title":"Execution Engine","items":[{"path":"index","title":"Middleware"},{"path":"validation-rules","title":"Validation Rules"},{"path":"instrumentation","title":"Instrumentation"},{"path":"apollo-tracing","title":"Apollo Tracing"},{"path":"batching","title":"Batching"},{"path":"persisted-queries","title":"Persisted Queries"},{"path":"custom-context-data","title":"Custom Context Data"},{"path":"subscriptions","title":"Subscriptions"},{"path":"type-conversion","title":"Type Conversion"},{"path":"error-filter","title":"Error Filter"},{"path":"execution-options","title":"Execution Options"}]},{"path":"server","title":"Server","items":[{"path":"index","title":"ASP.Net"},{"path":"dependency-injection","title":"Dependency Injection"}]},{"path":"stitching","title":"Schema Stitching","items":null},{"path":"tooling","title":"Tooling","items":null},{"path":"advanced","title":"Advanced","items":[{"path":"index","title":"Parser"},{"path":"dotnet-cli","title":".Net CLI"}]},{"path":"tutorials","title":"Tutorials","items":[{"path":"index","title":"MongoDB"}]},{"path":"examples","title":"Examples","items":[{"path":"index","title":"Star Wars"},{"path":"slack-clone","title":"Slack Clone"},{"path":"other-examples","title":"Other Examples"}]}]},{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null},{"path":"getting-started","title":"Getting Started","items":null},{"path":"defining-a-schema","title":"Defining a schema","items":[{"path":"index","title":"Schema basics"},{"path":"versioning","title":"Versioning"},{"path":"unions-and-interfaces","title":"Unions and Interfaces"},{"path":"scalars","title":"Scalars"},{"path":"directives","title":"Directives"}]},{"path":"fetching-data","title":"Fetching data","items":[{"path":"index","title":"Resolver"},{"path":"fetching-from-databases","title":"Fetching from Databases"},{"path":"fetching-from-rest","title":"Fetching from REST"},{"path":"dataloader","title":"DataLoader"},{"path":"pagination","title":"Pagination"},{"path":"filtering","title":"Filtering"},{"path":"sorting","title":"Sorting"}]},{"path":"api-reference","title":"API Reference","items":[{"path":"index","title":"Overview"},{"path":"language","title":"Lanugage"},{"path":"visitors","title":"Visitors"}]}]}]},{"path":"bananacakepop","title":"Banana Cake Pop","description":"Use this GUI to get deep insights from any GraphQL API.","versions":[{"path":"","title":"v1 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"strawberryshake","title":"Strawberry Shake","description":"Generate a unique GraphQL client for .Net to fetch data from any GraphQL API.","versions":[{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"marshmallowpie","title":"Marshmallow Pie","description":"Configure a GraphQL registry to keep track of any GraphQL server and client.","versions":[{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"greendonut","title":"Green Donut","description":"Configure data loaders and caching for GraphQL endpoints.","versions":[{"path":"v10","title":"v10 (stable)","items":[{"path":"index","title":"Introduction","items":null},{"path":"installation","title":"Installation","items":null},{"path":"usage","title":"Usage","items":null},{"path":"api","title":"API","items":null},{"path":"advanced-concepts","title":"Advanced Concepts","items":[{"path":"index","title":"Custom DataLoader"},{"path":"diagnostics","title":"Diagnostic Events"}]}]},{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]}]}},"pageContext":{"originPath":"hotchocolate/v10/execution-engine/error-filter.md"}},"staticQueryHashes":["2890364758","4218812017","63159454"]}