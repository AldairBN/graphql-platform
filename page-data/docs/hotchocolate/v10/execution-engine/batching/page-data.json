{"componentChunkName":"component---src-templates-doc-page-template-tsx","path":"/docs/hotchocolate/v10/execution-engine/batching","result":{"data":{"file":{"childMarkdownRemark":{"fields":{"slug":"/hotchocolate/v10/execution-engine/batching/"},"frontmatter":{"title":"Batching"},"html":"<p>Hot Chocolate supports operation batching and request batching. But before we get into the details lets reflect on what batching is and what you can do with it.</p>\n<p><a href=\"https://youtu.be/ViXL0YQnioU?t=626\"><img src=\"/docs/shared/batching.png\" alt=\"Batching\"></a></p>\n<h1 id=\"introduction\" style=\"position:relative;\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h1>\n<p>With batching we have added the capability run a sequence of operations. The batch is executed in order and the results of each request is yielded to the user once it has been computed. This means that we do not have to wait for the complete batch to be completed and can use the results as they are written to the response stream.</p>\n<p>This means that with batching we are able to delay expensive queries. Essentially, we can do something that we also can do with <code class=\"language-text\">@defer</code>.</p>\n<p>Let's say we had a news site and wanted to fetch the stories and for each story the first two comments.</p>\n<p>We could do that with a single query like the following:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"83562795927662760000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`query NewsFeed {\n  stories {\n    id @export(as: &quot;ids&quot;)\n    actor\n    message\n    comments(first: 2) {\n      actor\n      message\n    }\n  }\n}`, `83562795927662760000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> NewsFeed <span class=\"token punctuation\">{</span>\n  stories <span class=\"token punctuation\">{</span>\n    id <span class=\"token directive function\">@export</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">as</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"ids\"</span><span class=\"token punctuation\">)</span>\n    actor\n    message\n    comments<span class=\"token punctuation\">(</span><span class=\"token attr-name\">first</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      actor\n      message\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>But in our case, we want the story content to be available really, really quickly and we do not mind if the comments appear a little later. So, what we could do here is to break this query into two and send them in as batch.</p>\n<p><code class=\"language-text\">POST /graphql?batchOperations=[NewsFeed, StoryComments]</code></p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"35118502648594020000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`query NewsFeed {\n  stories {\n    id @export(as: &quot;ids&quot;)\n    actor\n    message\n  }\n}\n\nquery StoryComments {\n  stories(ids: \\$ids) {\n    comments(first: 2) {\n      actor\n      message\n    }\n  }\n}`, `35118502648594020000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> NewsFeed <span class=\"token punctuation\">{</span>\n  stories <span class=\"token punctuation\">{</span>\n    id <span class=\"token directive function\">@export</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">as</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"ids\"</span><span class=\"token punctuation\">)</span>\n    actor\n    message\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">query</span> StoryComments <span class=\"token punctuation\">{</span>\n  stories<span class=\"token punctuation\">(</span><span class=\"token attr-name\">ids</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$ids</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    comments<span class=\"token punctuation\">(</span><span class=\"token attr-name\">first</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      actor\n      message\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The key to do this is our <code class=\"language-text\">@export</code> directive which is able to export results as variables for the next queries in the batch. Each query can add to the variables collection.</p>\n<p>Batching combined with <code class=\"language-text\">@export</code> becomes really interesting if you think about mutations. With this you can create a sequence of mutations that should run on your server and each result of a mutation can become a input for the next mutation in the chain. This allows you to efficiently write flows that run asynchronously on the server.</p>\n<h1 id=\"operation-batching\" style=\"position:relative;\"><a href=\"#operation-batching\" aria-label=\"operation batching permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Operation Batching</h1>\n<p>With operation batching you basically send in the same request as before. You can either opt to send plain GraphQL or send in the GraphQL-JSON-request.</p>\n<blockquote>\n<p>More about the request structure can be read <a href=\"/docs/hotchocolate/v10/server\">here</a>.</p>\n</blockquote>\n<p>Since we are sending in multiple operations, we specify the sequence with as a query parameter:</p>\n<p><code class=\"language-text\">POST /graphql?batchOperations=[Operation1, Operation2, Operation3, Operation4]</code></p>\n<p>Currently we write the result as JSON-array into the HTTP-response-stream. Each result is written to the response stream as it appears so you could grab each element as it appears. If you want to change the serialization format you can implement <code class=\"language-text\">IResponseStreamSerializer</code> and register you custom serializer with the dependency injection.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"54603684310428810000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`services.AddResponseStreamSerializer<CustomResponseStreamSerializer>();`, `54603684310428810000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddResponseStreamSerializer</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>CustomResponseStreamSerializer<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1 id=\"request-batching\" style=\"position:relative;\"><a href=\"#request-batching\" aria-label=\"request batching permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Request Batching</h1>\n<p>Request batching is essentially a way to send in multiple GraphQL-JSON-requests. These requests are basically wrapped into a JSON-array and send in the same way as the standard GraphQL-JSON-request.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"46628149106983210000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`[\n    {\n        # The query document.\n        &quot;query&quot;: &quot;query getHero { hero { name } }&quot;,\n\n        # The name of the operation that shall be executed.\n        &quot;operationName&quot;: &quot;getHero&quot;,\n\n        # A key under which a query document was saved on the server.\n        &quot;id&quot;: &quot;W5vrrAIypCbniaIYeroNnw==&quot;,\n\n        # The variable values for this request.\n        &quot;variables&quot;: {\n            &quot;a&quot;: 1,\n            &quot;b&quot;: &quot;abc&quot;\n        },\n\n        # Custom properties that can be passed to the execution engine context data.\n        &quot;extensions&quot;: {\n            &quot;a&quot;: 1,\n            &quot;b&quot;: &quot;abc&quot;\n        }\n    },\n    {\n        # The query document.\n        &quot;query&quot;: &quot;query getHero { hero { name } }&quot;,\n\n        # The name of the operation that shall be executed.\n        &quot;operationName&quot;: &quot;getHero&quot;,\n\n        # A key under which a query document was saved on the server.\n        &quot;id&quot;: &quot;W5vrrAIypCbniaIYeroNnw==&quot;,\n\n        # The variable values for this request.\n        &quot;variables&quot;: {\n            &quot;a&quot;: 1,\n            &quot;b&quot;: &quot;abc&quot;\n        },\n\n        # Custom properties that can be passed to the execution engine context data.\n        &quot;extensions&quot;: {\n            &quot;a&quot;: 1,\n            &quot;b&quot;: &quot;abc&quot;\n        }\n    },\n]`, `46628149106983210000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        # The query document.\n        <span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"query getHero { hero { name } }\"</span><span class=\"token punctuation\">,</span>\n\n        # The name of the operation that shall be executed.\n        <span class=\"token property\">\"operationName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"getHero\"</span><span class=\"token punctuation\">,</span>\n\n        # A key under which a query document was saved on the server.\n        <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"W5vrrAIypCbniaIYeroNnw==\"</span><span class=\"token punctuation\">,</span>\n\n        # The variable values for this request.\n        <span class=\"token property\">\"variables\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"a\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"b\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"abc\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n        # Custom properties that can be passed to the execution engine context data.\n        <span class=\"token property\">\"extensions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"a\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"b\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"abc\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        # The query document.\n        <span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"query getHero { hero { name } }\"</span><span class=\"token punctuation\">,</span>\n\n        # The name of the operation that shall be executed.\n        <span class=\"token property\">\"operationName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"getHero\"</span><span class=\"token punctuation\">,</span>\n\n        # A key under which a query document was saved on the server.\n        <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"W5vrrAIypCbniaIYeroNnw==\"</span><span class=\"token punctuation\">,</span>\n\n        # The variable values for this request.\n        <span class=\"token property\">\"variables\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"a\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"b\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"abc\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n        # Custom properties that can be passed to the execution engine context data.\n        <span class=\"token property\">\"extensions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"a\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"b\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"abc\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<h1 id=\"export-directive\" style=\"position:relative;\"><a href=\"#export-directive\" aria-label=\"export directive permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Export Directive</h1>\n<p>The export directive allows to export the results of a query into a global variable pool from which each query in the sequence can pull data in.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"83871783787869880000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`query NewsFeed {\n  stories {\n    id @export(as: &quot;ids&quot;)\n    actor\n    message\n  }\n}\n\nquery StoryComments {\n  stories(ids: \\$ids) {\n    comments(first: 2) {\n      actor\n      message\n    }\n  }\n}`, `83871783787869880000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> NewsFeed <span class=\"token punctuation\">{</span>\n  stories <span class=\"token punctuation\">{</span>\n    id <span class=\"token directive function\">@export</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">as</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"ids\"</span><span class=\"token punctuation\">)</span>\n    actor\n    message\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">query</span> StoryComments <span class=\"token punctuation\">{</span>\n  stories<span class=\"token punctuation\">(</span><span class=\"token attr-name\">ids</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$ids</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    comments<span class=\"token punctuation\">(</span><span class=\"token attr-name\">first</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      actor\n      message\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the above example we are exporting the <code class=\"language-text\">id</code> field result into a variable <code class=\"language-text\">ids</code>. Since we are exporting multiple ids the variable is essentially becoming a list. In our example we will get a list of <code class=\"language-text\">System.String</code>. As we collect the variables, we will hold them as the native .NET type and only coerce them once we have to create the variable inputs for the next operation.</p>\n<p>As can be seen in the above example we have not declared any variable for the next operation and are just using <code class=\"language-text\">$ids</code>. While we still could declare the variable explicitly, we can infer the variable declaration. The query engine will essentially rewrite the query.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"81660538208475380000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`query StoryComments(\\$ids: [ID!]) {\n  stories(ids: \\$ids) {\n    comments(first: 2) {\n      actor\n      message\n    }\n  }\n}`, `81660538208475380000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> StoryComments<span class=\"token punctuation\">(</span><span class=\"token variable\">$ids</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>ID<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  stories<span class=\"token punctuation\">(</span><span class=\"token attr-name\">ids</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$ids</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    comments<span class=\"token punctuation\">(</span><span class=\"token attr-name\">first</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      actor\n      message\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can also export objects, so you are not limited to scalars.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"81888959840858130000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`query NewsFeed {\n  stories @export {\n    id\n    actor\n    message\n  }\n}`, `81888959840858130000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> NewsFeed <span class=\"token punctuation\">{</span>\n  stories <span class=\"token directive function\">@export</span> <span class=\"token punctuation\">{</span>\n    id\n    actor\n    message\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the above example we would export a list of story objects that would be coerced and converted to fit into an input object.</p>\n<h1 id=\"ibatchqueryexecutor\" style=\"position:relative;\"><a href=\"#ibatchqueryexecutor\" aria-label=\"ibatchqueryexecutor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IBatchQueryExecutor</h1>\n<p>If you want to write tests or implement your own batching middleware, then you just have to inject <code class=\"language-text\">IBatchQueryExecutor</code>. The batch executor will return a <code class=\"language-text\">IBatchQueryExecutionResult</code> which is essentially a <code class=\"language-text\">IResponseStream</code>.</p>\n<p>The response stream allows to read the results from the stream as they become available.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"26217618756761610000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`while (!responseStream.IsCompleted)\n{\n    IReadOnlyQueryResult queryResult = await responseStream.ReadAsync();\n    Console.WriteLine(query.ToJson());\n}`, `26217618756761610000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>responseStream<span class=\"token punctuation\">.</span>IsCompleted<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">IReadOnlyQueryResult</span> queryResult <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> responseStream<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">.</span><span class=\"token function\">ToJson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","tableOfContents":"<ul>\n<li><a href=\"/hotchocolate/v10/execution-engine/batching/#introduction\">Introduction</a></li>\n<li><a href=\"/hotchocolate/v10/execution-engine/batching/#operation-batching\">Operation Batching</a></li>\n<li><a href=\"/hotchocolate/v10/execution-engine/batching/#request-batching\">Request Batching</a></li>\n<li><a href=\"/hotchocolate/v10/execution-engine/batching/#export-directive\">Export Directive</a></li>\n<li><a href=\"/hotchocolate/v10/execution-engine/batching/#ibatchqueryexecutor\">IBatchQueryExecutor</a></li>\n</ul>"}},"site":{"siteMetadata":{"siteUrl":"https://chillicream.com","repositoryUrl":"https://github.com/ChilliCream/hotchocolate","tools":{"slack":"https://join.slack.com/t/hotchocolategraphql/shared_invite/enQtNTA4NjA0ODYwOTQ0LTViMzA2MTM4OWYwYjIxYzViYmM0YmZhYjdiNzBjOTg2ZmU1YmMwNDZiYjUyZWZlMzNiMTk1OWUxNWZhMzQwY2Q"}}},"config":{"products":[{"path":"hotchocolate","title":"Hot Chocolate","description":"Build your own thin GraphQL API layer on top of any resource.","versions":[{"path":"v10","title":"v10 (stable)","items":[{"path":"index","title":"Introduction","items":null},{"path":"code-first","title":"Code-First","items":null},{"path":"schema-first","title":"Schema-First","items":null},{"path":"schema","title":"Schema","items":[{"path":"index","title":"Schema"},{"path":"object-type","title":"Object Type"},{"path":"interface-type","title":"Interface Type"},{"path":"union-type","title":"Union Type"},{"path":"input-object-type","title":"Input Object Type"},{"path":"enum-type","title":"Enum Type"},{"path":"descriptions","title":"Schema Descriptions"},{"path":"custom-scalar-types","title":"Scalar Type Support"},{"path":"descriptor-attributes","title":"Descriptor Attributes"},{"path":"extending-types","title":"Custom Base Classes"},{"path":"directives","title":"Directives"},{"path":"resolvers","title":"Resolvers"},{"path":"relay","title":"Relay"},{"path":"conventions","title":"Conventions"},{"path":"options","title":"Schema Options"}]},{"path":"data-fetching","title":"Data Fetching","items":[{"path":"index","title":"Data Loaders"},{"path":"pagination","title":"Pagination"},{"path":"filters","title":"Filters"}]},{"path":"security","title":"Security","items":[{"path":"index","title":"Authorization"},{"path":"security","title":"Security"}]},{"path":"execution-engine","title":"Execution Engine","items":[{"path":"index","title":"Middleware"},{"path":"validation-rules","title":"Validation Rules"},{"path":"instrumentation","title":"Instrumentation"},{"path":"apollo-tracing","title":"Apollo Tracing"},{"path":"batching","title":"Batching"},{"path":"persisted-queries","title":"Persisted Queries"},{"path":"custom-context-data","title":"Custom Context Data"},{"path":"subscriptions","title":"Subscriptions"},{"path":"type-conversion","title":"Type Conversion"},{"path":"error-filter","title":"Error Filter"},{"path":"execution-options","title":"Execution Options"}]},{"path":"server","title":"Server","items":[{"path":"index","title":"ASP.Net"},{"path":"dependency-injection","title":"Dependency Injection"}]},{"path":"stitching","title":"Schema Stitching","items":null},{"path":"tooling","title":"Tooling","items":null},{"path":"advanced","title":"Advanced","items":[{"path":"index","title":"Parser"},{"path":"dotnet-cli","title":".Net CLI"}]},{"path":"tutorials","title":"Tutorials","items":[{"path":"index","title":"MongoDB"}]},{"path":"examples","title":"Examples","items":[{"path":"index","title":"Star Wars"},{"path":"slack-clone","title":"Slack Clone"},{"path":"other-examples","title":"Other Examples"}]}]},{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null},{"path":"getting-started","title":"Getting Started","items":null},{"path":"defining-a-schema","title":"Defining a schema","items":[{"path":"index","title":"Schema basics"},{"path":"versioning","title":"Versioning"},{"path":"unions-and-interfaces","title":"Unions and Interfaces"},{"path":"scalars","title":"Scalars"},{"path":"directives","title":"Directives"}]},{"path":"fetching-data","title":"Fetching data","items":[{"path":"index","title":"Resolver"},{"path":"fetching-from-databases","title":"Fetching from Databases"},{"path":"fetching-from-rest","title":"Fetching from REST"},{"path":"dataloader","title":"DataLoader"},{"path":"pagination","title":"Pagination"},{"path":"filtering","title":"Filtering"},{"path":"sorting","title":"Sorting"}]},{"path":"api-reference","title":"API Reference","items":[{"path":"index","title":"Overview"},{"path":"language","title":"Lanugage"},{"path":"visitors","title":"Visitors"}]}]}]},{"path":"bananacakepop","title":"Banana Cake Pop","description":"Use this GUI to get deep insights from any GraphQL API.","versions":[{"path":"","title":"v1 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"strawberryshake","title":"Strawberry Shake","description":"Generate a unique GraphQL client for .Net to fetch data from any GraphQL API.","versions":[{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"marshmallowpie","title":"Marshmallow Pie","description":"Configure a GraphQL registry to keep track of any GraphQL server and client.","versions":[{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"greendonut","title":"Green Donut","description":"Configure data loaders and caching for GraphQL endpoints.","versions":[{"path":"v10","title":"v10 (stable)","items":[{"path":"index","title":"Introduction","items":null},{"path":"installation","title":"Installation","items":null},{"path":"usage","title":"Usage","items":null},{"path":"api","title":"API","items":null},{"path":"advanced-concepts","title":"Advanced Concepts","items":[{"path":"index","title":"Custom DataLoader"},{"path":"diagnostics","title":"Diagnostic Events"}]}]},{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]}]}},"pageContext":{"originPath":"hotchocolate/v10/execution-engine/batching.md"}},"staticQueryHashes":["2890364758","4218812017","63159454"]}