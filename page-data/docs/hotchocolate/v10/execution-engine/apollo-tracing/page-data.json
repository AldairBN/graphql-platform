{"componentChunkName":"component---src-templates-doc-page-template-tsx","path":"/docs/hotchocolate/v10/execution-engine/apollo-tracing","result":{"data":{"file":{"childMarkdownRemark":{"fields":{"slug":"/hotchocolate/v10/execution-engine/apollo-tracing/"},"frontmatter":{"title":"Apollo Tracing"},"html":"<p><em>Apollo Tracing</em> is a <a href=\"https://github.com/apollographql/apollo-tracing\">performance tracing specification</a> for <em>GraphQL</em> servers.\nIt's not part of the actual <em>GraphQL</em> <a href=\"https://facebook.github.io/graphql\">specification</a> itself, but there is a\ncommon agreement in the <em>GraphQL</em> community that this should be supported by\nall <em>GraphQL</em> servers.</p>\n<blockquote>\n<p>Tracing results are by default hidden in <strong>Playground</strong>. You have to either click on the <em>TRACING</em> button in the bottom right corner or enable it with the <code class=\"language-text\">tracing.hideTracingResponse</code> flag in the settings.</p>\n</blockquote>\n<h1 id=\"enabling-apollo-tracing\" style=\"position:relative;\"><a href=\"#enabling-apollo-tracing\" aria-label=\"enabling apollo tracing permalink\" class=\"anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"16\" height=\"16\"><path d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"/></svg></a>Enabling Apollo Tracing</h1>\n<p>Due to built-in <em>Apollo Tracing</em> support it's actually very simple to enable\nthis feature. There is an option named <code class=\"language-text\">TracingPreference</code> which takes one of\nthree states. In the following table we find all of these states explained.</p>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">Never</code></td>\n<td><em>Apollo Tracing</em> is disabled; this is the default value.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">OnDemand</code></td>\n<td><em>Apollo Tracing</em> is enabled partially which means that it traces only by passing a special header to a specific query request.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Always</code></td>\n<td><em>Apollo Tracing</em> is enabled completely which means all query requests will be traced automatically.</td>\n</tr>\n</tbody>\n</table>\n<p>When creating your GraphQL schema, we just need to add an additional option\nobject to enable <em>Apollo Tracing</em>. By default, as explained in the above table\n<em>Apollo Tracing</em> is disabled. Let's take a look at the first example which\ndescribes how <em>Apollo Tracing</em> is enabled permanently.</p>\n<p><strong>Enable <em>Apollo Tracing</em> permanently</strong></p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"31809158179821638000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        // Registering services / repositories here; omitted for brevity\n\n        services.AddGraphQL(sp => SchemaBuilder.New()\n          .AddQueryType<QueryType>()\n          // Registering schema types and so on here; omitted for brevity\n          .Create(),\n          new QueryExecutionOptions\n          {\n              TracingPreference = TracingPreference.Always\n          });\n    }\n\n    // Code omitted for brevity\n}`, `31809158179821638000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Startup</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ConfigureServices</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Registering services / repositories here; omitted for brevity</span>\n\n        services<span class=\"token punctuation\">.</span><span class=\"token function\">AddGraphQL</span><span class=\"token punctuation\">(</span>sp <span class=\"token operator\">=></span> SchemaBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddQueryType</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>QueryType<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token comment\">// Registering schema types and so on here; omitted for brevity</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">QueryExecutionOptions</span>\n          <span class=\"token punctuation\">{</span>\n              TracingPreference <span class=\"token operator\">=</span> TracingPreference<span class=\"token punctuation\">.</span>Always\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Code omitted for brevity</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>By setting the <code class=\"language-text\">TracingPreference</code> to <code class=\"language-text\">TracingPreference.Always</code>, we enabled\n<em>Apollo Tracing</em> permanently; nothing else to do here. Done.</p>\n<p><strong>Enable <em>Apollo Tracing</em> per query request</strong></p>\n<p>First, we need to enable <em>Apollo Tracing</em> on the server-side. It's almost\nidentical to the above example.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"74914973659578240000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        // Registering services / repositories here; omitted for brevity\n\n        services.AddGraphQL(sp => SchemaBuilder.New()\n          .AddQueryType<QueryType>()\n          // Registering schema types and so on here; omitted for brevity\n          .Create(),\n          new QueryExecutionOptions\n          {\n              TracingPreference = TracingPreference.OnDemand\n          });\n    }\n\n    // Code omitted for brevity\n}`, `74914973659578240000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Startup</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ConfigureServices</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Registering services / repositories here; omitted for brevity</span>\n\n        services<span class=\"token punctuation\">.</span><span class=\"token function\">AddGraphQL</span><span class=\"token punctuation\">(</span>sp <span class=\"token operator\">=></span> SchemaBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddQueryType</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>QueryType<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token comment\">// Registering schema types and so on here; omitted for brevity</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">QueryExecutionOptions</span>\n          <span class=\"token punctuation\">{</span>\n              TracingPreference <span class=\"token operator\">=</span> TracingPreference<span class=\"token punctuation\">.</span>OnDemand\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Code omitted for brevity</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Second, we have to pass an HTTP header <code class=\"language-text\">GraphQL-Tracing=1</code> on the client-side\nwith every query request we're interested in.</p>\n<p>When not using the Hot Chocolate ASP.NET Core or Framework stack we have to\nimplement the mapping from the HTTP header to the query request property by\nour self which isn't very difficult actually. See how it's solved in the\nHot Chocolate <a href=\"https://github.com/ChilliCream/hotchocolate/blob/master/src/HotChocolate/AspNetCore/src/AspNetCore.Abstractions/QueryMiddlewareBase.cs#L146-L149\">ASP.NET Core and Framework stack</a>.</p>","tableOfContents":"<ul>\n<li><a href=\"/hotchocolate/v10/execution-engine/apollo-tracing/#enabling-apollo-tracing\">Enabling Apollo Tracing</a></li>\n</ul>"}},"site":{"siteMetadata":{"siteUrl":"https://chillicream.com","repositoryUrl":"https://github.com/ChilliCream/hotchocolate","tools":{"slack":"https://join.slack.com/t/hotchocolategraphql/shared_invite/enQtNTA4NjA0ODYwOTQ0LTViMzA2MTM4OWYwYjIxYzViYmM0YmZhYjdiNzBjOTg2ZmU1YmMwNDZiYjUyZWZlMzNiMTk1OWUxNWZhMzQwY2Q"}}},"config":{"products":[{"path":"hotchocolate","title":"Hot Chocolate","description":"Build your own thin GraphQL API layer on top of any resource.","versions":[{"path":"v10","title":"v10 (stable)","items":[{"path":"index","title":"Introduction","items":null},{"path":"code-first","title":"Code-First","items":null},{"path":"schema-first","title":"Schema-First","items":null},{"path":"schema","title":"Schema","items":[{"path":"index","title":"Schema"},{"path":"object-type","title":"Object Type"},{"path":"interface-type","title":"Interface Type"},{"path":"union-type","title":"Union Type"},{"path":"input-object-type","title":"Input Object Type"},{"path":"enum-type","title":"Enum Type"},{"path":"descriptions","title":"Schema Descriptions"},{"path":"custom-scalar-types","title":"Scalar Type Support"},{"path":"descriptor-attributes","title":"Descriptor Attributes"},{"path":"extending-types","title":"Custom Base Classes"},{"path":"directives","title":"Directives"},{"path":"resolvers","title":"Resolvers"},{"path":"relay","title":"Relay"},{"path":"conventions","title":"Conventions"},{"path":"options","title":"Schema Options"}]},{"path":"data-fetching","title":"Data Fetching","items":[{"path":"index","title":"Data Loaders"},{"path":"pagination","title":"Pagination"},{"path":"filters","title":"Filters"}]},{"path":"security","title":"Security","items":[{"path":"index","title":"Authorization"},{"path":"security","title":"Security"}]},{"path":"execution-engine","title":"Execution Engine","items":[{"path":"index","title":"Middleware"},{"path":"validation-rules","title":"Validation Rules"},{"path":"instrumentation","title":"Instrumentation"},{"path":"apollo-tracing","title":"Apollo Tracing"},{"path":"batching","title":"Batching"},{"path":"persisted-queries","title":"Persisted Queries"},{"path":"custom-context-data","title":"Custom Context Data"},{"path":"subscriptions","title":"Subscriptions"},{"path":"type-conversion","title":"Type Conversion"},{"path":"error-filter","title":"Error Filter"},{"path":"execution-options","title":"Execution Options"}]},{"path":"server","title":"Server","items":[{"path":"index","title":"ASP.Net"},{"path":"dependency-injection","title":"Dependency Injection"}]},{"path":"stitching","title":"Schema Stitching","items":null},{"path":"tooling","title":"Tooling","items":null},{"path":"advanced","title":"Advanced","items":[{"path":"index","title":"Parser"},{"path":"dotnet-cli","title":".Net CLI"}]},{"path":"tutorials","title":"Tutorials","items":[{"path":"index","title":"Entity Framework"}]},{"path":"examples","title":"Examples","items":[{"path":"index","title":"Star Wars"},{"path":"slack-clone","title":"Slack Clone"},{"path":"other-examples","title":"Other Examples"}]}]},{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null},{"path":"get-started","title":"Get Started","items":null},{"path":"defining-a-schema","title":"Defining a schema","items":[{"path":"index","title":"Schema basics"},{"path":"versioning","title":"Versioning"},{"path":"unions-and-interfaces","title":"Unions and Interfaces"},{"path":"scalars","title":"Scalars"},{"path":"directives","title":"Directives"}]},{"path":"fetching-data","title":"Fetching data","items":[{"path":"index","title":"Resolver"},{"path":"fetching-from-databases","title":"Fetching from Databases"},{"path":"fetching-from-rest","title":"Fetching from REST"},{"path":"dataloader","title":"DataLoader"},{"path":"pagination","title":"Pagination"},{"path":"filtering","title":"Filtering"},{"path":"sorting","title":"Sorting"},{"path":"projections","title":"Projections"}]},{"path":"integrations","title":"Integrations","items":[{"path":"entity-framework","title":"Entity Framework"}]},{"path":"api-reference","title":"API Reference","items":[{"path":"index","title":"Overview"},{"path":"language","title":"Lanugage"},{"path":"visitors","title":"Visitors"},{"path":"aspnetcore","title":"ASP.NET Core"},{"path":"migrate-from-10-to-11","title":"Migrate from 10.5 to 11.0"}]}]}]},{"path":"bananacakepop","title":"Banana Cake Pop","description":"Use this GUI to get deep insights from any GraphQL API.","versions":[{"path":"","title":"v1 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"strawberryshake","title":"Strawberry Shake","description":"Generate a unique GraphQL client for .Net to fetch data from any GraphQL API.","versions":[{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"marshmallowpie","title":"Marshmallow Pie","description":"Configure a GraphQL registry to keep track of any GraphQL server and client.","versions":[{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"greendonut","title":"Green Donut","description":"Configure data loaders and caching for GraphQL endpoints.","versions":[{"path":"v10","title":"v10 (stable)","items":[{"path":"index","title":"Introduction","items":null},{"path":"installation","title":"Installation","items":null},{"path":"usage","title":"Usage","items":null},{"path":"api","title":"API","items":null},{"path":"advanced-concepts","title":"Advanced Concepts","items":[{"path":"index","title":"Custom DataLoader"},{"path":"diagnostics","title":"Diagnostic Events"}]}]},{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]}]}},"pageContext":{"originPath":"hotchocolate/v10/execution-engine/apollo-tracing.md"}},"staticQueryHashes":["2890364758","4218812017","63159454"]}