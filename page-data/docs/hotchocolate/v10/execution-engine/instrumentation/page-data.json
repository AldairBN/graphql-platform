{"componentChunkName":"component---src-templates-doc-page-template-tsx","path":"/docs/hotchocolate/v10/execution-engine/instrumentation","result":{"data":{"file":{"childMarkdownRemark":{"fields":{"slug":"/hotchocolate/v10/execution-engine/instrumentation/"},"frontmatter":{"title":"Instrumentation"},"html":"<p>The Hot Chocolate instrumentation allows you to receive internal instrumentation events and process them further. Instrumentation events are provided through a <code class=\"language-text\">DiagnosticSource</code>.</p>\n<p>Using Microsoft`s <code class=\"language-text\">DiagnosticSource</code> API allows us to provide rich events without compromising on information detail.</p>\n<p>As a developer using Hot Chocolate we can subscribe to those events and delegate them either to our logging provider or to another tracing infrastructure for further processing.</p>\n<p>This allows us to just take the information we need for a certain logging solution and for instance craft the events provided by Hot Chocolate into logging messages that fit our project.</p>\n<h1 id=\"events\" style=\"position:relative;\"><a href=\"#events\" aria-label=\"events permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Events</h1>\n<p>First let us have a look at what events Hot Chocolate currently provides and what they mean. Later we will walk you through how to setup an <code class=\"language-text\">IDiagnosticObserver</code>.</p>\n<h2 id=\"query-events\" style=\"position:relative;\"><a href=\"#query-events\" aria-label=\"query events permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Query Events</h2>\n<p>Query events are raised per request. This means that for each query request that we fire up against a Hot Chocolate one query event is raised.</p>\n<p>The following query events are available:</p>\n<h2 id=\"start-query\" style=\"position:relative;\"><a href=\"#start-query\" aria-label=\"start query permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Start Query</h2>\n<p>The start event is raised once the query engine receives a request.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"77551440751679400000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`[DiagnosticName(&quot;HotChocolate.Execution.Query.Start&quot;)]\npublic void BeginQueryExecute(IQueryContext context)\n{\n    // ... your code\n}`, `77551440751679400000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DiagnosticName</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"HotChocolate.Execution.Query.Start\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">BeginQueryExecute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IQueryContext</span> context<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ... your code</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The query context that we provide as payload with the event is the full query context on which the query middleware operates. This enables us to pick and choose the information that we want.</p>\n<h2 id=\"stop-query\" style=\"position:relative;\"><a href=\"#stop-query\" aria-label=\"stop query permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stop Query</h2>\n<p>The stop event is raised once the query engine has completed processing the request. This event is even called if an error has occurred. Additional to the <code class=\"language-text\">IQueryContext</code> the event also provides the <code class=\"language-text\">IExecutionResult</code>.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"61228494927551540000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`[DiagnosticName(&quot;HotChocolate.Execution.Query.Stop&quot;)]\npublic void EndQueryExecute(\n    IQueryContext context,\n    IExecutionResult result)\n{\n    // ... your code\n}`, `61228494927551540000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DiagnosticName</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"HotChocolate.Execution.Query.Stop\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">EndQueryExecute</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">IQueryContext</span> context<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">IExecutionResult</span> result<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ... your code</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"query-error\" style=\"position:relative;\"><a href=\"#query-error\" aria-label=\"query error permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Query Error</h2>\n<p>The error event is raised should there be an unhandled exception on the query middleware level. This event is not raised whenever a validation or field error is thrown.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"37167084453420294000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`[DiagnosticName(&quot;HotChocolate.Execution.Query.Error&quot;)]\npublic virtual void OnQueryError(\n    IQueryContext context,\n    Exception exception)\n{\n    // ... your code\n}`, `37167084453420294000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DiagnosticName</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"HotChocolate.Execution.Query.Error\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnQueryError</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">IQueryContext</span> context<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Exception</span> exception<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ... your code</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"parser-events\" style=\"position:relative;\"><a href=\"#parser-events\" aria-label=\"parser events permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parser Events</h2>\n<p>The parser events are raised when the parser middleware is invoked. It is important to know that the Hot Chocolate server caches queries. This means that only the first time a query is executed, we can measure the parsing time.</p>\n<h2 id=\"start-parsing\" style=\"position:relative;\"><a href=\"#start-parsing\" aria-label=\"start parsing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Start Parsing</h2>\n<p>The start event is raised once the parser middleware is invoked.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"40320570982926720000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`[DiagnosticName(&quot;HotChocolate.Execution.Parsing.Start&quot;)]\npublic void BeginParsing(IQueryContext context)\n{\n    // ... your code\n}`, `40320570982926720000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DiagnosticName</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"HotChocolate.Execution.Parsing.Start\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">BeginParsing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IQueryContext</span> context<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ... your code</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"stop-parsing\" style=\"position:relative;\"><a href=\"#stop-parsing\" aria-label=\"stop parsing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stop Parsing</h2>\n<p>The stop event is raised once the parser finished. It is important to know that the stop event is even raised if a <code class=\"language-text\">SyntaxException</code> is thrown. The <code class=\"language-text\">Document</code> property on the <code class=\"language-text\">IQueryContext</code> will be null in this case. The parser middleware will add a property to the context data indicating if the query was retrieved from the cache: <code class=\"language-text\">DocumentRetrievedFromCache</code>.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"26197844513211253000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`[DiagnosticName(&quot;HotChocolate.Execution.Parsing.Stop&quot;)]\npublic void EndParsing(IQueryContext context)\n{\n    // ... your code\n}`, `26197844513211253000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DiagnosticName</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"HotChocolate.Execution.Parsing.Stop\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">EndParsing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IQueryContext</span> context<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ... your code</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"parsing-errors\" style=\"position:relative;\"><a href=\"#parsing-errors\" aria-label=\"parsing errors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parsing Errors</h2>\n<p>The parser will throw a <code class=\"language-text\">SyntaxException</code> if the query is not syntactically correct. The <code class=\"language-text\">SyntaxException</code> will cause a query error.</p>\n<h2 id=\"validation-events\" style=\"position:relative;\"><a href=\"#validation-events\" aria-label=\"validation events permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Validation Events</h2>\n<p>The validation events are raised whenever the validation middleware is invoked. Like with the parsing middleware the validation middleware will cache validation results. This means that only the first validation of a query document can be used to measure the validation duration. The context property <code class=\"language-text\">DocumentRetrievedFromCache</code> can also be used in this case to detect if the validation result was pulled from the internal cache or if it was computed.</p>\n<h2 id=\"validation-start\" style=\"position:relative;\"><a href=\"#validation-start\" aria-label=\"validation start permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Validation Start</h2>\n<p>The validation start event is called once the validation middleware is invoked.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"13576364838811860000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`[DiagnosticName(&quot;HotChocolate.Execution.Validation.Start&quot;)]\npublic void BeginValidation(IQueryContext context)\n{\n    // ... your code\n}`, `13576364838811860000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DiagnosticName</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"HotChocolate.Execution.Validation.Start\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">BeginValidation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IQueryContext</span> context<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ... your code</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"validation-stop\" style=\"position:relative;\"><a href=\"#validation-stop\" aria-label=\"validation stop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Validation Stop</h2>\n<p>The stop event is raised once the validation finished. It is important to know that the stop event is even raised if a validation error is raised.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"54701637376478904000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`[DiagnosticName(&quot;HotChocolate.Execution.Validation.Stop&quot;)]\npublic void EndValidation(IQueryContext context)\n{\n    // ... your code\n}`, `54701637376478904000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DiagnosticName</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"HotChocolate.Execution.Validation.Stop\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">EndValidation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IQueryContext</span> context<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ... your code</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"validation-errors\" style=\"position:relative;\"><a href=\"#validation-errors\" aria-label=\"validation errors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Validation Errors</h2>\n<p>The validation error event will be raised for each query document analysis that yields at least one error.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"79330329870129180000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`[DiagnosticName(&quot;HotChocolate.Execution.Validation.Error&quot;)]\npublic void OnValidationError(\n    IQueryContext context,\n    IReadOnlyCollection<IError> errors)\n{\n    // ... your code\n}`, `79330329870129180000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DiagnosticName</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"HotChocolate.Execution.Validation.Error\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnValidationError</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">IQueryContext</span> context<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">IReadOnlyCollection<span class=\"token punctuation\">&lt;</span>IError<span class=\"token punctuation\">></span></span> errors<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ... your code</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"operation-events\" style=\"position:relative;\"><a href=\"#operation-events\" aria-label=\"operation events permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Operation Events</h2>\n<p>Operation events represent the execution of the operation by the query engine. At this point all information about the operation have been resolved and can be accessed.</p>\n<p>The following operation events are available:</p>\n<h2 id=\"start-operation\" style=\"position:relative;\"><a href=\"#start-operation\" aria-label=\"start operation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Start Operation</h2>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"50641379073358280000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`[DiagnosticName(&quot;HotChocolate.Execution.Operation.Start&quot;)]\npublic void BeginOperationExecute(IQueryContext context)\n{\n    // ... your code\n}`, `50641379073358280000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DiagnosticName</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"HotChocolate.Execution.Operation.Start\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">BeginOperationExecute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IQueryContext</span> context<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ... your code</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"stop-operation\" style=\"position:relative;\"><a href=\"#stop-operation\" aria-label=\"stop operation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stop Operation</h2>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"48993017890743080000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`[DiagnosticName(&quot;HotChocolate.Execution.Operation.Stop&quot;)]\npublic void EndOperationExecute(\n    IQueryContext context,\n    IExecutionResult result)\n{\n    // ... your code\n}`, `48993017890743080000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DiagnosticName</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"HotChocolate.Execution.Operation.Stop\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">EndOperationExecute</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">IQueryContext</span> context<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">IExecutionResult</span> result<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ... your code</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"resolver-events\" style=\"position:relative;\"><a href=\"#resolver-events\" aria-label=\"resolver events permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Resolver Events</h2>\n<p>Resolver events are raised for every single resolver that is invoked. This is the perfect event to subscribe to if you want to add performance analysis or other resolver tracing solutions.</p>\n<blockquote>\n<p>Have a look at our <a href=\"https://github.com/ChilliCream/hotchocolate/blob/master/src/Core/Core/Execution/Instrumentation/ApolloTracingDiagnosticObserver.cs\">ApolloTracingDiagnosticObserver</a> to get an idea of how to implement a performance analysis solution.</p>\n</blockquote>\n<h2 id=\"resolver-start\" style=\"position:relative;\"><a href=\"#resolver-start\" aria-label=\"resolver start permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Resolver Start</h2>\n<p>The resolver start event is raised for each invocation of a resolver pipeline. The resolver pipeline is made-up of multiple field middleware components. The exact composition of such a pipeline varies on your setup.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"74779191783353190000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`[DiagnosticName(&quot;HotChocolate.Execution.Resolver.Start&quot;)]\npublic void BeginResolveField(IResolverContext context)\n{\n    // ... your code\n}`, `74779191783353190000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DiagnosticName</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"HotChocolate.Execution.Resolver.Start\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">BeginResolveField</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IResolverContext</span> context<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ... your code</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"resolver-stop\" style=\"position:relative;\"><a href=\"#resolver-stop\" aria-label=\"resolver stop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Resolver Stop</h2>\n<p>The resolver stop event is raised once the execution of the resolver pipeline is completed. The provided result is the not completed result of the resolver. This means that the actual result that is integrated into the query result can differ since type converter and serialization are applied during field value completion.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"97212782263231430000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`[DiagnosticName(&quot;HotChocolate.Execution.Resolver.Stop&quot;)]\npublic void EndResolveField(\n    IResolverContext context,\n    object result)\n{\n    // ... your code\n}`, `97212782263231430000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DiagnosticName</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"HotChocolate.Execution.Resolver.Stop\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">EndResolveField</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">IResolverContext</span> context<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">object</span></span> result<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ... your code</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"resolver-error\" style=\"position:relative;\"><a href=\"#resolver-error\" aria-label=\"resolver error permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Resolver Error</h2>\n<p>The resolver error event is raised should one or more resolver errors occurs.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"77830201413048930000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`[DiagnosticName(&quot;HotChocolate.Execution.Resolver.Error&quot;)]\npublic void OnResolverError(\n    IResolverContext context,\n    IEnumerable<IError> errors)\n{\n    // ... your code\n}`, `77830201413048930000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DiagnosticName</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"HotChocolate.Execution.Resolver.Error\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnResolverError</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">IResolverContext</span> context<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>IError<span class=\"token punctuation\">></span></span> errors<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ... your code</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"how-to-subscribe\" style=\"position:relative;\"><a href=\"#how-to-subscribe\" aria-label=\"how to subscribe permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to subscribe</h1>\n<p>In order to subscribe to the Hot Chocolate instrumentation events, you have to create a class that implements the marker interface <code class=\"language-text\">IDiagnosticObserver</code>.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"95255515548554940000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class MyDiagnosticObserver\n    : IDiagnosticObserver\n{\n}`, `95255515548554940000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyDiagnosticObserver</span>\n    <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IDiagnosticObserver</span></span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The observer subscribes to an event by adding a method that is annotated with the event name like the following:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"30494695667118866000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class MyDiagnosticObserver\n    : IDiagnosticObserver\n{\n    [DiagnosticName(&quot;HotChocolate.Execution.Validation.Error&quot;)]\n    public void OnValidationError(\n        IQueryContext context,\n        IReadOnlyCollection<IError> errors)\n    {\n        // ... your code\n    }\n}`, `30494695667118866000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyDiagnosticObserver</span>\n    <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IDiagnosticObserver</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DiagnosticName</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"HotChocolate.Execution.Validation.Error\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnValidationError</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">IQueryContext</span> context<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">IReadOnlyCollection<span class=\"token punctuation\">&lt;</span>IError<span class=\"token punctuation\">></span></span> errors<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ... your code</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When subscribing to start/stop events you also have to add the actual event method, otherwise the diagnostic source will not enable the event.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"51627567125500140000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class MyDiagnosticObserver\n    : IDiagnosticObserver\n{\n    [DiagnosticName(&quot;HotChocolate.Execution.Query&quot;)]\n    public void OnQuery(IQueryContext context)\n    {\n        // This method is used to enable start/stop events for query.\n    }\n\n    [DiagnosticName(&quot;HotChocolate.Execution.Query.Start&quot;)]\n    public void BeginQueryExecute(IQueryContext context)\n    {\n        // ... your code\n    }\n\n    [DiagnosticName(&quot;HotChocolate.Execution.Query.Stop&quot;)]\n    public void EndQueryExecute(\n        IQueryContext context,\n        IExecutionResult result)\n    {\n        // ... your code\n    }\n}`, `51627567125500140000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyDiagnosticObserver</span>\n    <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IDiagnosticObserver</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DiagnosticName</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"HotChocolate.Execution.Query\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnQuery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IQueryContext</span> context<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// This method is used to enable start/stop events for query.</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DiagnosticName</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"HotChocolate.Execution.Query.Start\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">BeginQueryExecute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IQueryContext</span> context<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ... your code</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DiagnosticName</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"HotChocolate.Execution.Query.Stop\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">EndQueryExecute</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">IQueryContext</span> context<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">IExecutionResult</span> result<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ... your code</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can use the context data to pass tracing details like a custom request id between your events:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"92611064351211730000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class MyDiagnosticObserver\n    : IDiagnosticObserver\n{\n    [DiagnosticName(&quot;HotChocolate.Execution.Query&quot;)]\n    public void OnQuery(IQueryContext context)\n    {\n        // This method is used to enable start/stop events for query.\n    }\n\n    [DiagnosticName(&quot;HotChocolate.Execution.Query.Start&quot;)]\n    public void BeginQueryExecute(IQueryContext context)\n    {\n        context.ContextData[&quot;TracingId&quot;] = Guid.NewGuid();\n        // ... your code\n    }\n\n    [DiagnosticName(&quot;HotChocolate.Execution.Query.Stop&quot;)]\n    public void EndQueryExecute(\n        IQueryContext context,\n        IExecutionResult result)\n    {\n        Guid tracingId = (Guid)context.ContextData[&quot;TracingId&quot;];\n        // ... your code\n    }\n}`, `92611064351211730000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyDiagnosticObserver</span>\n    <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IDiagnosticObserver</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DiagnosticName</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"HotChocolate.Execution.Query\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnQuery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IQueryContext</span> context<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// This method is used to enable start/stop events for query.</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DiagnosticName</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"HotChocolate.Execution.Query.Start\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">BeginQueryExecute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IQueryContext</span> context<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        context<span class=\"token punctuation\">.</span>ContextData<span class=\"token punctuation\">[</span><span class=\"token string\">\"TracingId\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Guid<span class=\"token punctuation\">.</span><span class=\"token function\">NewGuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// ... your code</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DiagnosticName</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"HotChocolate.Execution.Query.Stop\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">EndQueryExecute</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">IQueryContext</span> context<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">IExecutionResult</span> result<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Guid</span> tracingId <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Guid<span class=\"token punctuation\">)</span>context<span class=\"token punctuation\">.</span>ContextData<span class=\"token punctuation\">[</span><span class=\"token string\">\"TracingId\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// ... your code</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>There are two ways to register the diagnostics observer with the execution engine. You can either register the observer with the executor directly through the <code class=\"language-text\">QueryExecutionBuilder</code> or you can add the diagnostic observer to your dependency injection provider.</p>\n<p>Registering the observer with the <code class=\"language-text\">QueryExecutionBuilder</code> does not require any dependency injection provider, but let`s you only inject infrastructure services.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"39134741437804980000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`SchemaBuilder.New()\n    ...\n    .Create()\n    .MakeExecutable(builder => builder\n        .AddDiagnosticObserver<MyDiagnosticObserver>()\n        .UseDefaultPipeline());`, `39134741437804980000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">SchemaBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">MakeExecutable</span><span class=\"token punctuation\">(</span>builder <span class=\"token operator\">=></span> builder\n        <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddDiagnosticObserver</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MyDiagnosticObserver<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">UseDefaultPipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If you want to use the observer in conjunction with your dependency injection provider you can also add the observer to your services. We have added an extension method for <code class=\"language-text\">IServiceCollection</code> that mirrors the builder extension.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"86388186557057960000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`services.AddDiagnosticObserver<MyDiagnosticObserver>();`, `86388186557057960000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddDiagnosticObserver</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MyDiagnosticObserver<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If you are registering the diagnostics observer with the dependency injection you have to ensure that the resulting service provider is registered with the schema.</p>\n<p>If you are using our <code class=\"language-text\">AddGraphQL</code> or <code class=\"language-text\">AddStitchedSchema</code> extensions, you should be covered. In the case that you are putting everything together yourself you will need to register the service provider with your schema manually.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"13019914569465518000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`service.AddSingleton(sp => SchemaBuilder.New()\n    .AddServices(sp)\n    ...\n    .Create());\n\nQueryExecutionBuilder\n    .New()\n    .UseDefaultPipeline()\n    .Populate(services);`, `13019914569465518000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">service<span class=\"token punctuation\">.</span><span class=\"token function\">AddSingleton</span><span class=\"token punctuation\">(</span>sp <span class=\"token operator\">=></span> SchemaBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddServices</span><span class=\"token punctuation\">(</span>sp<span class=\"token punctuation\">)</span>\n    <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nQueryExecutionBuilder\n    <span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">UseDefaultPipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Populate</span><span class=\"token punctuation\">(</span>services<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1 id=\"examples\" style=\"position:relative;\"><a href=\"#examples\" aria-label=\"examples permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Examples</h1>\n<p>We have created a little example project that demonstrates how you can delegate Hot Chocolate events to the ASP.NET core logger API.</p>\n<p><a href=\"https://github.com/ChilliCream/hotchocolate-examples/tree/master/misc/Instrumentation\">ASP.NET ILogger Example</a></p>\n<p>We also have an implementation that we use in production that builds upon Microsoft`s ETW. This is a more complex example since there is a lot of <code class=\"language-text\">unsafe</code> code.</p>\n<p><a href=\"https://github.com/ChilliCream/thor-client/tree/master/src/Clients/HotChocolate\">ETW Example</a></p>\n<h1 id=\"blogs\" style=\"position:relative;\"><a href=\"#blogs\" aria-label=\"blogs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Blogs</h1>\n<p><a href=\"https://chillicream.com/blog/2019/03/19/logging-with-hotchocolate\">Tracing with Hot Chocolate</a></p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/hotchocolate/v10/execution-engine/instrumentation/#events\">Events</a></p>\n<ul>\n<li><a href=\"/hotchocolate/v10/execution-engine/instrumentation/#query-events\">Query Events</a></li>\n<li><a href=\"/hotchocolate/v10/execution-engine/instrumentation/#start-query\">Start Query</a></li>\n<li><a href=\"/hotchocolate/v10/execution-engine/instrumentation/#stop-query\">Stop Query</a></li>\n<li><a href=\"/hotchocolate/v10/execution-engine/instrumentation/#query-error\">Query Error</a></li>\n<li><a href=\"/hotchocolate/v10/execution-engine/instrumentation/#parser-events\">Parser Events</a></li>\n<li><a href=\"/hotchocolate/v10/execution-engine/instrumentation/#start-parsing\">Start Parsing</a></li>\n<li><a href=\"/hotchocolate/v10/execution-engine/instrumentation/#stop-parsing\">Stop Parsing</a></li>\n<li><a href=\"/hotchocolate/v10/execution-engine/instrumentation/#parsing-errors\">Parsing Errors</a></li>\n<li><a href=\"/hotchocolate/v10/execution-engine/instrumentation/#validation-events\">Validation Events</a></li>\n<li><a href=\"/hotchocolate/v10/execution-engine/instrumentation/#validation-start\">Validation Start</a></li>\n<li><a href=\"/hotchocolate/v10/execution-engine/instrumentation/#validation-stop\">Validation Stop</a></li>\n<li><a href=\"/hotchocolate/v10/execution-engine/instrumentation/#validation-errors\">Validation Errors</a></li>\n<li><a href=\"/hotchocolate/v10/execution-engine/instrumentation/#operation-events\">Operation Events</a></li>\n<li><a href=\"/hotchocolate/v10/execution-engine/instrumentation/#start-operation\">Start Operation</a></li>\n<li><a href=\"/hotchocolate/v10/execution-engine/instrumentation/#stop-operation\">Stop Operation</a></li>\n<li><a href=\"/hotchocolate/v10/execution-engine/instrumentation/#resolver-events\">Resolver Events</a></li>\n<li><a href=\"/hotchocolate/v10/execution-engine/instrumentation/#resolver-start\">Resolver Start</a></li>\n<li><a href=\"/hotchocolate/v10/execution-engine/instrumentation/#resolver-stop\">Resolver Stop</a></li>\n<li><a href=\"/hotchocolate/v10/execution-engine/instrumentation/#resolver-error\">Resolver Error</a></li>\n</ul>\n</li>\n<li><a href=\"/hotchocolate/v10/execution-engine/instrumentation/#how-to-subscribe\">How to subscribe</a></li>\n<li><a href=\"/hotchocolate/v10/execution-engine/instrumentation/#examples\">Examples</a></li>\n<li><a href=\"/hotchocolate/v10/execution-engine/instrumentation/#blogs\">Blogs</a></li>\n</ul>"}},"site":{"siteMetadata":{"siteUrl":"https://chillicream.com","repositoryUrl":"https://github.com/ChilliCream/hotchocolate","tools":{"slack":"https://join.slack.com/t/hotchocolategraphql/shared_invite/enQtNTA4NjA0ODYwOTQ0LTViMzA2MTM4OWYwYjIxYzViYmM0YmZhYjdiNzBjOTg2ZmU1YmMwNDZiYjUyZWZlMzNiMTk1OWUxNWZhMzQwY2Q"}}},"config":{"products":[{"path":"hotchocolate","title":"Hot Chocolate","description":"Build your own thin GraphQL API layer on top of any resource.","versions":[{"path":"v10","title":"v10 (stable)","items":[{"path":"index","title":"Introduction","items":null},{"path":"code-first","title":"Code-First","items":null},{"path":"schema-first","title":"Schema-First","items":null},{"path":"schema","title":"Schema","items":[{"path":"index","title":"Schema"},{"path":"object-type","title":"Object Type"},{"path":"interface-type","title":"Interface Type"},{"path":"union-type","title":"Union Type"},{"path":"input-object-type","title":"Input Object Type"},{"path":"enum-type","title":"Enum Type"},{"path":"descriptions","title":"Schema Descriptions"},{"path":"custom-scalar-types","title":"Scalar Type Support"},{"path":"descriptor-attributes","title":"Descriptor Attributes"},{"path":"extending-types","title":"Custom Base Classes"},{"path":"directives","title":"Directives"},{"path":"resolvers","title":"Resolvers"},{"path":"relay","title":"Relay"},{"path":"conventions","title":"Conventions"},{"path":"options","title":"Schema Options"}]},{"path":"data-fetching","title":"Data Fetching","items":[{"path":"index","title":"Data Loaders"},{"path":"pagination","title":"Pagination"},{"path":"filters","title":"Filters"}]},{"path":"security","title":"Security","items":[{"path":"index","title":"Authorization"},{"path":"security","title":"Security"}]},{"path":"execution-engine","title":"Execution Engine","items":[{"path":"index","title":"Middleware"},{"path":"validation-rules","title":"Validation Rules"},{"path":"instrumentation","title":"Instrumentation"},{"path":"apollo-tracing","title":"Apollo Tracing"},{"path":"batching","title":"Batching"},{"path":"persisted-queries","title":"Persisted Queries"},{"path":"custom-context-data","title":"Custom Context Data"},{"path":"subscriptions","title":"Subscriptions"},{"path":"type-conversion","title":"Type Conversion"},{"path":"error-filter","title":"Error Filter"},{"path":"execution-options","title":"Execution Options"}]},{"path":"server","title":"Server","items":[{"path":"index","title":"ASP.Net"},{"path":"dependency-injection","title":"Dependency Injection"}]},{"path":"stitching","title":"Schema Stitching","items":null},{"path":"tooling","title":"Tooling","items":null},{"path":"advanced","title":"Advanced","items":[{"path":"index","title":"Parser"},{"path":"dotnet-cli","title":".Net CLI"}]},{"path":"tutorials","title":"Tutorials","items":[{"path":"index","title":"Entity Framework"}]},{"path":"examples","title":"Examples","items":[{"path":"index","title":"Star Wars"},{"path":"slack-clone","title":"Slack Clone"},{"path":"other-examples","title":"Other Examples"}]}]},{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null},{"path":"getting-started","title":"Getting Started","items":null},{"path":"defining-a-schema","title":"Defining a schema","items":[{"path":"index","title":"Schema basics"},{"path":"versioning","title":"Versioning"},{"path":"unions-and-interfaces","title":"Unions and Interfaces"},{"path":"scalars","title":"Scalars"},{"path":"directives","title":"Directives"}]},{"path":"fetching-data","title":"Fetching data","items":[{"path":"index","title":"Resolver"},{"path":"fetching-from-databases","title":"Fetching from Databases"},{"path":"fetching-from-rest","title":"Fetching from REST"},{"path":"dataloader","title":"DataLoader"},{"path":"pagination","title":"Pagination"},{"path":"filtering","title":"Filtering"},{"path":"sorting","title":"Sorting"}]},{"path":"api-reference","title":"API Reference","items":[{"path":"index","title":"Overview"},{"path":"language","title":"Lanugage"},{"path":"visitors","title":"Visitors"}]}]}]},{"path":"bananacakepop","title":"Banana Cake Pop","description":"Use this GUI to get deep insights from any GraphQL API.","versions":[{"path":"","title":"v1 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"strawberryshake","title":"Strawberry Shake","description":"Generate a unique GraphQL client for .Net to fetch data from any GraphQL API.","versions":[{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"marshmallowpie","title":"Marshmallow Pie","description":"Configure a GraphQL registry to keep track of any GraphQL server and client.","versions":[{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"greendonut","title":"Green Donut","description":"Configure data loaders and caching for GraphQL endpoints.","versions":[{"path":"v10","title":"v10 (stable)","items":[{"path":"index","title":"Introduction","items":null},{"path":"installation","title":"Installation","items":null},{"path":"usage","title":"Usage","items":null},{"path":"api","title":"API","items":null},{"path":"advanced-concepts","title":"Advanced Concepts","items":[{"path":"index","title":"Custom DataLoader"},{"path":"diagnostics","title":"Diagnostic Events"}]}]},{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]}]}},"pageContext":{"originPath":"hotchocolate/v10/execution-engine/instrumentation.md"}},"staticQueryHashes":["2890364758","4218812017","63159454"]}