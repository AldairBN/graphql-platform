{"componentChunkName":"component---src-templates-doc-page-template-tsx","path":"/docs/hotchocolate/v10/schema/relay","result":{"data":{"file":{"childMdx":{"fields":{"slug":"/hotchocolate/v10/schema/relay/"},"frontmatter":{"title":"Relay"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Relay\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://facebook.github.io/relay\"\n  }), \"Relay\"), \" is a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"JavaScript\"), \" framework for building data-driven React applications with GraphQL which is developed and used by \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Facebook\"), \".\"), mdx(\"p\", null, \"Relay makes three assumptions about the backend which you have to abide by in order that your GraphQL backend plays well with this framework.\"), mdx(\"p\", null, \"We recommend that you abide to the relay server specifications even if you do not plan to use relay since even \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Apollo\"), \" supports these specifications and they are really good guidelines that lead to a better schema design.\"), mdx(\"h1\", null, \"Object Identification\"), mdx(\"p\", null, \"The first specification is called \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://facebook.github.io/relay/graphql/objectidentification.htm\"\n  }), \"Relay Global Object Identification Specification\"), \" and defines that object identifiers are specified in a standardized way. Moreover, it defines that all identifier is schema unique and that we can refetch any object just by providing that identifier.\"), mdx(\"p\", null, \"In order to support the schema has to provide an interface \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Node\"), \" that looks like following:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sdl\"\n  }), \"interface Node {\\n  id: ID!\\n}\\n\")), mdx(\"p\", null, \"Each object that exposes an identifier has to implement \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Node\"), \" and provide the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" field.\"), mdx(\"p\", null, \"Moreover, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Query\"), \" type has to expose a field \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node\"), \" that can return a node for an id.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sdl\"\n  }), \"type Query {\\n  ...\\n  node(id: ID!) : Node\\n  ...\\n}\\n\")), mdx(\"p\", null, \"This allows now the client APIs to automatically refetch objects from the server if the client framework wants to update its caches or if it has part of the object in its store and wants to fetch additional fields of an object.\"), mdx(\"p\", null, \"Hot Chocolate makes implementing this very easy. First, we have to declare on our schema that we want to be relay compliant:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"ISchema schema = SchemaBuilder.New()\\n    .EnableRelaySupport()\\n    ...\\n    .Create();\\n\")), mdx(\"p\", null, \"This basically sets up a middleware to encode out identifiers to be schema unique, so you do not have to provide schema unique identifiers. Moreover, it will add a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Node\"), \" interface type and configure the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node\"), \" field on our query type.\"), mdx(\"p\", null, \"Lastly, we have to declare on our object types that they are nodes and how they can be resolved.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"public class MyObjectType\\n    : ObjectType<MyObject>\\n{\\n    protected override void Configure(IObjectTypeDescriptor<MyObject> descriptor)\\n    {\\n        descriptor.AsNode()\\n            .IdField(t => t.Id)\\n            .NodeResolver((ctx, id) =>\\n                ctx.Service<IMyRepository>().GetMyObjectAsync(id));\\n        ...\\n    }\\n}\\n\")), mdx(\"p\", null, \"On the descriptor we mark the object as a node with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AsNode\"), \" after that we specify the property that represents our internal identifier, last but not least we specify the node resolver that will fetch the node from the database when it is requested through the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node\"), \" field on the query type.\"), mdx(\"p\", null, \"There are more variants possible and you can even write custom resolvers and do not have to bind to an explicit property.\"), mdx(\"h1\", null, \"Connections\"), mdx(\"p\", null, \"The pagination specification is called \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://facebook.github.io/relay/graphql/connections.htm\"\n  }), \"Relay Cursor Connections Specification\"), \" and contains functionality to make manipulating one-to-many relationships easy, using a standardized way of expressing these one-to-many relationships. This standard connection model offers ways of slicing and paginating through the connection.\"), mdx(\"p\", null, \"The relay style pagination is really powerful and with Hot Chocolate it is quite simple to implement.\"), mdx(\"p\", null, \"If your database provider can provide it\", \"`\", \"s data through \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IQueryable\"), \" then implementing relay pagination is one line of code:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"public class QueryType\\n    : ObjectType<Query>\\n{\\n    protected override void Configure(IObjectTypeDescriptor<Query> descriptor)\\n    {\\n        descriptor.Field(t => t.Strings).UsePaging<StringType>();\\n    }\\n}\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"We have a lot more documentation on pagination \", mdx(\"a\", _extends({\n    parentName: \"strong\"\n  }, {\n    \"href\": \"/docs/hotchocolate/v10/data-fetching/pagination\"\n  }), \"here\"), \".\")), mdx(\"h1\", null, \"Mutations\"), mdx(\"p\", null, \"The last specification is called \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://facebook.github.io/relay/graphql/mutations.htm\"\n  }), \"Relay Input Object Mutations Specification\"), \" and it describes how mutations should be specified. This is more a design guideline then something we could help you with APIs with.\"), mdx(\"p\", null, \"Nevertheless, with version 9.1 we will try aide this with some convenience:\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ChilliCream/hotchocolate/issues/773\"\n  }), \"Automatic Relay InputType\"), \".\"), mdx(\"h1\", null, \"Additional Information\"), mdx(\"p\", null, \"The relay server specifications are also summarized and explained \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://facebook.github.io/relay/docs/en/graphql-server-specification\"\n  }), \"here\"), \". Also, if you have further questions head over to our slack channel.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#object-identification","title":"Object Identification"},{"url":"#connections","title":"Connections"},{"url":"#mutations","title":"Mutations"},{"url":"#additional-information","title":"Additional Information"}]}}},"site":{"siteMetadata":{"siteUrl":"https://chillicream.com","repositoryUrl":"https://github.com/ChilliCream/hotchocolate","tools":{"slack":"https://join.slack.com/t/hotchocolategraphql/shared_invite/zt-lqkb8z7b-aFepT0Qrsgv5_yKy0yoyzw"}}},"config":{"products":[{"path":"hotchocolate","title":"Hot Chocolate","description":"Build your own thin GraphQL API layer on top of any resource.","versions":[{"path":"","title":"v11 (latest)","items":[{"path":"index","title":"Introduction","items":null},{"path":"get-started","title":"Get Started","items":null},{"path":"defining-a-schema","title":"Defining a schema","items":[{"path":"index","title":"Schema basics"},{"path":"versioning","title":"Versioning"},{"path":"unions-and-interfaces","title":"Unions and Interfaces"},{"path":"scalars","title":"Scalars"},{"path":"directives","title":"Directives"}]},{"path":"fetching-data","title":"Fetching data","items":[{"path":"index","title":"Resolver"},{"path":"fetching-from-databases","title":"Fetching from Databases"},{"path":"fetching-from-rest","title":"Fetching from REST"},{"path":"dataloader","title":"DataLoader"},{"path":"pagination","title":"Pagination"},{"path":"filtering","title":"Filtering"},{"path":"sorting","title":"Sorting"},{"path":"projections","title":"Projections"}]},{"path":"integrations","title":"Integrations","items":[{"path":"index","title":"Overview"},{"path":"entity-framework","title":"Entity Framework"},{"path":"spatial-data","title":"Spatial Data"}]},{"path":"performance","title":"Performance","items":[{"path":"index","title":"Overview"},{"path":"persisted-queries","title":"Persisted queries"},{"path":"automatic-persisted-queries","title":"Automatic persisted queries"}]},{"path":"api-reference","title":"API Reference","items":[{"path":"index","title":"Overview"},{"path":"object-type","title":"Object Type"},{"path":"language","title":"Language"},{"path":"extending-filtering","title":"Extending Filtering"},{"path":"visitors","title":"Visitors"},{"path":"aspnetcore","title":"ASP.NET Core"},{"path":"executable","title":"Executable"},{"path":"migrate-from-10-to-11","title":"Migrate from 10.5 to 11.0"}]}]},{"path":"v10","title":"v10 (previous)","items":[{"path":"index","title":"Introduction","items":null},{"path":"code-first","title":"Code-First","items":null},{"path":"schema-first","title":"Schema-First","items":null},{"path":"schema","title":"Schema","items":[{"path":"index","title":"Schema"},{"path":"object-type","title":"Object Type"},{"path":"interface-type","title":"Interface Type"},{"path":"union-type","title":"Union Type"},{"path":"input-object-type","title":"Input Object Type"},{"path":"enum-type","title":"Enum Type"},{"path":"descriptions","title":"Schema Descriptions"},{"path":"custom-scalar-types","title":"Scalar Type Support"},{"path":"descriptor-attributes","title":"Descriptor Attributes"},{"path":"extending-types","title":"Custom Base Classes"},{"path":"directives","title":"Directives"},{"path":"resolvers","title":"Resolvers"},{"path":"relay","title":"Relay"},{"path":"conventions","title":"Conventions"},{"path":"options","title":"Schema Options"}]},{"path":"data-fetching","title":"Data Fetching","items":[{"path":"index","title":"Data Loaders"},{"path":"pagination","title":"Pagination"},{"path":"filters","title":"Filters"}]},{"path":"security","title":"Security","items":[{"path":"index","title":"Authorization"},{"path":"security","title":"Security"}]},{"path":"execution-engine","title":"Execution Engine","items":[{"path":"index","title":"Middleware"},{"path":"validation-rules","title":"Validation Rules"},{"path":"instrumentation","title":"Instrumentation"},{"path":"apollo-tracing","title":"Apollo Tracing"},{"path":"batching","title":"Batching"},{"path":"persisted-queries","title":"Persisted Queries"},{"path":"custom-context-data","title":"Custom Context Data"},{"path":"subscriptions","title":"Subscriptions"},{"path":"type-conversion","title":"Type Conversion"},{"path":"error-filter","title":"Error Filter"},{"path":"execution-options","title":"Execution Options"}]},{"path":"server","title":"Server","items":[{"path":"index","title":"ASP.Net"},{"path":"dependency-injection","title":"Dependency Injection"}]},{"path":"stitching","title":"Schema Stitching","items":null},{"path":"tooling","title":"Tooling","items":null},{"path":"advanced","title":"Advanced","items":[{"path":"index","title":"Parser"},{"path":"dotnet-cli","title":".Net CLI"}]},{"path":"tutorials","title":"Tutorials","items":[{"path":"index","title":"Entity Framework"}]},{"path":"examples","title":"Examples","items":[{"path":"index","title":"Star Wars"},{"path":"slack-clone","title":"Slack Clone"},{"path":"other-examples","title":"Other Examples"}]}]}]},{"path":"bananacakepop","title":"Banana Cake Pop","description":"Use this GUI to get deep insights from any GraphQL API.","versions":[{"path":"","title":"v1 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"greendonut","title":"Green Donut","description":"Configure data loaders and caching for GraphQL endpoints.","versions":[{"path":"","title":"v11 (latest)","items":[{"path":"index","title":"Introduction","items":null}]},{"path":"v10","title":"v10 (previous)","items":[{"path":"index","title":"Introduction","items":null},{"path":"installation","title":"Installation","items":null},{"path":"usage","title":"Usage","items":null},{"path":"api","title":"API","items":null},{"path":"advanced-concepts","title":"Advanced Concepts","items":[{"path":"index","title":"Custom DataLoader"},{"path":"diagnostics","title":"Diagnostic Events"}]}]}]}]}},"pageContext":{"originPath":"hotchocolate/v10/schema/relay.md"}},"staticQueryHashes":["1014893094","2890364758","4218812017"]}