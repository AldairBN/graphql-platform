{"componentChunkName":"component---src-templates-doc-page-template-tsx","path":"/docs/hotchocolate/v10/schema/resolvers","result":{"data":{"file":{"childMarkdownRemark":{"fields":{"slug":"/hotchocolate/v10/schema/resolvers/"},"frontmatter":{"title":"Resolvers"},"html":"<p>In GraphQL resolvers describe the logic that fetches data for a specific field.</p>\n<p>Field resolvers run independently of each other which allows the execution engine to parallelize their execution.</p>\n<p>This independent approach to fetch data allows us to build powerful schemas that consists of multiple data sources in a very simple way.</p>\n<p>Since we have two major approaches with Hot Chocolate to define a schema, we also have two approaches to declaring our resolvers. We will start by looking at how we can declare resolvers with the schema-first approach and then look at how this is done in the code-first world.</p>\n<p>It is important to know that we can mix both approaches. Moreover, resolvers are integrated as a component into the field-middleware-pipeline. A field-middleware is more complex but can also open up more scenarios. One could for instance write a middleware that resolves the data for multiple fields of a certain well-defined data source.</p>\n<blockquote>\n<p>More about what a field-middleware can do can be found <a href=\"/docs/hotchocolate/v10/execution-engine\">here</a>.</p>\n</blockquote>\n<h1 id=\"schema-first\" style=\"position:relative;\"><a href=\"#schema-first\" aria-label=\"schema first permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Schema-First</h1>\n<p>With Hot Chocolate we have multiple approaches to write resolvers depending on how you declare your schema.</p>\n<p>With the schema-first approach the simplest way to declare a resolver is binding a delegate that resolves the data to a field in your schema like the following:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"19680225251204030000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`c.BindResolver(ctx =>\n{\n    // my resolver code goes here ...\n}).To(&quot;Query&quot;, &quot;foo&quot;);`, `19680225251204030000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">c<span class=\"token punctuation\">.</span><span class=\"token function\">BindResolver</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// my resolver code goes here ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">To</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Query\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Furthermore, we could bind a class as a resolver type. Each of the members of the resolver type can be bound to fields in the schema.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"22783556943808602000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`services.AddGraphQL(so =>\n    SchemaBuilder.New()\n        .AddDocumentFromFile(&quot;schema.graphql&quot;)\n        .BindComplexType<Query>(b => b\n            .To(&quot;Query&quot;)\n            .Field(t => t.GetGreetings())\n            .Name(&quot;greetings&quot;))\n        .Create());`, `22783556943808602000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddGraphQL</span><span class=\"token punctuation\">(</span>so <span class=\"token operator\">=></span>\n    SchemaBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">AddDocumentFromFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"schema.graphql\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">BindComplexType</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Query<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=></span> b\n            <span class=\"token punctuation\">.</span><span class=\"token function\">To</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Query\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span><span class=\"token function\">GetGreetings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"greetings\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Since, the class <code class=\"language-text\">Query</code> is used as our resolver type, the query engine will automatically create an instance of this type as singleton. The lifetime of the resolver object is basically bound to the lifetime of the query executor.</p>\n<p>We can also take charge of the lifetime management by registering the resolver type with the dependency injection. In this case the query engine will retrieve the type from the <code class=\"language-text\">IServiceProvider</code> and not perform any lifetime management.</p>\n<p>Sometimes, we do not want to explicitly declare resolvers since we have already modeled our entities very well and just want to map those to our schema. In this case we can just bind our type like the following:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"25374344400120140000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`services.AddGraphQL(so =>\n    SchemaBuilder.New()\n        .AddDocumentFromFile(&quot;schema.graphql&quot;)\n        .BindComplexType<Query>(b => b.To(&quot;Query&quot;))\n        .Create());`, `25374344400120140000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddGraphQL</span><span class=\"token punctuation\">(</span>so <span class=\"token operator\">=></span>\n    SchemaBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">AddDocumentFromFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"schema.graphql\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">BindComplexType</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Query<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=></span> b<span class=\"token punctuation\">.</span><span class=\"token function\">To</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Query\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Entities are handled differently than resolver types.</p>\n<p>First of all you are able to pass in an entity object on which the resolvers are executed. In this case the query engine will do nothing and operate on the passed in entity.</p>\n<p>If no initial root value was passed into the query engine, the query engine will create a new <code class=\"language-text\">Query</code> object by itself. The instance will be disposed (if disposable) after the request was completed.</p>\n<p>Like with the resolver type we can take charge of the lifetime by registering the root types as services with our dependency injection.</p>\n<p>In the case that we have not specified any resolvers for our bound entity, Hot Chocolate will generate an in-memory assembly that contains the inferred resolvers.</p>\n<p>Moreover, we can combine our approach in order to provide specific resolver logic for our entity or in order to extend on our entity. In many cases our entity may just represent part of the data structure that we want to expose in our schema. In this case we can just provide resolver logic to fill the gaps.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"84382958833009590000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`services.AddGraphQL(so =>\n    SchemaBuilder.New()\n        .AddDocumentFromFile(&quot;schema.graphql&quot;)\n        .BindComplexType<Query>(b => b.To(&quot;Query&quot;))\n        .BindResolver<QueryResolver>(b => b\n            .To(&quot;Query&quot;)\n            .Resolve(&quot;greetings&quot;)\n            .With(t => t.GetGreetings(default)))\n        .Create());`, `84382958833009590000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddGraphQL</span><span class=\"token punctuation\">(</span>so <span class=\"token operator\">=></span>\n    SchemaBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">AddDocumentFromFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"schema.graphql\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">BindComplexType</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Query<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=></span> b<span class=\"token punctuation\">.</span><span class=\"token function\">To</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Query\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">BindResolver</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>QueryResolver<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=></span> b\n            <span class=\"token punctuation\">.</span><span class=\"token function\">To</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Query\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"greetings\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">With</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span><span class=\"token function\">GetGreetings</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In the above case the <code class=\"language-text\">GetGreetings</code> method has an argument <code class=\"language-text\">Query</code> which is our bound entity. Resolver methods can specify the original field arguments as specified by the field definition as well as context arguments.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"50726319531565630000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public string GetGreetings([Parent]Query query) => query.Greetings;`, `50726319531565630000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">GetGreetings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Parent</span></span><span class=\"token punctuation\">]</span><span class=\"token class-name\">Query</span> query<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> query<span class=\"token punctuation\">.</span>Greetings<span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <code class=\"language-text\">ParentAttribute</code> signals the query engine that this argument shall be the instance of the declaring type of our field.</p>\n<p>We also could let the query engine inject us the resolver context which provides us with all the context data for our resolver.</p>\n<p>For example we could access all the previous resolved object in our path by accessing <code class=\"language-text\">IResolverContext.Source</code>. Or, we could access scoped context data that were passed down by one of the previous resolvers in the path.</p>\n<p>In order to keep our resolver clean and easy to test we can also just let the query engine inject the parts of the resolver context that we really need for our resolver like the <code class=\"language-text\">ObjectType</code> to which our current field belongs etc.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"14025371998776336000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public string GetGreetings(ObjectType type) => type.Name;`, `14025371998776336000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">GetGreetings</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectType</span> type<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> type<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">;</span></code></pre></div>\n<h1 id=\"code-first\" style=\"position:relative;\"><a href=\"#code-first\" aria-label=\"code first permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code-First</h1>\n<p>Code-first is the second approach with which we can be describe a GraphQL schema. In Code-first, field definition and resolver logic are more closely bound together.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"95026234607143630000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class QueryType\n    : ObjectType\n{\n    protected override void Configure(IObjectTypeDescriptor descriptor)\n    {\n        descriptor.Name(&quot;Query&quot;);\n        descriptor.Field(&quot;greetings&quot;).Resolver(ctx => &quot;foo&quot;);\n    }\n}`, `95026234607143630000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">QueryType</span>\n    <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ObjectType</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IObjectTypeDescriptor</span> descriptor<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Query\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Field</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"greetings\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Resolver</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">=></span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The above example declares a schema type named <code class=\"language-text\">Query</code> with one field called <code class=\"language-text\">greetings</code> of the type <code class=\"language-text\">String</code> that always returns <code class=\"language-text\">foo</code>. Like with the schema-first approach we can create types that are not explicitly bound to a specific .NET type like in the above example.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"90778413078655470000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class PersonType\n    : ObjectType<Person>\n{\n// Types inferred\n}`, `90778413078655470000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PersonType</span>\n    <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ObjectType<span class=\"token punctuation\">&lt;</span>Person<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// Types inferred</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If we bind our type to a specific entity type using <code class=\"language-text\">ObjectType&lt;T&gt;</code>, then we will by default infer the possible type structure and its resolvers from the .NET type.</p>\n<p>We can always overwrite the defaults or define everything explicitly.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"74371142930474000000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class PersonType\n    : ObjectType<Person>\n{\n    protected override void Configure(IObjectTypeDescriptor<Person> descriptor)\n    {\n        descriptor.Name(&quot;Person123&quot;);\n        descriptor.Field(t => t.Name).Type<NonNullType<StringType>>();\n        descriptor.Field(t => t.FriendId)\n            .Name(&quot;friend&quot;)\n            .Resolver(ctx => ctx.Service<IRepository>().GetPerson(ctx.Parent<Person>().FriendId));\n    }\n}`, `74371142930474000000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PersonType</span>\n    <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ObjectType<span class=\"token punctuation\">&lt;</span>Person<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IObjectTypeDescriptor<span class=\"token punctuation\">&lt;</span>Person<span class=\"token punctuation\">></span></span> descriptor<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Person123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Type</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>NonNullType<span class=\"token punctuation\">&lt;</span>StringType<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span>FriendId<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"friend\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Resolver</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">=></span> ctx<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Service</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IRepository<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetPerson</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Parent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Person<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>FriendId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"resolver-types\" style=\"position:relative;\"><a href=\"#resolver-types\" aria-label=\"resolver types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Resolver Types</h1>\n<p>Since, a lot of resolver logic, like the one in the above example, can be difficult to test and difficult to read, we also allow to create resolver types with the code-first approach.</p>\n<p>We can explicitly include resolvers from a resolver type the same way we are specifying our fields.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"43767644746718550000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`descriptor.Field<PersonResolvers>(t => t.GetFriend(defaults)).Type<PersonType>();`, `43767644746718550000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">descriptor<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Field</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>PersonResolvers<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span><span class=\"token function\">GetFriend</span><span class=\"token punctuation\">(</span>defaults<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Type</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>PersonType<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The one difference is that we basically specify from which type we are including the resolver.</p>\n<p>Furthermore, we can also include all fields of a resolver type implicitly like the following:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"22099327621103090000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`descriptor.Include<PersonResolvers>();`, `22099327621103090000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">descriptor<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Include</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>PersonResolvers<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We can also reverse the relationship between the type and its resolvers by annotating the resolver type with the entity or schema type name for which the resolver type provides resolvers.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"22553127312287556000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`[GraphQLResolverOf(typeof(Person))]\n[GraphQLResolverOf(&quot;Query&quot;)]\npublic class SomeResolvers\n{\n    public Person GetFriend([Parent]Person person)\n    {\n        // resolver code\n    }\n\n    [GraphQLDescription(&quot;This field does ...&quot;)]\n    public string GetGreetings([Parent]Query person, string name)\n    {\n        // resolver code\n    }\n}`, `22553127312287556000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">GraphQLResolverOf</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">Person</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">GraphQLResolverOf</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"Query\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SomeResolvers</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Person</span> <span class=\"token function\">GetFriend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Parent</span></span><span class=\"token punctuation\">]</span><span class=\"token class-name\">Person</span> person<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// resolver code</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">GraphQLDescription</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"This field does ...\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">GetGreetings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Parent</span></span><span class=\"token punctuation\">]</span><span class=\"token class-name\">Query</span> person<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// resolver code</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The above example class <code class=\"language-text\">SomeResolvers</code> provides resolvers for multiple types. The types can be declared with the <code class=\"language-text\">GraphQLResolverOfAttribute</code> either by providing the .NET entity type or by providing the schema type name. This resolver can be registered with the schema builder via <code class=\"language-text\">BindResolver&lt;SomeResolvers&gt;()</code> as shown here:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"78877970984125050000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`services.AddGraphQL(so =>\n    SchemaBuilder.New()\n        // ...\n        .BindResolver<SomeResolvers>()\n        // ...\n        .Create());`, `78877970984125050000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddGraphQL</span><span class=\"token punctuation\">(</span>so <span class=\"token operator\">=></span>\n    SchemaBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// ...</span>\n        <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">BindResolver</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>SomeResolvers<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// ...</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The schema builder will associate the various resolver methods with the correct schema fields and types by analysing the method parameters. We are providing a couple of attributes that can be used to give the resolver method more context like the return type or the description and so on.</p>\n<h1 id=\"resolver-dependency-injection\" style=\"position:relative;\"><a href=\"#resolver-dependency-injection\" aria-label=\"resolver dependency injection permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Resolver Dependency Injection</h1>\n<p>Hot Chocolate supports resolver parameter dependency injection. Basically we are able to inject things that we would usually get from the resolver context itself. This makes it clear what demands the resolver has.</p>\n<p>Let us have a look at an example:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"61856572983964280000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public Person GetFriend([Parent]Person person, IObjectField field)\n{\n    // resolver code\n}`, `61856572983964280000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Person</span> <span class=\"token function\">GetFriend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Parent</span></span><span class=\"token punctuation\">]</span><span class=\"token class-name\">Person</span> person<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IObjectField</span> field<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// resolver code</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The above resolver is injected with the previously resolved (parent) result and the field definition of the current field.</p>\n<p>Any property of the resolver context can be explicitly injected as argument.</p>\n<p>The following resolver context properties can be injected without any attributes:</p>\n<table>\n<thead>\n<tr>\n<th>Member</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">Schema</code></td>\n<td><code class=\"language-text\">ISchema</code></td>\n<td>The GraphQL schema.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">ObjectType</code></td>\n<td><code class=\"language-text\">ObjectType</code></td>\n<td>The object type on which the field resolver is being executed.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Field</code></td>\n<td><code class=\"language-text\">ObjectField</code></td>\n<td>The field on which the field resolver is being executed.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">QueryDocument</code></td>\n<td><code class=\"language-text\">DocumentNode</code></td>\n<td>The query that is being executed.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Operation</code></td>\n<td><code class=\"language-text\">OperationDefinitionNode</code></td>\n<td>The operation from the query that is being executed.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">FieldSelection</code></td>\n<td><code class=\"language-text\">FieldNode</code></td>\n<td>The field selection for which a field resolver is being executed.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Path</code></td>\n<td><code class=\"language-text\">Path</code></td>\n<td>The current execution path.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Argument&lt;T&gt;(string name)</code></td>\n<td><code class=\"language-text\">T</code></td>\n<td>Gets a specific field argument.</td>\n</tr>\n</tbody>\n</table>\n<p>The following resolver context data can be accessed by annotating the method argument with an attribute.</p>\n<h2 id=\"parent\" style=\"position:relative;\"><a href=\"#parent\" aria-label=\"parent permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a> Parent</h2>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"79585654849199390000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public Person GetFriend([Parent]Person person)\n{\n    // resolver code\n}`, `79585654849199390000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Person</span> <span class=\"token function\">GetFriend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Parent</span></span><span class=\"token punctuation\">]</span><span class=\"token class-name\">Person</span> person<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// resolver code</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"services\" style=\"position:relative;\"><a href=\"#services\" aria-label=\"services permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Services</h2>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"39346506510100636000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public Person GetFriend([Service]IPersonRepository repository)\n{\n    // resolver code\n}`, `39346506510100636000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Person</span> <span class=\"token function\">GetFriend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Service</span></span><span class=\"token punctuation\">]</span><span class=\"token class-name\">IPersonRepository</span> repository<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// resolver code</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"dataloader\" style=\"position:relative;\"><a href=\"#dataloader\" aria-label=\"dataloader permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a> DataLoader</h2>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"67736172786796630000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public Person GetFriend([DataLoader]IPersonDataLoader dataLoader)\n{\n    // resolver code\n}`, `67736172786796630000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Person</span> <span class=\"token function\">GetFriend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DataLoader</span></span><span class=\"token punctuation\">]</span><span class=\"token class-name\">IPersonDataLoader</span> dataLoader<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// resolver code</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Or</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"37750919604447080000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public Person GetFriend([DataLoader(&quot;ById&quot;)]IPersonDataLoader dataLoader)\n{\n    // resolver code\n}`, `37750919604447080000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Person</span> <span class=\"token function\">GetFriend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DataLoader</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"ById\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><span class=\"token class-name\">IPersonDataLoader</span> dataLoader<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// resolver code</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"state\" style=\"position:relative;\"><a href=\"#state\" aria-label=\"state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State</h2>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"43227608660918485000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public Person GetFriend([State(&quot;foo&quot;)]Bar bar)\n{\n    // resolver code\n}`, `43227608660918485000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Person</span> <span class=\"token function\">GetFriend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">State</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><span class=\"token class-name\">Bar</span> bar<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// resolver code</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"resolver-context-overview\" style=\"position:relative;\"><a href=\"#resolver-context-overview\" aria-label=\"resolver context overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Resolver Context Overview</h1>\n<table>\n<thead>\n<tr>\n<th>Member</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">Schema</code></td>\n<td><code class=\"language-text\">ISchema</code></td>\n<td>The GraphQL schema.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">ObjectType</code></td>\n<td><code class=\"language-text\">ObjectType</code></td>\n<td>The object type on which the field resolver is being executed.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Field</code></td>\n<td><code class=\"language-text\">ObjectField</code></td>\n<td>The field on which the field resolver is being executed.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">QueryDocument</code></td>\n<td><code class=\"language-text\">DocumentNode</code></td>\n<td>The query that is being executed.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Operation</code></td>\n<td><code class=\"language-text\">OperationDefinitionNode</code></td>\n<td>The operation from the query that is being executed.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">FieldSelection</code></td>\n<td><code class=\"language-text\">FieldNode</code></td>\n<td>The field selection for which a field resolver is being executed.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Path</code></td>\n<td><code class=\"language-text\">Path</code></td>\n<td>The current execution path.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Argument&lt;T&gt;(string name)</code></td>\n<td><code class=\"language-text\">T</code></td>\n<td>Gets a specific field argument.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Source</code></td>\n<td><code class=\"language-text\">ImmutableStack&lt;object&gt;</code></td>\n<td>The source stack contains all previous resolver results of the current execution path</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Parent&lt;T&gt;()</code></td>\n<td><code class=\"language-text\">T</code></td>\n<td>Gets the previous (parent) resolved result.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Service&lt;T&gt;()</code></td>\n<td><code class=\"language-text\">T</code></td>\n<td>Gets as specific service from the dependency injection container.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">CustomContext&lt;T&gt;()</code></td>\n<td><code class=\"language-text\">T</code></td>\n<td>Gets a specific custom context object that can be used to build up a state.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">DataLoader&lt;T&gt;(string key)</code></td>\n<td><code class=\"language-text\">T</code></td>\n<td>Gets a specific DataLoader.</td>\n</tr>\n</tbody>\n</table>","tableOfContents":"<ul>\n<li><a href=\"/hotchocolate/v10/schema/resolvers/#schema-first\">Schema-First</a></li>\n<li><a href=\"/hotchocolate/v10/schema/resolvers/#code-first\">Code-First</a></li>\n<li><a href=\"/hotchocolate/v10/schema/resolvers/#resolver-types\">Resolver Types</a></li>\n<li>\n<p><a href=\"/hotchocolate/v10/schema/resolvers/#resolver-dependency-injection\">Resolver Dependency Injection</a></p>\n<ul>\n<li><a href=\"/hotchocolate/v10/schema/resolvers/#parent\"> Parent</a></li>\n<li><a href=\"/hotchocolate/v10/schema/resolvers/#services\">Services</a></li>\n<li><a href=\"/hotchocolate/v10/schema/resolvers/#dataloader\"> DataLoader</a></li>\n<li><a href=\"/hotchocolate/v10/schema/resolvers/#state\">State</a></li>\n</ul>\n</li>\n<li><a href=\"/hotchocolate/v10/schema/resolvers/#resolver-context-overview\">Resolver Context Overview</a></li>\n</ul>"}},"site":{"siteMetadata":{"siteUrl":"https://chillicream.com","repositoryUrl":"https://github.com/ChilliCream/hotchocolate","tools":{"slack":"https://join.slack.com/t/hotchocolategraphql/shared_invite/enQtNTA4NjA0ODYwOTQ0LTViMzA2MTM4OWYwYjIxYzViYmM0YmZhYjdiNzBjOTg2ZmU1YmMwNDZiYjUyZWZlMzNiMTk1OWUxNWZhMzQwY2Q"}}},"config":{"products":[{"path":"hotchocolate","title":"Hot Chocolate","description":"Build your own thin GraphQL API layer on top of any resource.","versions":[{"path":"v10","title":"v10 (stable)","items":[{"path":"index","title":"Introduction","items":null},{"path":"code-first","title":"Code-First","items":null},{"path":"schema-first","title":"Schema-First","items":null},{"path":"schema","title":"Schema","items":[{"path":"index","title":"Schema"},{"path":"object-type","title":"Object Type"},{"path":"interface-type","title":"Interface Type"},{"path":"union-type","title":"Union Type"},{"path":"input-object-type","title":"Input Object Type"},{"path":"enum-type","title":"Enum Type"},{"path":"descriptions","title":"Schema Descriptions"},{"path":"custom-scalar-types","title":"Scalar Type Support"},{"path":"descriptor-attributes","title":"Descriptor Attributes"},{"path":"extending-types","title":"Custom Base Classes"},{"path":"directives","title":"Directives"},{"path":"resolvers","title":"Resolvers"},{"path":"relay","title":"Relay"},{"path":"conventions","title":"Conventions"},{"path":"options","title":"Schema Options"}]},{"path":"data-fetching","title":"Data Fetching","items":[{"path":"index","title":"Data Loaders"},{"path":"pagination","title":"Pagination"},{"path":"filters","title":"Filters"}]},{"path":"security","title":"Security","items":[{"path":"index","title":"Authorization"},{"path":"security","title":"Security"}]},{"path":"execution-engine","title":"Execution Engine","items":[{"path":"index","title":"Middleware"},{"path":"validation-rules","title":"Validation Rules"},{"path":"instrumentation","title":"Instrumentation"},{"path":"apollo-tracing","title":"Apollo Tracing"},{"path":"batching","title":"Batching"},{"path":"persisted-queries","title":"Persisted Queries"},{"path":"custom-context-data","title":"Custom Context Data"},{"path":"subscriptions","title":"Subscriptions"},{"path":"type-conversion","title":"Type Conversion"},{"path":"error-filter","title":"Error Filter"},{"path":"execution-options","title":"Execution Options"}]},{"path":"server","title":"Server","items":[{"path":"index","title":"ASP.Net"},{"path":"dependency-injection","title":"Dependency Injection"}]},{"path":"stitching","title":"Schema Stitching","items":null},{"path":"tooling","title":"Tooling","items":null},{"path":"advanced","title":"Advanced","items":[{"path":"index","title":"Parser"},{"path":"dotnet-cli","title":".Net CLI"}]},{"path":"tutorials","title":"Tutorials","items":[{"path":"index","title":"Entity Framework"}]},{"path":"examples","title":"Examples","items":[{"path":"index","title":"Star Wars"},{"path":"slack-clone","title":"Slack Clone"},{"path":"other-examples","title":"Other Examples"}]}]},{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null},{"path":"getting-started","title":"Getting Started","items":null},{"path":"defining-a-schema","title":"Defining a schema","items":[{"path":"index","title":"Schema basics"},{"path":"versioning","title":"Versioning"},{"path":"unions-and-interfaces","title":"Unions and Interfaces"},{"path":"scalars","title":"Scalars"},{"path":"directives","title":"Directives"}]},{"path":"fetching-data","title":"Fetching data","items":[{"path":"index","title":"Resolver"},{"path":"fetching-from-databases","title":"Fetching from Databases"},{"path":"fetching-from-rest","title":"Fetching from REST"},{"path":"dataloader","title":"DataLoader"},{"path":"pagination","title":"Pagination"},{"path":"filtering","title":"Filtering"},{"path":"sorting","title":"Sorting"}]},{"path":"api-reference","title":"API Reference","items":[{"path":"index","title":"Overview"},{"path":"language","title":"Lanugage"},{"path":"visitors","title":"Visitors"}]}]}]},{"path":"bananacakepop","title":"Banana Cake Pop","description":"Use this GUI to get deep insights from any GraphQL API.","versions":[{"path":"","title":"v1 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"strawberryshake","title":"Strawberry Shake","description":"Generate a unique GraphQL client for .Net to fetch data from any GraphQL API.","versions":[{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"marshmallowpie","title":"Marshmallow Pie","description":"Configure a GraphQL registry to keep track of any GraphQL server and client.","versions":[{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"greendonut","title":"Green Donut","description":"Configure data loaders and caching for GraphQL endpoints.","versions":[{"path":"v10","title":"v10 (stable)","items":[{"path":"index","title":"Introduction","items":null},{"path":"installation","title":"Installation","items":null},{"path":"usage","title":"Usage","items":null},{"path":"api","title":"API","items":null},{"path":"advanced-concepts","title":"Advanced Concepts","items":[{"path":"index","title":"Custom DataLoader"},{"path":"diagnostics","title":"Diagnostic Events"}]}]},{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]}]}},"pageContext":{"originPath":"hotchocolate/v10/schema/resolvers.md"}},"staticQueryHashes":["2890364758","4218812017","63159454"]}