{"componentChunkName":"component---src-templates-doc-page-template-tsx","path":"/docs/hotchocolate/v10/data-fetching/filters","result":{"data":{"file":{"childMdx":{"fields":{"slug":"/docs/hotchocolate/v10/data-fetching/filters","lastUpdated":"2020-09-17","lastAuthorName":"Rafael Staib"},"frontmatter":{"title":"Filter and Sorting Support"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Filter and Sorting Support\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"What are filters?\")), mdx(\"p\", null, \"With the Hot Chocolate filters you are able to expose complex filter object through your GraphQL API that translate to native database queries.\"), mdx(\"p\", null, \"The default filter implementation translates filters to expression trees that are applied on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IQueryable\"), \".\"), mdx(\"h1\", {\n    \"id\": \"using-filters\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#using-filters\",\n    \"aria-label\": \"using filters permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 512 512\",\n    \"width\": \"16\",\n    \"height\": \"16\",\n    \"fill\": \"var(--heading-text-color)\"\n  }, \"\\n                        \", mdx(\"path\", {\n    parentName: \"svg\",\n    \"d\": \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  }), \"\\n                      \")), \"Using Filters\"), mdx(\"p\", null, \"Filters by default work on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IQueryable\"), \" but you can also easily customize them to use other interfaces.\"), mdx(\"p\", null, \"Hot Chocolate by default will inspect your .NET model and infer from that the possible filter operations.\"), mdx(\"p\", null, \"The following type would yield the following filter operations:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public class Foo\\n{\\n    public string Bar { get; set; }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sdl\"\n  }, \"input FooFilter {\\n  bar: String\\n  bar_contains: String\\n  bar_ends_with: String\\n  bar_in: [String]\\n  bar_not: String\\n  bar_not_contains: String\\n  bar_not_ends_with: String\\n  bar_not_in: [String]\\n  bar_not_starts_with: String\\n  bar_starts_with: String\\n  AND: [FooFilter!]\\n  OR: [FooFilter!]\\n}\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"So how can we get started with filters?\")), mdx(\"p\", null, \"Getting started with filters is very easy and if you do not want to explicitly define filters or customize anything then filters are super easy to use, lets have a look at that.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public class QueryType\\n    : ObjectType<Query>\\n{\\n    protected override void Configure(IObjectTypeDescriptor<Query> descriptor)\\n    {\\n        descriptor.Field(t => t.GetPersons(default))\\n            .Type<ListType<NonNullType<PersonType>>>()\\n            .UseFiltering();\\n    }\\n}\\n\\npublic class Query\\n{\\n    public IQueryable<Person> GetPersons([Service]IPersonRepository repository)\\n    {\\n        repository.GetPersons();\\n    }\\n}\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\u26A0\\uFE0F \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note\"), \": Be sure to install the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HotChocolate.Types.Filters\"), \" NuGet package.\")), mdx(\"p\", null, \"In the above example the person resolver just returns the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IQueryable\"), \" representing the data source. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IQueryable\"), \" represents a not executed database query on which we are able to apply filters.\"), mdx(\"p\", null, \"The next thing to note is the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UseFiltering\"), \" extension method which adds the filter argument to the field and a middleware that can apply those filters to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IQueryable\"), \". The execution engine will in the end execute the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IQueryable\"), \" and fetch the data.\"), mdx(\"h1\", {\n    \"id\": \"customizing-filters\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#customizing-filters\",\n    \"aria-label\": \"customizing filters permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 512 512\",\n    \"width\": \"16\",\n    \"height\": \"16\",\n    \"fill\": \"var(--heading-text-color)\"\n  }, \"\\n                        \", mdx(\"path\", {\n    parentName: \"svg\",\n    \"d\": \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  }), \"\\n                      \")), \"Customizing Filters\"), mdx(\"p\", null, \"The filter objects can be customized and you can rename and remove operations from it or define operations explicitly.\"), mdx(\"p\", null, \"Filters are input objects and are defined through a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FilterInputType<T>\"), \". In order to define and customize a filter we have to inherit from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FilterInputType<T>\"), \" and configure it like any other type.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public class PersonFilterType\\n    : FilterInputType<Person>\\n{\\n    protected override void Configure(\\n        IFilterInputTypeDescriptor<Person> descriptor)\\n    {\\n        descriptor\\n            .BindFieldsExplicitly()\\n            .Filter(t => t.Name)\\n            .BindOperationsExplicitly()\\n            .AllowEquals().Name(\\\"equals\\\").And()\\n            .AllowContains().Name(\\\"contains\\\").And()\\n            .AllowIn().Name(\\\"in\\\");\\n    }\\n}\\n\")), mdx(\"p\", null, \"The above type defines explicitly for what fields filter operations are allowed and what filter operations are allowed. Also the filter renames the equals filter to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"equals\"), \".\"), mdx(\"p\", null, \"In order to apply this filter type we just have to provide the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UseFiltering\"), \" extension method with the filter type as type argument.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public class QueryType\\n    : ObjectType<Query>\\n{\\n    protected override void Configure(IObjectTypeDescriptor<Query> descriptor)\\n    {\\n        descriptor.Field(t => t.GetPerson(default))\\n            .Type<ListType<NonNullType<PersonType>>>();\\n            .UseFiltering<PersonFilterType>()\\n    }\\n}\\n\")), mdx(\"h1\", {\n    \"id\": \"and--or-filter\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#and--or-filter\",\n    \"aria-label\": \"and  or filter permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 512 512\",\n    \"width\": \"16\",\n    \"height\": \"16\",\n    \"fill\": \"var(--heading-text-color)\"\n  }, \"\\n                        \", mdx(\"path\", {\n    parentName: \"svg\",\n    \"d\": \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  }), \"\\n                      \")), \"AND / OR Filter\"), mdx(\"p\", null, \"There are two built in fields.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AND\"), \": Every condition has to be valid\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"OR\"), \" : At least one condition has to be valid\")), mdx(\"p\", null, \"Example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-graphql\"\n  }, \"query {\\n  posts(\\n    first: 5\\n    where: { OR: [{ title_contains: \\\"Doe\\\" }, { title_contains: \\\"John\\\" }] }\\n  ) {\\n    edges {\\n      node {\\n        id\\n        title\\n      }\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\u26A0\\uFE0F OR does not work when you use it like this: \")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-graphql\"\n  }, \"query {\\n  posts(\\n    first: 5\\n    where: { title_contains: \\\"John\\\", OR: { title_contains: \\\"Doe\\\" } }\\n  ) {\\n    edges {\\n      node {\\n        id\\n        title\\n      }\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"In this case the filters are applied like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"title_contains: \\\"John\\\" AND title_contains: \\\"Doe\\\"\")), mdx(\"h1\", {\n    \"id\": \"customizing-filter-transformation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#customizing-filter-transformation\",\n    \"aria-label\": \"customizing filter transformation permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 512 512\",\n    \"width\": \"16\",\n    \"height\": \"16\",\n    \"fill\": \"var(--heading-text-color)\"\n  }, \"\\n                        \", mdx(\"path\", {\n    parentName: \"svg\",\n    \"d\": \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  }), \"\\n                      \")), \"Customizing Filter Transformation\"), mdx(\"p\", null, \"With our filter solution you can write your own filter transformation which is fairly easy once you wrapped your head around transforming graphs with visitors.\"), mdx(\"p\", null, \"We provide a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FilterVisitorBase\"), \" which is the base of our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"QueryableFilterVisitor\"), \" and it is basically just implementing an new visitor that walks the filter graph and translates it into any other query syntax.\"), mdx(\"h1\", {\n    \"id\": \"sorting\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#sorting\",\n    \"aria-label\": \"sorting permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 512 512\",\n    \"width\": \"16\",\n    \"height\": \"16\",\n    \"fill\": \"var(--heading-text-color)\"\n  }, \"\\n                        \", mdx(\"path\", {\n    parentName: \"svg\",\n    \"d\": \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  }), \"\\n                      \")), \"Sorting\"), mdx(\"p\", null, \"Like with filter support you can add sorting support to your database queries.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public class QueryType\\n    : ObjectType<Query>\\n{\\n    protected override void Configure(IObjectTypeDescriptor<Query> descriptor)\\n    {\\n        descriptor.Field(t => t.GetPerson(default))\\n            .Type<ListType<NonNullType<PersonType>>>();\\n            .UseSorting()\\n    }\\n}\\n\")), mdx(\"p\", null, \"Example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-graphql\"\n  }, \"query {\\n  person(order_by: { name: DESC }) {\\n    name\\n    age\\n  }\\n}\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\u26A0\\uFE0F \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note\"), \": Be sure to install the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HotChocolate.Types.Sorting\"), \" NuGet package.\")), mdx(\"p\", null, \"If you want to combine for instance paging, filtering and sorting make sure that the order is like follows:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public class QueryType\\n    : ObjectType<Query>\\n{\\n    protected override void Configure(IObjectTypeDescriptor<Query> descriptor)\\n    {\\n        descriptor.Field(t => t.GetPerson(default))\\n            .UsePaging<PersonType>()\\n            .UseFiltering()\\n            .UseSorting();\\n    }\\n}\\n\")), mdx(\"p\", null, \"Example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-graphql\"\n  }, \"query {\\n  person(order_by: { name: DESC }) {\\n    edges {\\n      node {\\n        id\\n        name\\n      }\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Why is the order important?\")), mdx(\"p\", null, \"Paging, filtering and sorting are modular middleware which form the field resolver pipeline.\"), mdx(\"p\", null, \"The above example basically forms the following pipeline:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Paging -> Filtering -> Sorting -> Field Resolver\")), mdx(\"p\", null, \"The paging middleware will first delegate to the next middleware, which is filtering.\"), mdx(\"p\", null, \"The filtering middleware will also first delegate to the next middleware, which is sorting.\"), mdx(\"p\", null, \"The sorting middleware will again first delegate to the next middleware, which is the actual field resolver.\"), mdx(\"p\", null, \"The field resolver will call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GetPerson\"), \" which returns in this example an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IQueryable<Person>\"), \". The queryable represents a not yet executed database query.\"), mdx(\"p\", null, \"After the resolver has been executed and put its result onto the middleware context the sorting middleware will apply the sort order on the query.\"), mdx(\"p\", null, \"After the sorting middleware has been executed and updated the result on the middleware context the filtering middleware will apply its filters on the queryable and updates the result on the middleware context.\"), mdx(\"p\", null, \"After the paging middleware has been executed and updated the result on the middleware context the paging middleware will slice the data and execute the queryable which will then actually pull in data from the data source.\"), mdx(\"p\", null, \"So, if we for instance applied paging as our last middleware the data set would have been sliced first and then filtered which in most cases is not what we actually want.\"));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":1,"value":"Using Filters"},{"depth":1,"value":"Customizing Filters"},{"depth":1,"value":"AND / OR Filter"},{"depth":1,"value":"Customizing Filter Transformation"},{"depth":1,"value":"Sorting"}]}},"site":{"siteMetadata":{"siteUrl":"https://chillicream.com","repositoryUrl":"https://github.com/ChilliCream/hotchocolate","tools":{"slack":"https://bit.ly/joinchilli"}}},"config":{"products":[{"path":"hotchocolate","title":"Hot Chocolate","description":"Build your own thin GraphQL API layer on top of any resource.","versions":[{"path":"","title":"v11","items":[{"path":"index","title":"Introduction","items":null},{"path":"get-started","title":"Get Started","items":null},{"path":"defining-a-schema","title":"Defining a schema","items":[{"path":"index","title":"Overview"},{"path":"queries","title":"Queries"},{"path":"mutations","title":"Mutations"},{"path":"subscriptions","title":"Subscriptions"},{"path":"object-types","title":"Object Types"},{"path":"scalars","title":"Scalars"},{"path":"arguments","title":"Arguments"},{"path":"input-object-types","title":"Input Object Types"},{"path":"lists","title":"Lists"},{"path":"non-null","title":"Non-Null"},{"path":"enums","title":"Enums"},{"path":"interfaces","title":"Interfaces"},{"path":"unions","title":"Unions"},{"path":"extending-types","title":"Extending Types"},{"path":"directives","title":"Directives"},{"path":"documentation","title":"Documentation"},{"path":"versioning","title":"Versioning"}]},{"path":"fetching-data","title":"Fetching data","items":[{"path":"index","title":"Overview"},{"path":"resolvers","title":"Resolvers"},{"path":"fetching-from-databases","title":"Fetching from Databases"},{"path":"fetching-from-rest","title":"Fetching from REST"},{"path":"dataloader","title":"DataLoader"},{"path":"pagination","title":"Pagination"},{"path":"filtering","title":"Filtering"},{"path":"sorting","title":"Sorting"},{"path":"projections","title":"Projections"}]},{"path":"distributed-schema","title":"Distributed Schemas","items":[{"path":"index","title":"Overview"},{"path":"schema-stitching","title":"Schema Stitching"},{"path":"schema-federations","title":"Schema Federations"},{"path":"schema-configuration","title":"Schema Configuration"}]},{"path":"integrations","title":"Integrations","items":[{"path":"index","title":"Overview"},{"path":"entity-framework","title":"Entity Framework"},{"path":"mongodb","title":"MongoDB"},{"path":"spatial-data","title":"Spatial Data"}]},{"path":"performance","title":"Performance","items":[{"path":"index","title":"Overview"},{"path":"persisted-queries","title":"Persisted queries"},{"path":"automatic-persisted-queries","title":"Automatic persisted queries"}]},{"path":"security","title":"Security","items":[{"path":"index","title":"Overview"},{"path":"authentication","title":"Authentication"},{"path":"authorization","title":"Authorization"}]},{"path":"api-reference","title":"API Reference","items":[{"path":"index","title":"Overview"},{"path":"custom-attributes","title":"Custom Attributes"},{"path":"language","title":"Language"},{"path":"extending-filtering","title":"Extending Filtering"},{"path":"visitors","title":"Visitors"},{"path":"aspnetcore","title":"ASP.NET Core"},{"path":"dependency-injection","title":"Dependency Injection"},{"path":"executable","title":"Executable"},{"path":"apollo-tracing","title":"Apollo Tracing"},{"path":"migrate-from-10-to-11","title":"Migrate from 10.5 to 11.0"}]}]},{"path":"v10","title":"v10","items":[{"path":"index","title":"Introduction","items":null},{"path":"code-first","title":"Code-First","items":null},{"path":"schema-first","title":"Schema-First","items":null},{"path":"schema","title":"Schema","items":[{"path":"index","title":"Schema"},{"path":"object-type","title":"Object Type"},{"path":"interface-type","title":"Interface Type"},{"path":"union-type","title":"Union Type"},{"path":"input-object-type","title":"Input Object Type"},{"path":"enum-type","title":"Enum Type"},{"path":"descriptions","title":"Schema Descriptions"},{"path":"custom-scalar-types","title":"Scalar Type Support"},{"path":"descriptor-attributes","title":"Descriptor Attributes"},{"path":"extending-types","title":"Custom Base Classes"},{"path":"directives","title":"Directives"},{"path":"resolvers","title":"Resolvers"},{"path":"relay","title":"Relay"},{"path":"conventions","title":"Conventions"},{"path":"options","title":"Schema Options"}]},{"path":"data-fetching","title":"Data Fetching","items":[{"path":"index","title":"Data Loaders"},{"path":"pagination","title":"Pagination"},{"path":"filters","title":"Filters"}]},{"path":"security","title":"Security","items":[{"path":"index","title":"Authorization"},{"path":"security","title":"Security"}]},{"path":"execution-engine","title":"Execution Engine","items":[{"path":"index","title":"Middleware"},{"path":"validation-rules","title":"Validation Rules"},{"path":"instrumentation","title":"Instrumentation"},{"path":"apollo-tracing","title":"Apollo Tracing"},{"path":"batching","title":"Batching"},{"path":"persisted-queries","title":"Persisted Queries"},{"path":"custom-context-data","title":"Custom Context Data"},{"path":"subscriptions","title":"Subscriptions"},{"path":"type-conversion","title":"Type Conversion"},{"path":"error-filter","title":"Error Filter"},{"path":"execution-options","title":"Execution Options"}]},{"path":"server","title":"Server","items":[{"path":"index","title":"ASP.NET"},{"path":"dependency-injection","title":"Dependency Injection"}]},{"path":"stitching","title":"Schema Stitching","items":null},{"path":"tooling","title":"Tooling","items":null},{"path":"advanced","title":"Advanced","items":[{"path":"index","title":"Parser"},{"path":"dotnet-cli","title":".NET CLI"}]},{"path":"tutorials","title":"Tutorials","items":[{"path":"index","title":"Entity Framework"}]},{"path":"examples","title":"Examples","items":[{"path":"index","title":"Star Wars"},{"path":"slack-clone","title":"Slack Clone"},{"path":"other-examples","title":"Other Examples"}]}]}]},{"path":"bananacakepop","title":"Banana Cake Pop","description":"Use this GUI to get deep insights from any GraphQL API.","versions":[{"path":"","title":"v1","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"strawberryshake","title":"Strawberry Shake","description":"The only GraphQL client you will every need in the .NET ecosystem.","versions":[{"path":"","title":"v11","items":[{"path":"index","title":"Introduction","items":null},{"path":"get-started","title":"Get Started","items":[{"path":"index","title":"Blazor"},{"path":"xamarin","title":"Xamarin"},{"path":"console","title":"Console"}]},{"path":"subscriptions","title":"Subscriptions","items":null},{"path":"tooling","title":"Tooling / CLI","items":null},{"path":"caching","title":"Caching","items":[{"path":"index","title":"Overview"},{"path":"entities","title":"Entities"},{"path":"invalidation","title":"Invalidation"}]},{"path":"performance","title":"Performance","items":[{"path":"index","title":"Overview"},{"path":"persisted-queries","title":"Persisted Queries"},{"path":"persisted-state","title":"Persisted State"}]},{"path":"networking","title":"Networking","items":[{"path":"index","title":"Protocols"},{"path":"authentication","title":"Authentication"}]},{"path":"scalars","title":"Scalars","items":null}]}]},{"path":"greendonut","title":"Green Donut","description":"Configure data loaders and caching for GraphQL endpoints.","versions":[{"path":"","title":"v11","items":[{"path":"index","title":"Introduction","items":null}]},{"path":"v10","title":"v10","items":[{"path":"index","title":"Introduction","items":null},{"path":"installation","title":"Installation","items":null},{"path":"usage","title":"Usage","items":null},{"path":"api","title":"API","items":null},{"path":"advanced-concepts","title":"Advanced Concepts","items":[{"path":"index","title":"Custom DataLoader"},{"path":"diagnostics","title":"Diagnostic Events"}]}]}]}]}},"pageContext":{"originPath":"hotchocolate/v10/data-fetching/filters.md"}},"staticQueryHashes":["1981385993","2890364758","4218812017"]}