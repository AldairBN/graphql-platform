{"componentChunkName":"component---src-templates-doc-page-template-tsx","path":"/docs/hotchocolate/v10/security","result":{"data":{"file":{"childMarkdownRemark":{"fields":{"slug":"/hotchocolate/v10/security/"},"frontmatter":{"title":"Authorization"},"html":"<h1 id=\"authentication\" style=\"position:relative;\"><a href=\"#authentication\" aria-label=\"authentication permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Authentication</h1>\n<p>GraphQL as defined by the spec does not specify how a user has to authenticate against a schema in order to execute queries. GraphQL does not even specify how requests are sent to the server using HTTP or any other protocol. <em>Facebook</em> specified GraphQL as transport agnostic, meaning GraphQL focuses on one specific problem domain and does not try to solve other problems like how the transport might work, how authentication might work or how a schema implements authorization. These subjects are considered out of scope.</p>\n<p>If we are accessing GraphQL servers through HTTP then authenticating against a GraphQL server can be done in various ways and Hot Chocolate does not prescribe any particular.</p>\n<p>We basically can do it in any way ASP.NET core allows us to.</p>\n<p><a href=\"https://docs.microsoft.com/en-us/aspnet/core/security/authentication/?view=aspnetcore-3.1\">Overview of ASP.NET Core authentication</a></p>\n<h1 id=\"authorization\" style=\"position:relative;\"><a href=\"#authorization\" aria-label=\"authorization permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Authorization</h1>\n<p>Authorization on the other hand is something Hot Chocolate can provide some value to by introducing a way to authorize access to fields with the <code class=\"language-text\">@authorize</code>-directive.</p>\n<p>But let's start at the beginning with this. In order to add authorization capabilities to our schema add the following package to our project:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"42858736128893900000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`dotnet add package HotChocolate.AspNetCore.Authorization`, `42858736128893900000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">dotnet <span class=\"token function\">add</span> package HotChocolate.AspNetCore.Authorization</code></pre></div>\n<p>In order to use the <code class=\"language-text\">@authorize</code>-directive we have to register it like the following with our schema:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"22363922423530400000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`SchemaBuilder.New()\n  ...\n  .AddAuthorizeDirectiveType()\n  ...\n  .Create();`, `22363922423530400000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">SchemaBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddAuthorizeDirectiveType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Once we have done that we can add the <code class=\"language-text\">@authorize</code>-directive to object types or their fields.</p>\n<p>The <code class=\"language-text\">@authorize</code>-directive on a field takes precedence over one that is added on the object type definition.</p>\n<p>SDL-First:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"1211146634543025400\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`type Person @authorize {\n  name: String!\n  address: Address!\n}`, `1211146634543025400`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"sdl\"><pre class=\"language-sdl\"><code class=\"language-sdl\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Person</span> <span class=\"token directive function\">@authorize</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">address</span><span class=\"token punctuation\">:</span> Address<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Pure Code-First:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"37651256948250470000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`[Authorize]\npublic class Person\n{\n    public string Name { get; }\n    public Address Address { get; }\n}`, `37651256948250470000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Authorize</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Address</span> Address <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Code-First:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"11662912930366210000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class PersonType : ObjectType<Person>\n{\n    protected override Configure(IObjectTypeDescriptor<Person> descriptor)\n    {\n        descriptor.Authorize();\n        descriptor.Field(t => t.Address).Authorize();\n    }\n}`, `11662912930366210000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PersonType</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ObjectType<span class=\"token punctuation\">&lt;</span>Person<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IObjectTypeDescriptor<span class=\"token punctuation\">&lt;</span>Person<span class=\"token punctuation\">></span></span> descriptor<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Authorize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span>Address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Authorize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If we just add the <code class=\"language-text\">@authorize</code>-directive without specifying any arguments the authorize middleware will basically just enforces that a user is authenticated.</p>\n<p>If no user is authenticated the field middleware will raise a GraphQL error and the field value is set to null.</p>\n<blockquote>\n<p>If the field is a non-null field the standard GraphQL non-null violation propagation rule is applied like with any other GraphQL error and the fields along the path are removed until the execution engine reaches a nullable field or the while result was removed.</p>\n</blockquote>\n<h2 id=\"roles\" style=\"position:relative;\"><a href=\"#roles\" aria-label=\"roles permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Roles</h2>\n<p>In many cases role based authorization is sufficient and was already available with ASP.NET classic on the .NET Framework.</p>\n<p>Moreover, role based authorization is setup quickly and does not need any other setup then providing the roles.</p>\n<p>SDL-First:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"20689941416369463000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`type Person @authorize(roles: &quot;foo&quot;) {\n  name: String!\n  address: Address! @authorize(roles: [&quot;foo&quot;, &quot;bar&quot;])\n}`, `20689941416369463000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"sdl\"><pre class=\"language-sdl\"><code class=\"language-sdl\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Person</span> <span class=\"token directive function\">@authorize</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">roles</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">address</span><span class=\"token punctuation\">:</span> Address<span class=\"token operator\">!</span> <span class=\"token directive function\">@authorize</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">roles</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Pure Code-First:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"47009662606501500000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`[Authorize]\npublic class Person\n{\n    public string Name { get; }\n\n    [Authorize(Roles = new[] { &quot;foo&quot;, &quot;bar&quot; })]\n    public Address Address { get; }\n}`, `47009662606501500000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Authorize</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Authorize</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>Roles <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Address</span> Address <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Code-First:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"95677002903877680000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class PersonType : ObjectType<Person>\n{\n    protected override Configure(IObjectTypeDescriptor<Person> descriptor)\n    {\n        descriptor.Authorize(new [] {&quot;foo&quot;});\n        descriptor.Field(t => t.Address).Authorize(new [] {&quot;foo&quot;, &quot;bar&quot;});\n    }\n}`, `95677002903877680000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PersonType</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ObjectType<span class=\"token punctuation\">&lt;</span>Person<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IObjectTypeDescriptor<span class=\"token punctuation\">&lt;</span>Person<span class=\"token punctuation\">></span></span> descriptor<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Authorize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span>Address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Authorize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"policies\" style=\"position:relative;\"><a href=\"#policies\" aria-label=\"policies permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Policies</h2>\n<p>If we are using ASP.NET core then we can also opt-in using authorization policies.</p>\n<p>So taking our example from earlier we are instead of providing a role just provide a policy name:</p>\n<p>SDL-First:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"9692651983421708000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`type Person @authorize(policy: &quot;AllEmployees&quot;) {\n  name: String!\n  address: Address! @authorize(policy: &quot;SalesDepartment&quot;)\n}`, `9692651983421708000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"sdl\"><pre class=\"language-sdl\"><code class=\"language-sdl\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Person</span> <span class=\"token directive function\">@authorize</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">policy</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"AllEmployees\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">address</span><span class=\"token punctuation\">:</span> Address<span class=\"token operator\">!</span> <span class=\"token directive function\">@authorize</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">policy</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"SalesDepartment\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Pure Code-First:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"67952337944647030000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`[Authorize(Policy = &quot;AllEmployees&quot;)]\npublic class Person\n{\n    public string Name { get; }\n\n    [Authorize(Policy = &quot;SalesDepartment&quot;)]\n    public Address Address { get; }\n}`, `67952337944647030000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Authorize</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>Policy <span class=\"token operator\">=</span> <span class=\"token string\">\"AllEmployees\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Authorize</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>Policy <span class=\"token operator\">=</span> <span class=\"token string\">\"SalesDepartment\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Address</span> Address <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Code-First:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"66836000896896880000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class PersonType : ObjectType<Person>\n{\n    protected override Configure(IObjectTypeDescriptor<Person> descriptor)\n    {\n        descriptor.Authorize(&quot;AllEmployees&quot;);\n        descriptor.Field(t => t.Address).Authorize(&quot;SalesDepartment&quot;);\n    }\n}`, `66836000896896880000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PersonType</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ObjectType<span class=\"token punctuation\">&lt;</span>Person<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IObjectTypeDescriptor<span class=\"token punctuation\">&lt;</span>Person<span class=\"token punctuation\">></span></span> descriptor<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Authorize</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AllEmployees\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span>Address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Authorize</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SalesDepartment\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the above example the name field is accessible to all users that fall under the <code class=\"language-text\">AllEmployees</code> policy, whereas the directive on the address field takes precedence over the <code class=\"language-text\">@authorize</code>-directive on the object type. This means that only users that fall under the <code class=\"language-text\">SalesDepartment</code> policy can access the address field.</p>\n<blockquote>\n<p>It is important to note that <em>policy-based authorization</em> is only available with ASP.NET core.</p>\n</blockquote>\n<p>The <code class=\"language-text\">@authorize</code>-directive is repeatable, that means that we are able to chain the directives and only if all annotated conditions are true will we gain access to the data of the annotated field.</p>\n<p>SDL-First:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"18049981112134850000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`type Person {\n  name: String!\n  address: Address!\n  @authorize(policy: &quot;AllEmployees&quot;)\n  @authorize(policy: &quot;SalesDepartment&quot;)\n  @authorize(roles: &quot;FooBar&quot;)\n}`, `18049981112134850000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"sdl\"><pre class=\"language-sdl\"><code class=\"language-sdl\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">address</span><span class=\"token punctuation\">:</span> Address<span class=\"token operator\">!</span>\n  <span class=\"token directive function\">@authorize</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">policy</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"AllEmployees\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token directive function\">@authorize</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">policy</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"SalesDepartment\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token directive function\">@authorize</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">roles</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"FooBar\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Pure Code-First:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"45069181467319980000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class Person\n{\n    public string Name { get; }\n\n    [Authorize(Policy = &quot;AllEmployees&quot;)]\n    [Authorize(Policy = &quot;SalesDepartment&quot;)]\n    [Authorize(Policy = &quot;FooBar&quot;)]\n    public Address Address { get; }\n}`, `45069181467319980000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Authorize</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>Policy <span class=\"token operator\">=</span> <span class=\"token string\">\"AllEmployees\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Authorize</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>Policy <span class=\"token operator\">=</span> <span class=\"token string\">\"SalesDepartment\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Authorize</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>Policy <span class=\"token operator\">=</span> <span class=\"token string\">\"FooBar\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Address</span> Address <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Code-First:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"46473683960611360000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class PersonType : ObjectType<Person>\n{\n    protected override Configure(IObjectTypeDescriptor<Person> descriptor)\n    {\n        descriptor.Field(t => t.Address)\n          .Authorize(&quot;AllEmployees&quot;)\n          .Authorize(&quot;SalesDepartment&quot;)\n          .Authorize(&quot;FooBar&quot;);\n    }\n}`, `46473683960611360000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PersonType</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ObjectType<span class=\"token punctuation\">&lt;</span>Person<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IObjectTypeDescriptor<span class=\"token punctuation\">&lt;</span>Person<span class=\"token punctuation\">></span></span> descriptor<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span>Address<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">Authorize</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AllEmployees\"</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">Authorize</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SalesDepartment\"</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">Authorize</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FooBar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"policy-based-authorization-in-aspnet-core\" style=\"position:relative;\"><a href=\"#policy-based-authorization-in-aspnet-core\" aria-label=\"policy based authorization in aspnet core permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Policy-based authorization in ASP.NET Core</h1>\n<p>Policy-based authorization in ASP.NET Core does not any longer prescribe us in which way we describe our requirements. Now, with policy-based authorization we could just say that a certain field can only be accessed if the user is 21 or older or that a user did provide his passport as evidence of his/her identity.</p>\n<p>So, in order to define those requirements we can define policies that essentially describe and validate our requirements and the rules that enforce them.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"24012794759155364000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`services.AddAuthorization(options =>\n{\n    options.AddPolicy(&quot;HasCountry&quot;, policy =>\n        policy.RequireAssertion(context =>\n            context.User.HasClaim(c => (c.Type == ClaimTypes.Country))));\n});`, `24012794759155364000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddAuthorization</span><span class=\"token punctuation\">(</span>options <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    options<span class=\"token punctuation\">.</span><span class=\"token function\">AddPolicy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HasCountry\"</span><span class=\"token punctuation\">,</span> policy <span class=\"token operator\">=></span>\n        policy<span class=\"token punctuation\">.</span><span class=\"token function\">RequireAssertion</span><span class=\"token punctuation\">(</span>context <span class=\"token operator\">=></span>\n            context<span class=\"token punctuation\">.</span>User<span class=\"token punctuation\">.</span><span class=\"token function\">HasClaim</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>Type <span class=\"token operator\">==</span> ClaimTypes<span class=\"token punctuation\">.</span>Country<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The good thing with policies is that we decouple the actual authorization rules from our GraphQL resolver logic which makes the whole thing better testable.</p>\n<p>One important aspect with policies is also that we are passing the resolver context as resource into the policy so that we have access to all the data of our resolver.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"87077052398499250000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class SalesDepartmentAuthorizationHandler\n    :  AuthorizationHandler<SalesDepartmentRequirement, IResolverContext>\n{\n    protected override Task HandleRequirementAsync(\n        AuthorizationHandlerContext context,\n        SalesDepartmentRequirement requirement,\n        IResolverContext resource)\n    {\n        if (context.User.HasClaim(...))\n        {\n            context.Succeed(requirement);\n        }\n\n        return Task.CompletedTask;\n    }\n}\n\npublic class SalesDepartmentRequirement : IAuthorizationRequirement { }\n\nservices.AddAuthorization(options =>\n{\n    options.AddPolicy(&quot;SalesDepartment&quot;,\n        policy => policy.Requirements.Add(new SalesDepartmentRequirement()));\n});\n\nservices.AddSingleton<IAuthorizationHandler, SalesDepartmentAuthorizationHandler>();`, `87077052398499250000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SalesDepartmentAuthorizationHandler</span>\n    <span class=\"token punctuation\">:</span>  <span class=\"token type-list\"><span class=\"token class-name\">AuthorizationHandler<span class=\"token punctuation\">&lt;</span>SalesDepartmentRequirement<span class=\"token punctuation\">,</span> IResolverContext<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">HandleRequirementAsync</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">AuthorizationHandlerContext</span> context<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">SalesDepartmentRequirement</span> requirement<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">IResolverContext</span> resource<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>User<span class=\"token punctuation\">.</span><span class=\"token function\">HasClaim</span><span class=\"token punctuation\">(</span><span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            context<span class=\"token punctuation\">.</span><span class=\"token function\">Succeed</span><span class=\"token punctuation\">(</span>requirement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> Task<span class=\"token punctuation\">.</span>CompletedTask<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SalesDepartmentRequirement</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IAuthorizationRequirement</span></span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\nservices<span class=\"token punctuation\">.</span><span class=\"token function\">AddAuthorization</span><span class=\"token punctuation\">(</span>options <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    options<span class=\"token punctuation\">.</span><span class=\"token function\">AddPolicy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SalesDepartment\"</span><span class=\"token punctuation\">,</span>\n        policy <span class=\"token operator\">=></span> policy<span class=\"token punctuation\">.</span>Requirements<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SalesDepartmentRequirement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nservices<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IAuthorizationHandler<span class=\"token punctuation\">,</span> SalesDepartmentAuthorizationHandler<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <code class=\"language-text\">@authorize</code>-directive essentially uses the provided policy and runs it against the <code class=\"language-text\">ClaimsPrinciple</code> that is associated with the current request.</p>\n<p>More about policy-based authorization can be found in the Microsoft Documentation:\n<a href=\"https://docs.microsoft.com/en-us/aspnet/core/security/authorization/policies?view=aspnetcore-2.1\">Policy-based authorization in ASP.NET Core | Microsoft Docs</a></p>\n<h1 id=\"query-requests\" style=\"position:relative;\"><a href=\"#query-requests\" aria-label=\"query requests permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Query Requests</h1>\n<p>Our query middleware creates a request and passes the request with additional meta-data to the query-engine. For example we provide a property called <code class=\"language-text\">ClaimsIdentity</code> that contains the user associated with the current request. These meta-data or custom request properties can be used within a field-middleware like the authorize middleware to change the default execution of a field resolver.</p>\n<p>So, we could use an authentication-middleware in ASP.NET core to add all the user meta-data that we need to our claim-identity or we could hook up some code in our middleware and add additional meta-data or even modify the <code class=\"language-text\">ClaimsPrincipal</code>.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"87546026872141610000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`services.AddQueryRequestInterceptor((ctx, builder, ct) =>\n{\n    var identity = new ClaimsIdentity();\n    identity.AddClaim(new Claim(ClaimTypes.Country, &quot;us&quot;));\n    ctx.User.AddIdentity(identity);\n    return Task.CompletedTask;\n});`, `87546026872141610000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddQueryRequestInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> builder<span class=\"token punctuation\">,</span> ct<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> identity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ClaimsIdentity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    identity<span class=\"token punctuation\">.</span><span class=\"token function\">AddClaim</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Claim</span><span class=\"token punctuation\">(</span>ClaimTypes<span class=\"token punctuation\">.</span>Country<span class=\"token punctuation\">,</span> <span class=\"token string\">\"us\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ctx<span class=\"token punctuation\">.</span>User<span class=\"token punctuation\">.</span><span class=\"token function\">AddIdentity</span><span class=\"token punctuation\">(</span>identity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> Task<span class=\"token punctuation\">.</span>CompletedTask<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <code class=\"language-text\">OnCreateRequestAsync</code>-delegate can be used for many other things and is not really for authorization but can be useful in dev-scenarios where we want to simulate a certain user etc..</p>","tableOfContents":"<ul>\n<li><a href=\"/hotchocolate/v10/security/#authentication\">Authentication</a></li>\n<li>\n<p><a href=\"/hotchocolate/v10/security/#authorization\">Authorization</a></p>\n<ul>\n<li><a href=\"/hotchocolate/v10/security/#roles\">Roles</a></li>\n<li><a href=\"/hotchocolate/v10/security/#policies\">Policies</a></li>\n</ul>\n</li>\n<li><a href=\"/hotchocolate/v10/security/#policy-based-authorization-in-aspnet-core\">Policy-based authorization in ASP.NET Core</a></li>\n<li><a href=\"/hotchocolate/v10/security/#query-requests\">Query Requests</a></li>\n</ul>"}},"site":{"siteMetadata":{"siteUrl":"https://chillicream.com","repositoryUrl":"https://github.com/ChilliCream/hotchocolate","tools":{"slack":"https://join.slack.com/t/hotchocolategraphql/shared_invite/enQtNTA4NjA0ODYwOTQ0LTViMzA2MTM4OWYwYjIxYzViYmM0YmZhYjdiNzBjOTg2ZmU1YmMwNDZiYjUyZWZlMzNiMTk1OWUxNWZhMzQwY2Q"}}},"config":{"products":[{"path":"hotchocolate","title":"Hot Chocolate","description":"Build your own thin GraphQL API layer on top of any resource.","versions":[{"path":"v10","title":"v10 (stable)","items":[{"path":"index","title":"Introduction","items":null},{"path":"code-first","title":"Code-First","items":null},{"path":"schema-first","title":"Schema-First","items":null},{"path":"schema","title":"Schema","items":[{"path":"index","title":"Schema"},{"path":"object-type","title":"Object Type"},{"path":"interface-type","title":"Interface Type"},{"path":"union-type","title":"Union Type"},{"path":"input-object-type","title":"Input Object Type"},{"path":"enum-type","title":"Enum Type"},{"path":"descriptions","title":"Schema Descriptions"},{"path":"custom-scalar-types","title":"Scalar Type Support"},{"path":"descriptor-attributes","title":"Descriptor Attributes"},{"path":"extending-types","title":"Custom Base Classes"},{"path":"directives","title":"Directives"},{"path":"resolvers","title":"Resolvers"},{"path":"relay","title":"Relay"},{"path":"conventions","title":"Conventions"},{"path":"options","title":"Schema Options"}]},{"path":"data-fetching","title":"Data Fetching","items":[{"path":"index","title":"Data Loaders"},{"path":"pagination","title":"Pagination"},{"path":"filters","title":"Filters"}]},{"path":"security","title":"Security","items":[{"path":"index","title":"Authorization"},{"path":"security","title":"Security"}]},{"path":"execution-engine","title":"Execution Engine","items":[{"path":"index","title":"Middleware"},{"path":"validation-rules","title":"Validation Rules"},{"path":"instrumentation","title":"Instrumentation"},{"path":"apollo-tracing","title":"Apollo Tracing"},{"path":"batching","title":"Batching"},{"path":"persisted-queries","title":"Persisted Queries"},{"path":"custom-context-data","title":"Custom Context Data"},{"path":"subscriptions","title":"Subscriptions"},{"path":"type-conversion","title":"Type Conversion"},{"path":"error-filter","title":"Error Filter"},{"path":"execution-options","title":"Execution Options"}]},{"path":"server","title":"Server","items":[{"path":"index","title":"ASP.Net"},{"path":"dependency-injection","title":"Dependency Injection"}]},{"path":"stitching","title":"Schema Stitching","items":null},{"path":"tooling","title":"Tooling","items":null},{"path":"advanced","title":"Advanced","items":[{"path":"index","title":"Parser"},{"path":"dotnet-cli","title":".Net CLI"}]},{"path":"tutorials","title":"Tutorials","items":[{"path":"index","title":"MongoDB"}]},{"path":"examples","title":"Examples","items":[{"path":"index","title":"Star Wars"},{"path":"slack-clone","title":"Slack Clone"},{"path":"other-examples","title":"Other Examples"}]}]},{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null},{"path":"getting-started","title":"Getting Started","items":null},{"path":"defining-a-schema","title":"Defining a schema","items":[{"path":"index","title":"Schema basics"},{"path":"versioning","title":"Versioning"},{"path":"unions-and-interfaces","title":"Unions and Interfaces"},{"path":"scalars","title":"Scalars"},{"path":"directives","title":"Directives"}]},{"path":"fetching-data","title":"Fetching data","items":[{"path":"index","title":"Resolver"},{"path":"fetching-from-databases","title":"Fetching from Databases"},{"path":"fetching-from-rest","title":"Fetching from REST"},{"path":"dataloader","title":"DataLoader"},{"path":"pagination","title":"Pagination"},{"path":"filtering","title":"Filtering"},{"path":"sorting","title":"Sorting"}]},{"path":"api-reference","title":"API Reference","items":[{"path":"index","title":"Overview"},{"path":"language","title":"Lanugage"},{"path":"visitors","title":"Visitors"}]}]}]},{"path":"bananacakepop","title":"Banana Cake Pop","description":"Use this GUI to get deep insights from any GraphQL API.","versions":[{"path":"","title":"v1 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"strawberryshake","title":"Strawberry Shake","description":"Generate a unique GraphQL client for .Net to fetch data from any GraphQL API.","versions":[{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"marshmallowpie","title":"Marshmallow Pie","description":"Configure a GraphQL registry to keep track of any GraphQL server and client.","versions":[{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"greendonut","title":"Green Donut","description":"Configure data loaders and caching for GraphQL endpoints.","versions":[{"path":"v10","title":"v10 (stable)","items":[{"path":"index","title":"Introduction","items":null},{"path":"installation","title":"Installation","items":null},{"path":"usage","title":"Usage","items":null},{"path":"api","title":"API","items":null},{"path":"advanced-concepts","title":"Advanced Concepts","items":[{"path":"index","title":"Custom DataLoader"},{"path":"diagnostics","title":"Diagnostic Events"}]}]},{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]}]}},"pageContext":{"originPath":"hotchocolate/v10/security/index.md"}},"staticQueryHashes":["2890364758","4218812017","63159454"]}