{"componentChunkName":"component---src-templates-doc-page-template-tsx","path":"/docs/hotchocolate/v10/security","result":{"data":{"file":{"childMdx":{"fields":{"slug":"/hotchocolate/v10/security/"},"frontmatter":{"title":"Authorization"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Authorization\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Authentication\"), mdx(\"p\", null, \"GraphQL as defined by the spec does not specify how a user has to authenticate against a schema in order to execute queries. GraphQL does not even specify how requests are sent to the server using HTTP or any other protocol. \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Facebook\"), \" specified GraphQL as transport agnostic, meaning GraphQL focuses on one specific problem domain and does not try to solve other problems like how the transport might work, how authentication might work or how a schema implements authorization. These subjects are considered out of scope.\"), mdx(\"p\", null, \"If we are accessing GraphQL servers through HTTP then authenticating against a GraphQL server can be done in various ways and Hot Chocolate does not prescribe any particular.\"), mdx(\"p\", null, \"We basically can do it in any way ASP.NET core allows us to.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.microsoft.com/en-us/aspnet/core/security/authentication/?view=aspnetcore-3.1\"\n  }), \"Overview of ASP.NET Core authentication\")), mdx(\"h1\", null, \"Authorization\"), mdx(\"p\", null, \"Authorization on the other hand is something Hot Chocolate can provide some value to by introducing a way to authorize access to fields with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@authorize\"), \"-directive.\"), mdx(\"p\", null, \"But let's start at the beginning with this. In order to add authorization capabilities to our schema add the following package to our project:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"dotnet add package HotChocolate.AspNetCore.Authorization\\n\")), mdx(\"p\", null, \"In order to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@authorize\"), \"-directive we have to register it like the following with our schema:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"SchemaBuilder.New()\\n  ...\\n  .AddAuthorizeDirectiveType()\\n  ...\\n  .Create();\\n\")), mdx(\"p\", null, \"Once we have done that we can add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@authorize\"), \"-directive to object types or their fields.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@authorize\"), \"-directive on a field takes precedence over one that is added on the object type definition.\"), mdx(\"p\", null, \"SDL-First:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sdl\"\n  }), \"type Person @authorize {\\n  name: String!\\n  address: Address!\\n}\\n\")), mdx(\"p\", null, \"Pure Code-First:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"[Authorize]\\npublic class Person\\n{\\n    public string Name { get; }\\n    public Address Address { get; }\\n}\\n\")), mdx(\"p\", null, \"Code-First:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"public class PersonType : ObjectType<Person>\\n{\\n    protected override Configure(IObjectTypeDescriptor<Person> descriptor)\\n    {\\n        descriptor.Authorize();\\n        descriptor.Field(t => t.Address).Authorize();\\n    }\\n}\\n\")), mdx(\"p\", null, \"If we just add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@authorize\"), \"-directive without specifying any arguments the authorize middleware will basically just enforces that a user is authenticated.\"), mdx(\"p\", null, \"If no user is authenticated the field middleware will raise a GraphQL error and the field value is set to null.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"If the field is a non-null field the standard GraphQL non-null violation propagation rule is applied like with any other GraphQL error and the fields along the path are removed until the execution engine reaches a nullable field or the while result was removed.\")), mdx(\"h2\", null, \"Roles\"), mdx(\"p\", null, \"In many cases role based authorization is sufficient and was already available with ASP.NET classic on the .NET Framework.\"), mdx(\"p\", null, \"Moreover, role based authorization is setup quickly and does not need any other setup then providing the roles.\"), mdx(\"p\", null, \"SDL-First:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sdl\"\n  }), \"type Person @authorize(roles: \\\"foo\\\") {\\n  name: String!\\n  address: Address! @authorize(roles: [\\\"foo\\\", \\\"bar\\\"])\\n}\\n\")), mdx(\"p\", null, \"Pure Code-First:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"[Authorize]\\npublic class Person\\n{\\n    public string Name { get; }\\n\\n    [Authorize(Roles = new[] { \\\"foo\\\", \\\"bar\\\" })]\\n    public Address Address { get; }\\n}\\n\")), mdx(\"p\", null, \"Code-First:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"public class PersonType : ObjectType<Person>\\n{\\n    protected override Configure(IObjectTypeDescriptor<Person> descriptor)\\n    {\\n        descriptor.Authorize(new [] {\\\"foo\\\"});\\n        descriptor.Field(t => t.Address).Authorize(new [] {\\\"foo\\\", \\\"bar\\\"});\\n    }\\n}\\n\")), mdx(\"h2\", null, \"Policies\"), mdx(\"p\", null, \"If we are using ASP.NET core then we can also opt-in using authorization policies.\"), mdx(\"p\", null, \"So taking our example from earlier we are instead of providing a role just provide a policy name:\"), mdx(\"p\", null, \"SDL-First:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sdl\"\n  }), \"type Person @authorize(policy: \\\"AllEmployees\\\") {\\n  name: String!\\n  address: Address! @authorize(policy: \\\"SalesDepartment\\\")\\n}\\n\")), mdx(\"p\", null, \"Pure Code-First:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"[Authorize(Policy = \\\"AllEmployees\\\")]\\npublic class Person\\n{\\n    public string Name { get; }\\n\\n    [Authorize(Policy = \\\"SalesDepartment\\\")]\\n    public Address Address { get; }\\n}\\n\")), mdx(\"p\", null, \"Code-First:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"public class PersonType : ObjectType<Person>\\n{\\n    protected override Configure(IObjectTypeDescriptor<Person> descriptor)\\n    {\\n        descriptor.Authorize(\\\"AllEmployees\\\");\\n        descriptor.Field(t => t.Address).Authorize(\\\"SalesDepartment\\\");\\n    }\\n}\\n\")), mdx(\"p\", null, \"In the above example the name field is accessible to all users that fall under the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AllEmployees\"), \" policy, whereas the directive on the address field takes precedence over the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@authorize\"), \"-directive on the object type. This means that only users that fall under the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SalesDepartment\"), \" policy can access the address field.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"It is important to note that \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"policy-based authorization\"), \" is only available with ASP.NET core.\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@authorize\"), \"-directive is repeatable, that means that we are able to chain the directives and only if all annotated conditions are true will we gain access to the data of the annotated field.\"), mdx(\"p\", null, \"SDL-First:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sdl\"\n  }), \"type Person {\\n  name: String!\\n  address: Address!\\n  @authorize(policy: \\\"AllEmployees\\\")\\n  @authorize(policy: \\\"SalesDepartment\\\")\\n  @authorize(roles: \\\"FooBar\\\")\\n}\\n\")), mdx(\"p\", null, \"Pure Code-First:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"public class Person\\n{\\n    public string Name { get; }\\n\\n    [Authorize(Policy = \\\"AllEmployees\\\")]\\n    [Authorize(Policy = \\\"SalesDepartment\\\")]\\n    [Authorize(Policy = \\\"FooBar\\\")]\\n    public Address Address { get; }\\n}\\n\")), mdx(\"p\", null, \"Code-First:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"public class PersonType : ObjectType<Person>\\n{\\n    protected override Configure(IObjectTypeDescriptor<Person> descriptor)\\n    {\\n        descriptor.Field(t => t.Address)\\n          .Authorize(\\\"AllEmployees\\\")\\n          .Authorize(\\\"SalesDepartment\\\")\\n          .Authorize(\\\"FooBar\\\");\\n    }\\n}\\n\")), mdx(\"h1\", null, \"Policy-based authorization in ASP.NET Core\"), mdx(\"p\", null, \"Policy-based authorization in ASP.NET Core does not any longer prescribe us in which way we describe our requirements. Now, with policy-based authorization we could just say that a certain field can only be accessed if the user is 21 or older or that a user did provide his passport as evidence of his/her identity.\"), mdx(\"p\", null, \"So, in order to define those requirements we can define policies that essentially describe and validate our requirements and the rules that enforce them.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"services.AddAuthorization(options =>\\n{\\n    options.AddPolicy(\\\"HasCountry\\\", policy =>\\n        policy.RequireAssertion(context =>\\n            context.User.HasClaim(c => (c.Type == ClaimTypes.Country))));\\n});\\n\")), mdx(\"p\", null, \"The good thing with policies is that we decouple the actual authorization rules from our GraphQL resolver logic which makes the whole thing better testable.\"), mdx(\"p\", null, \"One important aspect with policies is also that we are passing the resolver context as resource into the policy so that we have access to all the data of our resolver.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"public class SalesDepartmentAuthorizationHandler\\n    :  AuthorizationHandler<SalesDepartmentRequirement, IResolverContext>\\n{\\n    protected override Task HandleRequirementAsync(\\n        AuthorizationHandlerContext context,\\n        SalesDepartmentRequirement requirement,\\n        IResolverContext resource)\\n    {\\n        if (context.User.HasClaim(...))\\n        {\\n            context.Succeed(requirement);\\n        }\\n\\n        return Task.CompletedTask;\\n    }\\n}\\n\\npublic class SalesDepartmentRequirement : IAuthorizationRequirement { }\\n\\nservices.AddAuthorization(options =>\\n{\\n    options.AddPolicy(\\\"SalesDepartment\\\",\\n        policy => policy.Requirements.Add(new SalesDepartmentRequirement()));\\n});\\n\\nservices.AddSingleton<IAuthorizationHandler, SalesDepartmentAuthorizationHandler>();\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@authorize\"), \"-directive essentially uses the provided policy and runs it against the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ClaimsPrinciple\"), \" that is associated with the current request.\"), mdx(\"p\", null, \"More about policy-based authorization can be found in the Microsoft Documentation:\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.microsoft.com/en-us/aspnet/core/security/authorization/policies?view=aspnetcore-2.1\"\n  }), \"Policy-based authorization in ASP.NET Core | Microsoft Docs\")), mdx(\"h1\", null, \"Query Requests\"), mdx(\"p\", null, \"Our query middleware creates a request and passes the request with additional meta-data to the query-engine. For example we provide a property called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ClaimsIdentity\"), \" that contains the user associated with the current request. These meta-data or custom request properties can be used within a field-middleware like the authorize middleware to change the default execution of a field resolver.\"), mdx(\"p\", null, \"So, we could use an authentication-middleware in ASP.NET core to add all the user meta-data that we need to our claim-identity or we could hook up some code in our middleware and add additional meta-data or even modify the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ClaimsPrincipal\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"services.AddQueryRequestInterceptor((ctx, builder, ct) =>\\n{\\n    var identity = new ClaimsIdentity();\\n    identity.AddClaim(new Claim(ClaimTypes.Country, \\\"us\\\"));\\n    ctx.User.AddIdentity(identity);\\n    return Task.CompletedTask;\\n});\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OnCreateRequestAsync\"), \"-delegate can be used for many other things and is not really for authorization but can be useful in dev-scenarios where we want to simulate a certain user etc..\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#authentication","title":"Authentication"},{"url":"#authorization","title":"Authorization","items":[{"url":"#roles","title":"Roles"},{"url":"#policies","title":"Policies"}]},{"url":"#policy-based-authorization-in-aspnet-core","title":"Policy-based authorization in ASP.NET Core"},{"url":"#query-requests","title":"Query Requests"}]}}},"site":{"siteMetadata":{"siteUrl":"https://chillicream.com","repositoryUrl":"https://github.com/ChilliCream/hotchocolate","tools":{"slack":"http://bit.ly/joinchilli"}}},"config":{"products":[{"path":"hotchocolate","title":"Hot Chocolate","description":"Build your own thin GraphQL API layer on top of any resource.","versions":[{"path":"","title":"v11 (latest)","items":[{"path":"index","title":"Introduction","items":null},{"path":"get-started","title":"Get Started","items":null},{"path":"defining-a-schema","title":"Defining a schema","items":[{"path":"index","title":"Schema basics"},{"path":"versioning","title":"Versioning"},{"path":"unions-and-interfaces","title":"Unions and Interfaces"},{"path":"scalars","title":"Scalars"},{"path":"directives","title":"Directives"}]},{"path":"fetching-data","title":"Fetching data","items":[{"path":"index","title":"Resolver"},{"path":"fetching-from-databases","title":"Fetching from Databases"},{"path":"fetching-from-rest","title":"Fetching from REST"},{"path":"dataloader","title":"DataLoader"},{"path":"pagination","title":"Pagination"},{"path":"filtering","title":"Filtering"},{"path":"sorting","title":"Sorting"},{"path":"projections","title":"Projections"}]},{"path":"integrations","title":"Integrations","items":[{"path":"index","title":"Overview"},{"path":"entity-framework","title":"Entity Framework"},{"path":"spatial-data","title":"Spatial Data"}]},{"path":"performance","title":"Performance","items":[{"path":"index","title":"Overview"},{"path":"persisted-queries","title":"Persisted queries"},{"path":"automatic-persisted-queries","title":"Automatic persisted queries"}]},{"path":"api-reference","title":"API Reference","items":[{"path":"index","title":"Overview"},{"path":"object-type","title":"Object Type"},{"path":"language","title":"Language"},{"path":"extending-filtering","title":"Extending Filtering"},{"path":"visitors","title":"Visitors"},{"path":"aspnetcore","title":"ASP.NET Core"},{"path":"executable","title":"Executable"},{"path":"migrate-from-10-to-11","title":"Migrate from 10.5 to 11.0"}]}]},{"path":"v10","title":"v10 (previous)","items":[{"path":"index","title":"Introduction","items":null},{"path":"code-first","title":"Code-First","items":null},{"path":"schema-first","title":"Schema-First","items":null},{"path":"schema","title":"Schema","items":[{"path":"index","title":"Schema"},{"path":"object-type","title":"Object Type"},{"path":"interface-type","title":"Interface Type"},{"path":"union-type","title":"Union Type"},{"path":"input-object-type","title":"Input Object Type"},{"path":"enum-type","title":"Enum Type"},{"path":"descriptions","title":"Schema Descriptions"},{"path":"custom-scalar-types","title":"Scalar Type Support"},{"path":"descriptor-attributes","title":"Descriptor Attributes"},{"path":"extending-types","title":"Custom Base Classes"},{"path":"directives","title":"Directives"},{"path":"resolvers","title":"Resolvers"},{"path":"relay","title":"Relay"},{"path":"conventions","title":"Conventions"},{"path":"options","title":"Schema Options"}]},{"path":"data-fetching","title":"Data Fetching","items":[{"path":"index","title":"Data Loaders"},{"path":"pagination","title":"Pagination"},{"path":"filters","title":"Filters"}]},{"path":"security","title":"Security","items":[{"path":"index","title":"Authorization"},{"path":"security","title":"Security"}]},{"path":"execution-engine","title":"Execution Engine","items":[{"path":"index","title":"Middleware"},{"path":"validation-rules","title":"Validation Rules"},{"path":"instrumentation","title":"Instrumentation"},{"path":"apollo-tracing","title":"Apollo Tracing"},{"path":"batching","title":"Batching"},{"path":"persisted-queries","title":"Persisted Queries"},{"path":"custom-context-data","title":"Custom Context Data"},{"path":"subscriptions","title":"Subscriptions"},{"path":"type-conversion","title":"Type Conversion"},{"path":"error-filter","title":"Error Filter"},{"path":"execution-options","title":"Execution Options"}]},{"path":"server","title":"Server","items":[{"path":"index","title":"ASP.Net"},{"path":"dependency-injection","title":"Dependency Injection"}]},{"path":"stitching","title":"Schema Stitching","items":null},{"path":"tooling","title":"Tooling","items":null},{"path":"advanced","title":"Advanced","items":[{"path":"index","title":"Parser"},{"path":"dotnet-cli","title":".Net CLI"}]},{"path":"tutorials","title":"Tutorials","items":[{"path":"index","title":"Entity Framework"}]},{"path":"examples","title":"Examples","items":[{"path":"index","title":"Star Wars"},{"path":"slack-clone","title":"Slack Clone"},{"path":"other-examples","title":"Other Examples"}]}]}]},{"path":"bananacakepop","title":"Banana Cake Pop","description":"Use this GUI to get deep insights from any GraphQL API.","versions":[{"path":"","title":"v1 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"strawberryshake","title":"Strawberry Shake","description":"The only GraphQL client you will every need in the .NET ecosystem.","versions":[{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null},{"path":"get-started","title":"Get Started","items":[{"path":"index","title":"Blazor"},{"path":"xamarin","title":"Xamarin"},{"path":"console","title":"Console"}]},{"path":"subscriptions","title":"Subscriptions","items":null},{"path":"tooling","title":"Tooling / CLI","items":null},{"path":"caching","title":"Caching","items":[{"path":"index","title":"Overview"},{"path":"entities","title":"Entities"},{"path":"invalidation","title":"Invalidation"}]},{"path":"performance","title":"Performance","items":[{"path":"index","title":"Overview"},{"path":"persisted-queries","title":"Persisted Queries"},{"path":"persisted-state","title":"Persisted State"}]},{"path":"networking","title":"Networking","items":[{"path":"index","title":"Protocols"},{"path":"authentication","title":"Authentication"}]},{"path":"scalars","title":"Scalars","items":null}]}]},{"path":"greendonut","title":"Green Donut","description":"Configure data loaders and caching for GraphQL endpoints.","versions":[{"path":"","title":"v11 (latest)","items":[{"path":"index","title":"Introduction","items":null}]},{"path":"v10","title":"v10 (previous)","items":[{"path":"index","title":"Introduction","items":null},{"path":"installation","title":"Installation","items":null},{"path":"usage","title":"Usage","items":null},{"path":"api","title":"API","items":null},{"path":"advanced-concepts","title":"Advanced Concepts","items":[{"path":"index","title":"Custom DataLoader"},{"path":"diagnostics","title":"Diagnostic Events"}]}]}]}]}},"pageContext":{"originPath":"hotchocolate/v10/security/index.md"}},"staticQueryHashes":["1014893094","2890364758","4218812017"]}