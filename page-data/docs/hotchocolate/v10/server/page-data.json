{"componentChunkName":"component---src-templates-doc-page-template-tsx","path":"/docs/hotchocolate/v10/server","result":{"data":{"file":{"childMarkdownRemark":{"fields":{"slug":"/hotchocolate/v10/server/"},"frontmatter":{"title":"ASP.Net"},"html":"<p>Hot Chocolate supports ASP.Net Core and ASP.Net Framework out of the box. This means you can get started very quickly with both variants. There are example projects for both in our <a href=\"https://github.com/ChilliCream/hotchocolate/tree/master/examples\">repository</a> on GitHub.</p>\n<h1 id=\"http-usage\" style=\"position:relative;\"><a href=\"#http-usage\" aria-label=\"http usage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP Usage</h1>\n<p>Hot Chocolate has implemented the <a href=\"https://graphql.org/learn/serving-over-http/\">recommendations</a> for serving GraphQL over HTTP. We are also supporting request batching over HTTP and subscriptions over websocket.</p>\n<h2 id=\"http-post\" style=\"position:relative;\"><a href=\"#http-post\" aria-label=\"http post permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP POST</h2>\n<p>The post request is the most used variant for GraphQL request over HTTP.</p>\n<p>application/json: the POST body will be parsed as a JSON object of parameters.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"58940696280766770000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`{\n    # The query document.\n    &quot;query&quot;: &quot;query getHero { hero { name } }&quot;,\n\n    # The name of the operation that shall be executed.\n    &quot;operationName&quot;: &quot;getHero&quot;,\n\n    # A key under which a query document was saved on the server.\n    &quot;id&quot;: &quot;W5vrrAIypCbniaIYeroNnw==&quot;,\n\n    # The variable values for this request.\n    &quot;variables&quot;: {\n        &quot;a&quot;: 1,\n        &quot;b&quot;: &quot;abc&quot;\n    },\n\n    # Custom properties that can be passed to the execution engine context data.\n    &quot;extensions&quot;: {\n        &quot;a&quot;: 1,\n        &quot;b&quot;: &quot;abc&quot;\n    }\n}`, `58940696280766770000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    # The query document.\n    <span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"query getHero { hero { name } }\"</span><span class=\"token punctuation\">,</span>\n\n    # The name of the operation that shall be executed.\n    <span class=\"token property\">\"operationName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"getHero\"</span><span class=\"token punctuation\">,</span>\n\n    # A key under which a query document was saved on the server.\n    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"W5vrrAIypCbniaIYeroNnw==\"</span><span class=\"token punctuation\">,</span>\n\n    # The variable values for this request.\n    <span class=\"token property\">\"variables\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"a\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"b\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"abc\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    # Custom properties that can be passed to the execution engine context data.\n    <span class=\"token property\">\"extensions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"a\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"b\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"abc\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>application/graphql: The POST body will be parsed as GraphQL query string, which provides the query parameter.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"42550361403676980000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`query getHero {\n  hero {\n    name\n  }\n}`, `42550361403676980000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> getHero <span class=\"token punctuation\">{</span>\n  hero <span class=\"token punctuation\">{</span>\n    name\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The response in both cases will be JSON by default. The response serializers can be swapped out and you could for instance go protobuf.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"33761115949030530000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`{\n  &quot;data&quot;: {\n    &quot;hero&quot;: {\n      &quot;name&quot;: &quot;R2-D2&quot;\n    }\n  }\n}`, `33761115949030530000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"hero\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"R2-D2\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"http-get\" style=\"position:relative;\"><a href=\"#http-get\" aria-label=\"http get permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP GET</h2>\n<p>GraphQL can also be served through an HTTP GET request. You have the same options as with the POST request just that the request properties are provided as query parameters. GET request can be a good choice if you are looking to cache GraphQL requests.</p>\n<p><code class=\"language-text\">http://localhost/graphql?query=query+getUser($id:ID){user(id:$id){name}}&amp;variables={&quot;id&quot;:&quot;4&quot;}</code></p>\n<h2 id=\"http-get-schema\" style=\"position:relative;\"><a href=\"#http-get-schema\" aria-label=\"http get schema permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP GET Schema</h2>\n<p>Although you can get access to the schema metadata through introspection, we also support fetching the GraphQL schema SDL. The GraphQL schema SDL is richer with information and easier to read.</p>\n<h2 id=\"http-post-batching\" style=\"position:relative;\"><a href=\"#http-post-batching\" aria-label=\"http post batching permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP POST Batching</h2>\n<p>We support two kinds of batching variants.</p>\n<p>The first variant to batch is on request base, you basically send in an array of GraphQL request and the query engine will issue the results in order.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"7311405624186529000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`[\n    {\n        # The query document.\n        &quot;query&quot;: &quot;query getHero { hero { name } }&quot;,\n\n        # The name of the operation that shall be executed.\n        &quot;operationName&quot;: &quot;getHero&quot;,\n\n        # A key under which a query document was saved on the server.\n        &quot;id&quot;: &quot;W5vrrAIypCbniaIYeroNnw==&quot;,\n\n        # The variable values for this request.\n        &quot;variables&quot;: {\n            &quot;a&quot;: 1,\n            &quot;b&quot;: &quot;abc&quot;\n        },\n\n        # Custom properties that can be passed to the execution engine context data.\n        &quot;extensions&quot;: {\n            &quot;a&quot;: 1,\n            &quot;b&quot;: &quot;abc&quot;\n        }\n    },\n    {\n        # The query document.\n        &quot;query&quot;: &quot;query getHero { hero { name } }&quot;,\n\n        # The name of the operation that shall be executed.\n        &quot;operationName&quot;: &quot;getHero&quot;,\n\n        # A key under which a query document was saved on the server.\n        &quot;id&quot;: &quot;W5vrrAIypCbniaIYeroNnw==&quot;,\n\n        # The variable values for this request.\n        &quot;variables&quot;: {\n            &quot;a&quot;: 1,\n            &quot;b&quot;: &quot;abc&quot;\n        },\n\n        # Custom properties that can be passed to the execution engine context data.\n        &quot;extensions&quot;: {\n            &quot;a&quot;: 1,\n            &quot;b&quot;: &quot;abc&quot;\n        }\n    },\n]`, `7311405624186529000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        # The query document.\n        <span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"query getHero { hero { name } }\"</span><span class=\"token punctuation\">,</span>\n\n        # The name of the operation that shall be executed.\n        <span class=\"token property\">\"operationName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"getHero\"</span><span class=\"token punctuation\">,</span>\n\n        # A key under which a query document was saved on the server.\n        <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"W5vrrAIypCbniaIYeroNnw==\"</span><span class=\"token punctuation\">,</span>\n\n        # The variable values for this request.\n        <span class=\"token property\">\"variables\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"a\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"b\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"abc\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n        # Custom properties that can be passed to the execution engine context data.\n        <span class=\"token property\">\"extensions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"a\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"b\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"abc\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        # The query document.\n        <span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"query getHero { hero { name } }\"</span><span class=\"token punctuation\">,</span>\n\n        # The name of the operation that shall be executed.\n        <span class=\"token property\">\"operationName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"getHero\"</span><span class=\"token punctuation\">,</span>\n\n        # A key under which a query document was saved on the server.\n        <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"W5vrrAIypCbniaIYeroNnw==\"</span><span class=\"token punctuation\">,</span>\n\n        # The variable values for this request.\n        <span class=\"token property\">\"variables\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"a\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"b\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"abc\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n        # Custom properties that can be passed to the execution engine context data.\n        <span class=\"token property\">\"extensions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"a\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"b\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"abc\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>The second variant is called operation batching where you send in one request with multiple operations and specify the operations that shall be executed:</p>\n<p><code class=\"language-text\">http://localhost/graphql?batchOperations=[a,b]</code></p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"54245910701239790000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`{\n    # The query document.\n    &quot;query&quot;: &quot;query a { hero { name } } query b { hero { name } }&quot;,\n\n    # The name of the operation that shall be executed.\n    &quot;operationName&quot;: &quot;getHero&quot;,\n\n    # A key under which a query document was saved on the server.\n    &quot;id&quot;: &quot;W5vrrAIypCbniaIYeroNnw==&quot;,\n\n    # The variable values for this request.\n    &quot;variables&quot;: {\n        &quot;a&quot;: 1,\n        &quot;b&quot;: &quot;abc&quot;\n    },\n\n    # Custom properties that can be passed to the execution engine context data.\n    &quot;extensions&quot;: {\n        &quot;a&quot;: 1,\n        &quot;b&quot;: &quot;abc&quot;\n    }\n}`, `54245910701239790000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    # The query document.\n    <span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"query a { hero { name } } query b { hero { name } }\"</span><span class=\"token punctuation\">,</span>\n\n    # The name of the operation that shall be executed.\n    <span class=\"token property\">\"operationName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"getHero\"</span><span class=\"token punctuation\">,</span>\n\n    # A key under which a query document was saved on the server.\n    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"W5vrrAIypCbniaIYeroNnw==\"</span><span class=\"token punctuation\">,</span>\n\n    # The variable values for this request.\n    <span class=\"token property\">\"variables\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"a\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"b\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"abc\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    # Custom properties that can be passed to the execution engine context data.\n    <span class=\"token property\">\"extensions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"a\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"b\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"abc\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The executer will write the results to the stream as soon as they are available. This means that depending on your client implementation you can start using the results as they appear in order.</p>\n<p>By default, we are serializing the result as a JSON array, but you can change the format to make it work better with your client implementation.</p>\n<p>More about batching can be found <a href=\"/docs/hotchocolate/v10/execution-engine/batching\">here</a>.</p>\n<h1 id=\"websocket-support\" style=\"position:relative;\"><a href=\"#websocket-support\" aria-label=\"websocket support permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WebSocket Support</h1>\n<p>We have implemented the <a href=\"https://github.com/apollographql/subscriptions-transport-ws/blob/master/PROTOCOL.md\">GraphQL over WebSocket Protocol</a> specified by Apollo.</p>\n<h1 id=\"signalr-support\" style=\"position:relative;\"><a href=\"#signalr-support\" aria-label=\"signalr support permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SignalR Support</h1>\n<blockquote>\n<p>We are still working on SignalR support and will publish the documentation once we are finished.</p>\n</blockquote>\n<h1 id=\"aspnet-core\" style=\"position:relative;\"><a href=\"#aspnet-core\" aria-label=\"aspnet core permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ASP.Net Core</h1>\n<p>The ASP.Net Core implementation is implemented modular. This means that each protocol that we have implemented is represented by a specific middleware that is provided as a separate package. Fear not we also provide a meta-package that bundles all the middleware components together.</p>\n<p>If you just want to get started adding the <code class=\"language-text\">HotChocolate.AspNetCore</code> package.</p>\n<p>Next add the schema and all needed services for the middleware components:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"96502321184843960000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`services.AddGraphQL(\n    SchemaBuilder.New()\n        .AddQueryType<QueryType>()\n        .AddType<CharacterType>())`, `96502321184843960000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddGraphQL</span><span class=\"token punctuation\">(</span>\n    SchemaBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddQueryType</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>QueryType<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddType</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>CharacterType<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>More about the schema builder can be found <a href=\"/docs/hotchocolate/v10/schema\">here</a>.</p>\n</blockquote>\n<p>After we have setup the schema and its services, we now have to configure the middleware components.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"81925173682815550000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`app.UseGraphQL();`, `81925173682815550000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">app<span class=\"token punctuation\">.</span><span class=\"token function\">UseGraphQL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And we are done basically.</p>\n<h2 id=\"supported-core-components\" style=\"position:relative;\"><a href=\"#supported-core-components\" aria-label=\"supported core components permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Supported Core Components</h2>\n<p>It is also possible to setup only the components and services that you need. The following packages are available:</p>\n<ul>\n<li>HotChocolate.AspNetCore.HttpPost</li>\n<li>HotChocolate.AspNetCore.HttpGet</li>\n<li>HotChocolate.AspNetCore.HttpGetSchema</li>\n<li>HotChocolate.AspNetCore.Subscriptions</li>\n<li>HotChocolate.AspNetCore.Authorization</li>\n</ul>\n<p>Instead of using <code class=\"language-text\">UseGraphQL</code> you can opt with these packages to use specific middleware components like <code class=\"language-text\">UseGraphQLHttpGet</code>.</p>\n<h1 id=\"aspnet-framework\" style=\"position:relative;\"><a href=\"#aspnet-framework\" aria-label=\"aspnet framework permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ASP.Net Framework</h1>\n<p>The ASP.Net Framework implementation is implemented modular on top of OWIN. This means that each protocol that we have implemented is represented by a specific middleware that is provided as a separate package. Fear not we also provide a meta-package that bundles all the middleware components together.</p>\n<blockquote>\n<p>Currently there is no support for the subscription websockets protocol an ASP.Net Framework</p>\n</blockquote>\n<p>If you just want to get started adding the <code class=\"language-text\">HotChocolate.AspNetClassic</code> package.</p>\n<p>Next add the schema and all needed services for the middleware components:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"33833771207154962000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`services.AddGraphQL(\n    SchemaBuilder.New()\n        .AddQueryType<QueryType>()\n        .AddType<CharacterType>())`, `33833771207154962000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddGraphQL</span><span class=\"token punctuation\">(</span>\n    SchemaBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddQueryType</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>QueryType<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddType</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>CharacterType<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>More about the schema builder can be found <a href=\"/docs/hotchocolate/v10/schema\">here</a>.</p>\n</blockquote>\n<p>After we have setup the schema and its services, we now have to configure the middleware components.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"90218608166264130000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`app.UseGraphQL(serviceProvider);`, `90218608166264130000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">app<span class=\"token punctuation\">.</span><span class=\"token function\">UseGraphQL</span><span class=\"token punctuation\">(</span>serviceProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And we are done basically.</p>\n<h2 id=\"supported-framework-components\" style=\"position:relative;\"><a href=\"#supported-framework-components\" aria-label=\"supported framework components permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Supported Framework Components</h2>\n<p>It is also possible to setup only the components and services that you need. The following packages are available:</p>\n<ul>\n<li>HotChocolate.AspNetClassic.HttpPost</li>\n<li>HotChocolate.AspNetClassic.HttpGet</li>\n<li>HotChocolate.AspNetClassic.HttpGetSchema</li>\n<li>HotChocolate.AspNetClassic.Authorization</li>\n</ul>\n<p>Instead of using <code class=\"language-text\">UseGraphQL</code> you can opt with these packages to use specific middleware components like <code class=\"language-text\">UseGraphQLHttpGet</code>.</p>\n<h1 id=\"custom-serializers\" style=\"position:relative;\"><a href=\"#custom-serializers\" aria-label=\"custom serializers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Custom Serializers</h1>\n<p>There are two response serializers that can be customized. By default we have added JSON serializers. You can customize serialization by implementing the following interfaces:</p>\n<ul>\n<li>IQueryResultSerializer</li>\n<li>IResponseStreamSerializer</li>\n</ul>\n<p>We have a added some helper extension to swap the default serializer out:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"70116377020853910000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`services.AddResponseStreamSerializer<CustomResponseStreamSerializer>();`, `70116377020853910000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddResponseStreamSerializer</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>CustomResponseStreamSerializer<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/hotchocolate/v10/server/#http-usage\">HTTP Usage</a></p>\n<ul>\n<li><a href=\"/hotchocolate/v10/server/#http-post\">HTTP POST</a></li>\n<li><a href=\"/hotchocolate/v10/server/#http-get\">HTTP GET</a></li>\n<li><a href=\"/hotchocolate/v10/server/#http-get-schema\">HTTP GET Schema</a></li>\n<li><a href=\"/hotchocolate/v10/server/#http-post-batching\">HTTP POST Batching</a></li>\n</ul>\n</li>\n<li><a href=\"/hotchocolate/v10/server/#websocket-support\">WebSocket Support</a></li>\n<li><a href=\"/hotchocolate/v10/server/#signalr-support\">SignalR Support</a></li>\n<li>\n<p><a href=\"/hotchocolate/v10/server/#aspnet-core\">ASP.Net Core</a></p>\n<ul>\n<li><a href=\"/hotchocolate/v10/server/#supported-core-components\">Supported Core Components</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/hotchocolate/v10/server/#aspnet-framework\">ASP.Net Framework</a></p>\n<ul>\n<li><a href=\"/hotchocolate/v10/server/#supported-framework-components\">Supported Framework Components</a></li>\n</ul>\n</li>\n<li><a href=\"/hotchocolate/v10/server/#custom-serializers\">Custom Serializers</a></li>\n</ul>"}},"site":{"siteMetadata":{"siteUrl":"https://chillicream.com","repositoryUrl":"https://github.com/ChilliCream/hotchocolate","tools":{"slack":"https://join.slack.com/t/hotchocolategraphql/shared_invite/enQtNTA4NjA0ODYwOTQ0LTViMzA2MTM4OWYwYjIxYzViYmM0YmZhYjdiNzBjOTg2ZmU1YmMwNDZiYjUyZWZlMzNiMTk1OWUxNWZhMzQwY2Q"}}},"config":{"products":[{"path":"hotchocolate","title":"Hot Chocolate","description":"Build your own thin GraphQL API layer on top of any resource.","versions":[{"path":"v10","title":"v10 (stable)","items":[{"path":"index","title":"Introduction","items":null},{"path":"code-first","title":"Code-First","items":null},{"path":"schema-first","title":"Schema-First","items":null},{"path":"schema","title":"Schema","items":[{"path":"index","title":"Schema"},{"path":"object-type","title":"Object Type"},{"path":"interface-type","title":"Interface Type"},{"path":"union-type","title":"Union Type"},{"path":"input-object-type","title":"Input Object Type"},{"path":"enum-type","title":"Enum Type"},{"path":"descriptions","title":"Schema Descriptions"},{"path":"custom-scalar-types","title":"Scalar Type Support"},{"path":"descriptor-attributes","title":"Descriptor Attributes"},{"path":"extending-types","title":"Custom Base Classes"},{"path":"directives","title":"Directives"},{"path":"resolvers","title":"Resolvers"},{"path":"relay","title":"Relay"},{"path":"conventions","title":"Conventions"},{"path":"options","title":"Schema Options"}]},{"path":"data-fetching","title":"Data Fetching","items":[{"path":"index","title":"Data Loaders"},{"path":"pagination","title":"Pagination"},{"path":"filters","title":"Filters"}]},{"path":"security","title":"Security","items":[{"path":"index","title":"Authorization"},{"path":"security","title":"Security"}]},{"path":"execution-engine","title":"Execution Engine","items":[{"path":"index","title":"Middleware"},{"path":"validation-rules","title":"Validation Rules"},{"path":"instrumentation","title":"Instrumentation"},{"path":"apollo-tracing","title":"Apollo Tracing"},{"path":"batching","title":"Batching"},{"path":"persisted-queries","title":"Persisted Queries"},{"path":"custom-context-data","title":"Custom Context Data"},{"path":"subscriptions","title":"Subscriptions"},{"path":"type-conversion","title":"Type Conversion"},{"path":"error-filter","title":"Error Filter"},{"path":"execution-options","title":"Execution Options"}]},{"path":"server","title":"Server","items":[{"path":"index","title":"ASP.Net"},{"path":"dependency-injection","title":"Dependency Injection"}]},{"path":"stitching","title":"Schema Stitching","items":null},{"path":"tooling","title":"Tooling","items":null},{"path":"advanced","title":"Advanced","items":[{"path":"index","title":"Parser"},{"path":"dotnet-cli","title":".Net CLI"}]},{"path":"tutorials","title":"Tutorials","items":[{"path":"index","title":"Entity Framework"}]},{"path":"examples","title":"Examples","items":[{"path":"index","title":"Star Wars"},{"path":"slack-clone","title":"Slack Clone"},{"path":"other-examples","title":"Other Examples"}]}]},{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null},{"path":"getting-started","title":"Getting Started","items":null},{"path":"defining-a-schema","title":"Defining a schema","items":[{"path":"index","title":"Schema basics"},{"path":"versioning","title":"Versioning"},{"path":"unions-and-interfaces","title":"Unions and Interfaces"},{"path":"scalars","title":"Scalars"},{"path":"directives","title":"Directives"}]},{"path":"fetching-data","title":"Fetching data","items":[{"path":"index","title":"Resolver"},{"path":"fetching-from-databases","title":"Fetching from Databases"},{"path":"fetching-from-rest","title":"Fetching from REST"},{"path":"dataloader","title":"DataLoader"},{"path":"pagination","title":"Pagination"},{"path":"filtering","title":"Filtering"},{"path":"sorting","title":"Sorting"}]},{"path":"api-reference","title":"API Reference","items":[{"path":"index","title":"Overview"},{"path":"language","title":"Lanugage"},{"path":"visitors","title":"Visitors"}]}]}]},{"path":"bananacakepop","title":"Banana Cake Pop","description":"Use this GUI to get deep insights from any GraphQL API.","versions":[{"path":"","title":"v1 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"strawberryshake","title":"Strawberry Shake","description":"Generate a unique GraphQL client for .Net to fetch data from any GraphQL API.","versions":[{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"marshmallowpie","title":"Marshmallow Pie","description":"Configure a GraphQL registry to keep track of any GraphQL server and client.","versions":[{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"greendonut","title":"Green Donut","description":"Configure data loaders and caching for GraphQL endpoints.","versions":[{"path":"v10","title":"v10 (stable)","items":[{"path":"index","title":"Introduction","items":null},{"path":"installation","title":"Installation","items":null},{"path":"usage","title":"Usage","items":null},{"path":"api","title":"API","items":null},{"path":"advanced-concepts","title":"Advanced Concepts","items":[{"path":"index","title":"Custom DataLoader"},{"path":"diagnostics","title":"Diagnostic Events"}]}]},{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]}]}},"pageContext":{"originPath":"hotchocolate/v10/server/index.md"}},"staticQueryHashes":["2890364758","4218812017","63159454"]}