{"componentChunkName":"component---src-templates-doc-page-template-tsx","path":"/docs/hotchocolate/v10/server","result":{"data":{"file":{"childMdx":{"fields":{"slug":"/hotchocolate/v10/server/"},"frontmatter":{"title":"ASP.Net"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"ASP.Net\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Hot Chocolate supports ASP.Net Core and ASP.Net Framework out of the box. This means you can get started very quickly with both variants. There are example projects for both in our \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ChilliCream/hotchocolate/tree/master/examples\"\n  }), \"repository\"), \" on GitHub.\"), mdx(\"h1\", null, \"HTTP Usage\"), mdx(\"p\", null, \"Hot Chocolate has implemented the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://graphql.org/learn/serving-over-http/\"\n  }), \"recommendations\"), \" for serving GraphQL over HTTP. We are also supporting request batching over HTTP and subscriptions over websocket.\"), mdx(\"h2\", null, \"HTTP POST\"), mdx(\"p\", null, \"The post request is the most used variant for GraphQL request over HTTP.\"), mdx(\"p\", null, \"application/json: the POST body will be parsed as a JSON object of parameters.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n    # The query document.\\n    \\\"query\\\": \\\"query getHero { hero { name } }\\\",\\n\\n    # The name of the operation that shall be executed.\\n    \\\"operationName\\\": \\\"getHero\\\",\\n\\n    # A key under which a query document was saved on the server.\\n    \\\"id\\\": \\\"W5vrrAIypCbniaIYeroNnw==\\\",\\n\\n    # The variable values for this request.\\n    \\\"variables\\\": {\\n        \\\"a\\\": 1,\\n        \\\"b\\\": \\\"abc\\\"\\n    },\\n\\n    # Custom properties that can be passed to the execution engine context data.\\n    \\\"extensions\\\": {\\n        \\\"a\\\": 1,\\n        \\\"b\\\": \\\"abc\\\"\\n    }\\n}\\n\")), mdx(\"p\", null, \"application/graphql: The POST body will be parsed as GraphQL query string, which provides the query parameter.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"query getHero {\\n  hero {\\n    name\\n  }\\n}\\n\")), mdx(\"p\", null, \"The response in both cases will be JSON by default. The response serializers can be swapped out and you could for instance go protobuf.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"data\\\": {\\n    \\\"hero\\\": {\\n      \\\"name\\\": \\\"R2-D2\\\"\\n    }\\n  }\\n}\\n\")), mdx(\"h2\", null, \"HTTP GET\"), mdx(\"p\", null, \"GraphQL can also be served through an HTTP GET request. You have the same options as with the POST request just that the request properties are provided as query parameters. GET request can be a good choice if you are looking to cache GraphQL requests.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost/graphql?query=query+getUser($id:ID){user(id:$id){name}}&variables={\\\"id\\\":\\\"4\\\"}\")), mdx(\"h2\", null, \"HTTP GET Schema\"), mdx(\"p\", null, \"Although you can get access to the schema metadata through introspection, we also support fetching the GraphQL schema SDL. The GraphQL schema SDL is richer with information and easier to read.\"), mdx(\"p\", null, \"SDL schema available in v10 under:\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"https://yourserver/GraphQL/Schema\")), mdx(\"h2\", null, \"HTTP POST Batching\"), mdx(\"p\", null, \"We support two kinds of batching variants.\"), mdx(\"p\", null, \"The first variant to batch is on request base, you basically send in an array of GraphQL request and the query engine will issue the results in order.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"[\\n    {\\n        # The query document.\\n        \\\"query\\\": \\\"query getHero { hero { name } }\\\",\\n\\n        # The name of the operation that shall be executed.\\n        \\\"operationName\\\": \\\"getHero\\\",\\n\\n        # A key under which a query document was saved on the server.\\n        \\\"id\\\": \\\"W5vrrAIypCbniaIYeroNnw==\\\",\\n\\n        # The variable values for this request.\\n        \\\"variables\\\": {\\n            \\\"a\\\": 1,\\n            \\\"b\\\": \\\"abc\\\"\\n        },\\n\\n        # Custom properties that can be passed to the execution engine context data.\\n        \\\"extensions\\\": {\\n            \\\"a\\\": 1,\\n            \\\"b\\\": \\\"abc\\\"\\n        }\\n    },\\n    {\\n        # The query document.\\n        \\\"query\\\": \\\"query getHero { hero { name } }\\\",\\n\\n        # The name of the operation that shall be executed.\\n        \\\"operationName\\\": \\\"getHero\\\",\\n\\n        # A key under which a query document was saved on the server.\\n        \\\"id\\\": \\\"W5vrrAIypCbniaIYeroNnw==\\\",\\n\\n        # The variable values for this request.\\n        \\\"variables\\\": {\\n            \\\"a\\\": 1,\\n            \\\"b\\\": \\\"abc\\\"\\n        },\\n\\n        # Custom properties that can be passed to the execution engine context data.\\n        \\\"extensions\\\": {\\n            \\\"a\\\": 1,\\n            \\\"b\\\": \\\"abc\\\"\\n        }\\n    },\\n]\\n\")), mdx(\"p\", null, \"The second variant is called operation batching where you send in one request with multiple operations and specify the operations that shall be executed:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost/graphql?batchOperations=[a,b]\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n    # The query document.\\n    \\\"query\\\": \\\"query a { hero { name } } query b { hero { name } }\\\",\\n\\n    # The name of the operation that shall be executed.\\n    \\\"operationName\\\": \\\"getHero\\\",\\n\\n    # A key under which a query document was saved on the server.\\n    \\\"id\\\": \\\"W5vrrAIypCbniaIYeroNnw==\\\",\\n\\n    # The variable values for this request.\\n    \\\"variables\\\": {\\n        \\\"a\\\": 1,\\n        \\\"b\\\": \\\"abc\\\"\\n    },\\n\\n    # Custom properties that can be passed to the execution engine context data.\\n    \\\"extensions\\\": {\\n        \\\"a\\\": 1,\\n        \\\"b\\\": \\\"abc\\\"\\n    }\\n}\\n\")), mdx(\"p\", null, \"The executer will write the results to the stream as soon as they are available. This means that depending on your client implementation you can start using the results as they appear in order.\"), mdx(\"p\", null, \"By default, we are serializing the result as a JSON array, but you can change the format to make it work better with your client implementation.\"), mdx(\"p\", null, \"More about batching can be found \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/hotchocolate/v10/execution-engine/batching\"\n  }), \"here\"), \".\"), mdx(\"h1\", null, \"WebSocket Support\"), mdx(\"p\", null, \"We have implemented the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/apollographql/subscriptions-transport-ws/blob/master/PROTOCOL.md\"\n  }), \"GraphQL over WebSocket Protocol\"), \" specified by Apollo.\"), mdx(\"h1\", null, \"SignalR Support\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"We are still working on SignalR support and will publish the documentation once we are finished.\")), mdx(\"h1\", null, \"ASP.Net Core\"), mdx(\"p\", null, \"The ASP.Net Core implementation is implemented modular. This means that each protocol that we have implemented is represented by a specific middleware that is provided as a separate package. Fear not we also provide a meta-package that bundles all the middleware components together.\"), mdx(\"p\", null, \"If you just want to get started adding the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HotChocolate.AspNetCore\"), \" package.\"), mdx(\"p\", null, \"Next add the schema and all needed services for the middleware components:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"services.AddGraphQL(\\n    SchemaBuilder.New()\\n        .AddQueryType<QueryType>()\\n        .AddType<CharacterType>())\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"More about the schema builder can be found \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/hotchocolate/v10/schema\"\n  }), \"here\"), \".\")), mdx(\"p\", null, \"After we have setup the schema and its services, we now have to configure the middleware components.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"app.UseGraphQL();\\n\")), mdx(\"p\", null, \"And we are done basically.\"), mdx(\"h2\", null, \"Supported Core Components\"), mdx(\"p\", null, \"It is also possible to setup only the components and services that you need. The following packages are available:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"HotChocolate.AspNetCore.HttpPost\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"HotChocolate.AspNetCore.HttpGet\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"HotChocolate.AspNetCore.HttpGetSchema\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"HotChocolate.AspNetCore.Subscriptions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"HotChocolate.AspNetCore.Authorization\")), mdx(\"p\", null, \"Instead of using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UseGraphQL\"), \" you can opt with these packages to use specific middleware components like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UseGraphQLHttpGet\"), \".\"), mdx(\"h1\", null, \"ASP.Net Framework\"), mdx(\"p\", null, \"The ASP.Net Framework implementation is implemented modular on top of OWIN. This means that each protocol that we have implemented is represented by a specific middleware that is provided as a separate package. Fear not we also provide a meta-package that bundles all the middleware components together.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Currently there is no support for the subscription websockets protocol an ASP.Net Framework\")), mdx(\"p\", null, \"If you just want to get started adding the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HotChocolate.AspNetClassic\"), \" package.\"), mdx(\"p\", null, \"Next add the schema and all needed services for the middleware components:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"services.AddGraphQL(\\n    SchemaBuilder.New()\\n        .AddQueryType<QueryType>()\\n        .AddType<CharacterType>())\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"More about the schema builder can be found \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/hotchocolate/v10/schema\"\n  }), \"here\"), \".\")), mdx(\"p\", null, \"After we have setup the schema and its services, we now have to configure the middleware components.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"app.UseGraphQL(serviceProvider);\\n\")), mdx(\"p\", null, \"And we are done basically.\"), mdx(\"h2\", null, \"Supported Framework Components\"), mdx(\"p\", null, \"It is also possible to setup only the components and services that you need. The following packages are available:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"HotChocolate.AspNetClassic.HttpPost\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"HotChocolate.AspNetClassic.HttpGet\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"HotChocolate.AspNetClassic.HttpGetSchema\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"HotChocolate.AspNetClassic.Authorization\")), mdx(\"p\", null, \"Instead of using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UseGraphQL\"), \" you can opt with these packages to use specific middleware components like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UseGraphQLHttpGet\"), \".\"), mdx(\"h1\", null, \"Custom Serializers\"), mdx(\"p\", null, \"There are two response serializers that can be customized. By default we have added JSON serializers. You can customize serialization by implementing the following interfaces:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"IQueryResultSerializer\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"IResponseStreamSerializer\")), mdx(\"p\", null, \"We have a added some helper extension to swap the default serializer out:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"services.AddResponseStreamSerializer<CustomResponseStreamSerializer>();\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#http-usage","title":"HTTP Usage","items":[{"url":"#http-post","title":"HTTP POST"},{"url":"#http-get","title":"HTTP GET"},{"url":"#http-get-schema","title":"HTTP GET Schema"},{"url":"#http-post-batching","title":"HTTP POST Batching"}]},{"url":"#websocket-support","title":"WebSocket Support"},{"url":"#signalr-support","title":"SignalR Support"},{"url":"#aspnet-core","title":"ASP.Net Core","items":[{"url":"#supported-core-components","title":"Supported Core Components"}]},{"url":"#aspnet-framework","title":"ASP.Net Framework","items":[{"url":"#supported-framework-components","title":"Supported Framework Components"}]},{"url":"#custom-serializers","title":"Custom Serializers"}]}}},"site":{"siteMetadata":{"siteUrl":"https://chillicream.com","repositoryUrl":"https://github.com/ChilliCream/hotchocolate","tools":{"slack":"https://bit.ly/joinchilli"}}},"config":{"products":[{"path":"hotchocolate","title":"Hot Chocolate","description":"Build your own thin GraphQL API layer on top of any resource.","versions":[{"path":"","title":"v11.1 (latest)","items":[{"path":"index","title":"Introduction","items":null},{"path":"get-started","title":"Get Started","items":null},{"path":"defining-a-schema","title":"Defining a schema","items":[{"path":"index","title":"Schema basics"},{"path":"descriptions","title":"Schema Documentation"},{"path":"operations","title":"Operations"},{"path":"versioning","title":"Versioning"},{"path":"unions-and-interfaces","title":"Unions and Interfaces"},{"path":"extending-types","title":"Extending types"},{"path":"scalars","title":"Scalars"},{"path":"directives","title":"Directives"}]},{"path":"fetching-data","title":"Fetching data","items":[{"path":"index","title":"Resolver"},{"path":"fetching-from-databases","title":"Fetching from Databases"},{"path":"fetching-from-rest","title":"Fetching from REST"},{"path":"dataloader","title":"DataLoader"},{"path":"pagination","title":"Pagination"},{"path":"filtering","title":"Filtering"},{"path":"sorting","title":"Sorting"},{"path":"projections","title":"Projections"}]},{"path":"distributed-schema","title":"Distributed Schemas","items":[{"path":"index","title":"Overview"},{"path":"schema-stitching","title":"Schema Stitching"},{"path":"schema-federations","title":"Schema Federations"},{"path":"schema-configuration","title":"Schema Configuration"}]},{"path":"integrations","title":"Integrations","items":[{"path":"index","title":"Overview"},{"path":"entity-framework","title":"Entity Framework"},{"path":"spatial-data","title":"Spatial Data"},{"path":"mongodb","title":"MongoDB"}]},{"path":"performance","title":"Performance","items":[{"path":"index","title":"Overview"},{"path":"persisted-queries","title":"Persisted queries"},{"path":"automatic-persisted-queries","title":"Automatic persisted queries"}]},{"path":"api-reference","title":"API Reference","items":[{"path":"index","title":"Overview"},{"path":"object-type","title":"Object Type"},{"path":"custom-attributes","title":"Custom Attributes"},{"path":"language","title":"Language"},{"path":"extending-filtering","title":"Extending Filtering"},{"path":"visitors","title":"Visitors"},{"path":"aspnetcore","title":"ASP.NET Core"},{"path":"dependency-injection","title":"Dependency Injection"},{"path":"executable","title":"Executable"},{"path":"apollo-tracing","title":"Apollo Tracing"},{"path":"migrate-from-10-to-11","title":"Migrate from 10.5 to 11.0"}]}]},{"path":"v10","title":"v10 (previous)","items":[{"path":"index","title":"Introduction","items":null},{"path":"code-first","title":"Code-First","items":null},{"path":"schema-first","title":"Schema-First","items":null},{"path":"schema","title":"Schema","items":[{"path":"index","title":"Schema"},{"path":"object-type","title":"Object Type"},{"path":"interface-type","title":"Interface Type"},{"path":"union-type","title":"Union Type"},{"path":"input-object-type","title":"Input Object Type"},{"path":"enum-type","title":"Enum Type"},{"path":"descriptions","title":"Schema Descriptions"},{"path":"custom-scalar-types","title":"Scalar Type Support"},{"path":"descriptor-attributes","title":"Descriptor Attributes"},{"path":"extending-types","title":"Custom Base Classes"},{"path":"directives","title":"Directives"},{"path":"resolvers","title":"Resolvers"},{"path":"relay","title":"Relay"},{"path":"conventions","title":"Conventions"},{"path":"options","title":"Schema Options"}]},{"path":"data-fetching","title":"Data Fetching","items":[{"path":"index","title":"Data Loaders"},{"path":"pagination","title":"Pagination"},{"path":"filters","title":"Filters"}]},{"path":"security","title":"Security","items":[{"path":"index","title":"Authorization"},{"path":"security","title":"Security"}]},{"path":"execution-engine","title":"Execution Engine","items":[{"path":"index","title":"Middleware"},{"path":"validation-rules","title":"Validation Rules"},{"path":"instrumentation","title":"Instrumentation"},{"path":"apollo-tracing","title":"Apollo Tracing"},{"path":"batching","title":"Batching"},{"path":"persisted-queries","title":"Persisted Queries"},{"path":"custom-context-data","title":"Custom Context Data"},{"path":"subscriptions","title":"Subscriptions"},{"path":"type-conversion","title":"Type Conversion"},{"path":"error-filter","title":"Error Filter"},{"path":"execution-options","title":"Execution Options"}]},{"path":"server","title":"Server","items":[{"path":"index","title":"ASP.Net"},{"path":"dependency-injection","title":"Dependency Injection"}]},{"path":"stitching","title":"Schema Stitching","items":null},{"path":"tooling","title":"Tooling","items":null},{"path":"advanced","title":"Advanced","items":[{"path":"index","title":"Parser"},{"path":"dotnet-cli","title":".Net CLI"}]},{"path":"tutorials","title":"Tutorials","items":[{"path":"index","title":"Entity Framework"}]},{"path":"examples","title":"Examples","items":[{"path":"index","title":"Star Wars"},{"path":"slack-clone","title":"Slack Clone"},{"path":"other-examples","title":"Other Examples"}]}]}]},{"path":"bananacakepop","title":"Banana Cake Pop","description":"Use this GUI to get deep insights from any GraphQL API.","versions":[{"path":"","title":"v1 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"strawberryshake","title":"Strawberry Shake","description":"The only GraphQL client you will every need in the .NET ecosystem.","versions":[{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null},{"path":"get-started","title":"Get Started","items":[{"path":"index","title":"Blazor"},{"path":"xamarin","title":"Xamarin"},{"path":"console","title":"Console"}]},{"path":"subscriptions","title":"Subscriptions","items":null},{"path":"tooling","title":"Tooling / CLI","items":null},{"path":"caching","title":"Caching","items":[{"path":"index","title":"Overview"},{"path":"entities","title":"Entities"},{"path":"invalidation","title":"Invalidation"}]},{"path":"performance","title":"Performance","items":[{"path":"index","title":"Overview"},{"path":"persisted-queries","title":"Persisted Queries"},{"path":"persisted-state","title":"Persisted State"}]},{"path":"networking","title":"Networking","items":[{"path":"index","title":"Protocols"},{"path":"authentication","title":"Authentication"}]},{"path":"scalars","title":"Scalars","items":null}]}]},{"path":"greendonut","title":"Green Donut","description":"Configure data loaders and caching for GraphQL endpoints.","versions":[{"path":"","title":"v11 (latest)","items":[{"path":"index","title":"Introduction","items":null}]},{"path":"v10","title":"v10 (previous)","items":[{"path":"index","title":"Introduction","items":null},{"path":"installation","title":"Installation","items":null},{"path":"usage","title":"Usage","items":null},{"path":"api","title":"API","items":null},{"path":"advanced-concepts","title":"Advanced Concepts","items":[{"path":"index","title":"Custom DataLoader"},{"path":"diagnostics","title":"Diagnostic Events"}]}]}]}]}},"pageContext":{"originPath":"hotchocolate/v10/server/index.md"}},"staticQueryHashes":["1014893094","2890364758","4218812017"]}