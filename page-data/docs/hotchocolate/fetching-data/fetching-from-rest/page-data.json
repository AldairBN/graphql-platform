{"componentChunkName":"component---src-templates-doc-page-template-tsx","path":"/docs/hotchocolate/fetching-data/fetching-from-rest","result":{"data":{"file":{"childMdx":{"fields":{"slug":"/hotchocolate/fetching-data/fetching-from-rest/"},"frontmatter":{"title":"Fetching from REST"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Fetching from REST\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In this section, we will cover how you can easily integrate a REST API into your GraphQL API.\"), mdx(\"p\", null, \"GraphQL has a strongly-typed type system and therefore also has to know the dotnet runtime types of the data it returns in advance.\\nThe easiest way to integrate a REST API is, to define an OpenAPI specification for it.\\nOpenAPI describes what data a REST endpoint returns.\\nYou can automatically generate a dotnet client for this API and integrate it into your schema.\"), mdx(\"h1\", null, \"OpenAPI in .NET\"), mdx(\"p\", null, \"If you do not have an OpenAPI specification for your REST endpoint yet, you can easily add it to your API.\\nThere are two major OpenAPI implementations in dotnet: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://nswag.org\"\n  }), \"NSwag\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/domaindrivendev/Swashbuckle.AspNetCore\"\n  }), \"Swashbuckle\"), \".\\nHead over to the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.microsoft.com/en-us/aspnet/core/tutorials/web-api-help-pages-using-swagger?view=aspnetcore-5.0\"\n  }), \"official ASP.NET Core\"), \" documentation to see how it is done.\"), mdx(\"p\", null, \"In this example, we will use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/dotnet/AspNetCore.Docs/tree/main/aspnetcore/tutorials/web-api-help-pages-using-swagger/samples/3.0/TodoApi.Swashbuckle\"\n  }), \"the official example of Swashbuckle\"), \".\\nWhen you start this project, you can navigate to the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://localhost:5000/swagger\"\n  }), \"Swagger UI\"), \". \"), mdx(\"p\", null, \"This REST API covers a simple Todo app.\\nWe will expose \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"todos\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"todoById\"), \" in our GraphQL API.\"), mdx(\"h1\", null, \"Generating a client\"), mdx(\"p\", null, \"Every REST endpoint that supports OpenAPI, can easily be wrapped with a fully typed client.\\nAgain, you have several options on how you generate your client.\\nYou can generate your client from the OpenAPI specification of your endpoint, during build or even with external tools with GUI.\\nHave a look here and see what fits your use case the best: \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://docs.microsoft.com/en-us/aspnet/core/tutorials/getting-started-with-nswag?view=aspnetcore-5.0&tabs=visual-studio#code-generation\"\n  }), \"NSwag Code Generation\"))), mdx(\"p\", null, \"In this example, we will use the NSwag dotnet tool.\\nFirst, we need to create a tool manifest.\\nSwitch to your GraphQL project and execute \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"dotnet new tool-manifest\\n\")), mdx(\"p\", null, \"Then we install the NSwag tool\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"dotnet tool install NSwag.ConsoleCore --version 13.10.9\\n\")), mdx(\"p\", null, \"You then have to get the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"swagger.json\"), \" from your REST endpoint\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"curl -o swagger.json http://localhost:5000/swagger/v1/swagger.json\\n\")), mdx(\"p\", null, \"Now you can generate the client from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"swagger.json\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"dotnet nswag swagger2csclient /input:swagger.json /classname:TodoService /namespace:TodoReader /output:TodoService.cs\\n\")), mdx(\"p\", null, \"The code generator generated a new file called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TodoService.cs\"), \".\\nIn this file, you will find the client for your REST API.\"), mdx(\"p\", null, \"The generated needs \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Newtonsoft.Json\"), \".\\nMake sure to also add this package by executing:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"dotnet add package Newtonsoft.Json\\n\")), mdx(\"h1\", null, \"Exposing the API\"), mdx(\"p\", null, \"You will have to register the client in the dependency injection of your GraphQL service.\\nTo expose the API you can inject the generated client into your resolvers.\"), mdx(ExampleTabs, {\n    mdxType: \"ExampleTabs\"\n  }, mdx(ExampleTabs.Annotation, null, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"// Query.cs\\npublic class Query\\n{\\n    public Task<ICollection<TodoItem>> GetTodosAsync(\\n        [Service]TodoService service,\\n        CancellationToken cancellationToken)\\n    {\\n        return service.GetAllAsync(cancellationToken);\\n    }\\n    \\n    public Task<TodoItem> GetTodoByIdAsync(\\n        [Service]TodoService service,\\n        long id,\\n        CancellationToken cancellationToken)\\n    {\\n        return service.GetByIdAsync(id, cancellationToken);\\n    }\\n}\\n\\n// Startup.cs\\npublic class Startup\\n{\\n    public void ConfigureServices(IServiceCollection services)\\n    {\\n        services.AddHttpClient<TodoService>();\\n        services\\n            .AddRouting()\\n            .AddGraphQLServer()\\n            .AddQueryType<Query>();\\n    }\\n\\n    // Omitted code for brevity\\n}\\n\"))), mdx(ExampleTabs.Code, null, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"// Query.cs\\npublic class Query\\n{\\n    public Task<ICollection<TodoItem>> GetTodosAsync(\\n        [Service]TodoService service,\\n        CancellationToken cancellationToken)\\n    {\\n        return service.GetAllAsync(cancellationToken);\\n    }\\n    \\n    public Task<TodoItem> GetTodoByIdAsync(\\n        [Service]TodoService service,\\n        long id,\\n        CancellationToken cancellationToken)\\n    {\\n        return service.GetByIdAsync(id, cancellationToken);\\n    }\\n}\\n\\n// QueryType.cs\\npublic class QueryType : ObjectType<Query>\\n{\\n    protected override void Configure(IObjectTypeDescriptor<Query> descriptor)\\n    {\\n        descriptor\\n            .Field(f => f.GetTodoByIdAsync(default!, default!, default!))\\n            .Type<TodoType>();\\n        \\n        descriptor\\n            .Field(f => f.GetTodosAsync(default!, default!))\\n            .Type<ListType<TodoType>>();\\n    }\\n}\\n\\n// TodoType.cs\\npublic class TodoType : ObjectType<Todo>\\n{\\n    protected override void Configure(IObjectTypeDescriptor<Query> descriptor)\\n    {\\n        descriptor\\n            .Field(f => f.Id)\\n            .Type<LongType>();\\n\\n        descriptor\\n            .Field(f => f.Name)\\n            .Type<StringType>();\\n\\n        descriptor\\n            .Field(f => f.IsComplete)\\n            .Type<BooleanType>();\\n    }\\n}\\n\\n\\n// Startup.cs\\npublic class Startup\\n{\\n    public void ConfigureServices(IServiceCollection services)\\n    {\\n        services\\n            .AddRouting()\\n            .AddGraphQLServer()\\n            .AddQueryType<QueryType>();\\n    }\\n\\n    // Omitted code for brevity\\n}\\n\"))), mdx(ExampleTabs.Schema, null, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"// Query.cs\\npublic class Query\\n{\\n    public Task<ICollection<TodoItem>> GetTodosAsync(\\n        [Service]TodoService service,\\n        CancellationToken cancellationToken)\\n    {\\n        return service.GetAllAsync(cancellationToken);\\n    }\\n    \\n    public Task<TodoItem> GetTodoByIdAsync(\\n        [Service]TodoService service,\\n        long id,\\n        CancellationToken cancellationToken)\\n    {\\n        return service.GetByIdAsync(id, cancellationToken);\\n    }\\n}\\n\\n// Startup.cs\\npublic class Startup\\n{\\n    public void ConfigureServices(IServiceCollection services)\\n    {\\n        services\\n            .AddRouting()\\n            .AddGraphQLServer()\\n            .AddDocumentFromString(@\\\"\\n                type Query {\\n                  todos: [TodoItem!]!\\n                  todoById(id: Uuid): TodoItem\\n                }\\n\\n                type TodoItem {\\n                  id: Long\\n                  name: String\\n                  isCompleted: Boolean\\n                }\\n            \\\")\\n            .BindComplexType<Query>();\\n    }\\n\\n    // Omitted code for brevity\\n}\\n\")))), mdx(\"p\", null, \"You can now head over to your Banana Cake Pop on your GraphQL Server (/graphql) and query todos:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"{\\n  todoById(id:1){\\n    id\\n    isComplete\\n    name\\n  }\\n  todos {\\n    id\\n    isComplete\\n    name\\n  }\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#openapi-in-net","title":"OpenAPI in .NET"},{"url":"#generating-a-client","title":"Generating a client"},{"url":"#exposing-the-api","title":"Exposing the API"}]}}},"site":{"siteMetadata":{"siteUrl":"https://chillicream.com","repositoryUrl":"https://github.com/ChilliCream/hotchocolate","tools":{"slack":"https://bit.ly/joinchilli"}}},"config":{"products":[{"path":"hotchocolate","title":"Hot Chocolate","description":"Build your own thin GraphQL API layer on top of any resource.","versions":[{"path":"","title":"v11.1 (latest)","items":[{"path":"index","title":"Introduction","items":null},{"path":"get-started","title":"Get Started","items":null},{"path":"defining-a-schema","title":"Defining a schema","items":[{"path":"index","title":"Schema basics"},{"path":"descriptions","title":"Schema Documentation"},{"path":"operations","title":"Operations"},{"path":"versioning","title":"Versioning"},{"path":"unions-and-interfaces","title":"Unions and Interfaces"},{"path":"extending-types","title":"Extending types"},{"path":"scalars","title":"Scalars"},{"path":"directives","title":"Directives"}]},{"path":"fetching-data","title":"Fetching data","items":[{"path":"index","title":"Resolver"},{"path":"fetching-from-databases","title":"Fetching from Databases"},{"path":"fetching-from-rest","title":"Fetching from REST"},{"path":"dataloader","title":"DataLoader"},{"path":"pagination","title":"Pagination"},{"path":"filtering","title":"Filtering"},{"path":"sorting","title":"Sorting"},{"path":"projections","title":"Projections"}]},{"path":"distributed-schema","title":"Distributed Schemas","items":[{"path":"index","title":"Overview"},{"path":"schema-stitching","title":"Schema Stitching"},{"path":"schema-federations","title":"Schema Federations"},{"path":"schema-configuration","title":"Schema Configuration"}]},{"path":"integrations","title":"Integrations","items":[{"path":"index","title":"Overview"},{"path":"entity-framework","title":"Entity Framework"},{"path":"spatial-data","title":"Spatial Data"},{"path":"mongodb","title":"MongoDB"}]},{"path":"performance","title":"Performance","items":[{"path":"index","title":"Overview"},{"path":"persisted-queries","title":"Persisted queries"},{"path":"automatic-persisted-queries","title":"Automatic persisted queries"}]},{"path":"api-reference","title":"API Reference","items":[{"path":"index","title":"Overview"},{"path":"object-type","title":"Object Type"},{"path":"custom-attributes","title":"Custom Attributes"},{"path":"language","title":"Language"},{"path":"extending-filtering","title":"Extending Filtering"},{"path":"visitors","title":"Visitors"},{"path":"aspnetcore","title":"ASP.NET Core"},{"path":"dependency-injection","title":"Dependency Injection"},{"path":"executable","title":"Executable"},{"path":"apollo-tracing","title":"Apollo Tracing"},{"path":"coding-approaches","title":"Coding Approaches"},{"path":"migrate-from-10-to-11","title":"Migrate from 10.5 to 11.0"}]}]},{"path":"v10","title":"v10 (previous)","items":[{"path":"index","title":"Introduction","items":null},{"path":"code-first","title":"Code-First","items":null},{"path":"schema-first","title":"Schema-First","items":null},{"path":"schema","title":"Schema","items":[{"path":"index","title":"Schema"},{"path":"object-type","title":"Object Type"},{"path":"interface-type","title":"Interface Type"},{"path":"union-type","title":"Union Type"},{"path":"input-object-type","title":"Input Object Type"},{"path":"enum-type","title":"Enum Type"},{"path":"descriptions","title":"Schema Descriptions"},{"path":"custom-scalar-types","title":"Scalar Type Support"},{"path":"descriptor-attributes","title":"Descriptor Attributes"},{"path":"extending-types","title":"Custom Base Classes"},{"path":"directives","title":"Directives"},{"path":"resolvers","title":"Resolvers"},{"path":"relay","title":"Relay"},{"path":"conventions","title":"Conventions"},{"path":"options","title":"Schema Options"}]},{"path":"data-fetching","title":"Data Fetching","items":[{"path":"index","title":"Data Loaders"},{"path":"pagination","title":"Pagination"},{"path":"filters","title":"Filters"}]},{"path":"security","title":"Security","items":[{"path":"index","title":"Authorization"},{"path":"security","title":"Security"}]},{"path":"execution-engine","title":"Execution Engine","items":[{"path":"index","title":"Middleware"},{"path":"validation-rules","title":"Validation Rules"},{"path":"instrumentation","title":"Instrumentation"},{"path":"apollo-tracing","title":"Apollo Tracing"},{"path":"batching","title":"Batching"},{"path":"persisted-queries","title":"Persisted Queries"},{"path":"custom-context-data","title":"Custom Context Data"},{"path":"subscriptions","title":"Subscriptions"},{"path":"type-conversion","title":"Type Conversion"},{"path":"error-filter","title":"Error Filter"},{"path":"execution-options","title":"Execution Options"}]},{"path":"server","title":"Server","items":[{"path":"index","title":"ASP.Net"},{"path":"dependency-injection","title":"Dependency Injection"}]},{"path":"stitching","title":"Schema Stitching","items":null},{"path":"tooling","title":"Tooling","items":null},{"path":"advanced","title":"Advanced","items":[{"path":"index","title":"Parser"},{"path":"dotnet-cli","title":".Net CLI"}]},{"path":"tutorials","title":"Tutorials","items":[{"path":"index","title":"Entity Framework"}]},{"path":"examples","title":"Examples","items":[{"path":"index","title":"Star Wars"},{"path":"slack-clone","title":"Slack Clone"},{"path":"other-examples","title":"Other Examples"}]}]}]},{"path":"bananacakepop","title":"Banana Cake Pop","description":"Use this GUI to get deep insights from any GraphQL API.","versions":[{"path":"","title":"v1 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"strawberryshake","title":"Strawberry Shake","description":"The only GraphQL client you will every need in the .NET ecosystem.","versions":[{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null},{"path":"get-started","title":"Get Started","items":[{"path":"index","title":"Blazor"},{"path":"xamarin","title":"Xamarin"},{"path":"console","title":"Console"}]},{"path":"subscriptions","title":"Subscriptions","items":null},{"path":"tooling","title":"Tooling / CLI","items":null},{"path":"caching","title":"Caching","items":[{"path":"index","title":"Overview"},{"path":"entities","title":"Entities"},{"path":"invalidation","title":"Invalidation"}]},{"path":"performance","title":"Performance","items":[{"path":"index","title":"Overview"},{"path":"persisted-queries","title":"Persisted Queries"},{"path":"persisted-state","title":"Persisted State"}]},{"path":"networking","title":"Networking","items":[{"path":"index","title":"Protocols"},{"path":"authentication","title":"Authentication"}]},{"path":"scalars","title":"Scalars","items":null}]}]},{"path":"greendonut","title":"Green Donut","description":"Configure data loaders and caching for GraphQL endpoints.","versions":[{"path":"","title":"v11 (latest)","items":[{"path":"index","title":"Introduction","items":null}]},{"path":"v10","title":"v10 (previous)","items":[{"path":"index","title":"Introduction","items":null},{"path":"installation","title":"Installation","items":null},{"path":"usage","title":"Usage","items":null},{"path":"api","title":"API","items":null},{"path":"advanced-concepts","title":"Advanced Concepts","items":[{"path":"index","title":"Custom DataLoader"},{"path":"diagnostics","title":"Diagnostic Events"}]}]}]}]}},"pageContext":{"originPath":"hotchocolate/fetching-data/fetching-from-rest.md"}},"staticQueryHashes":["1014893094","2890364758","4218812017"]}