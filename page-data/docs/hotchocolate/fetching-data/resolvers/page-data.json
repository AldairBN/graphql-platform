{"componentChunkName":"component---src-templates-doc-page-template-tsx","path":"/docs/hotchocolate/fetching-data/resolvers","result":{"data":{"file":{"childMdx":{"fields":{"slug":"/docs/hotchocolate/fetching-data/resolvers","lastUpdated":"2021-07-14","lastAuthorName":"Tobias Tengler"},"frontmatter":{"title":"Resolvers"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Resolvers\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"When it comes to fetching data in a GraphQL server, it will always come down to a resolver.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"A resolver is a generic function that fetches data from an arbitrary data source for a particular field.\")), mdx(\"p\", null, \"We can think of each field in our query as a method of the previous type which returns the next type.\"), mdx(\"h2\", {\n    \"id\": \"resolver-tree\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#resolver-tree\",\n    \"aria-label\": \"resolver tree permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 512 512\",\n    \"width\": \"16\",\n    \"height\": \"16\",\n    \"fill\": \"var(--heading-text-color)\"\n  }, \"\\n                        \", mdx(\"path\", {\n    parentName: \"svg\",\n    \"d\": \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  }), \"\\n                      \")), \"Resolver Tree\"), mdx(\"p\", null, \"A resolver tree is a projection of a GraphQL operation that is prepared for execution.\"), mdx(\"p\", null, \"For better understanding, let's imagine we have a simple GraphQL query like the following, where we select some fields of the currently logged-in user.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-graphql\"\n  }, \"query {\\n  me {\\n    name\\n    company {\\n      id\\n      name\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"In Hot Chocolate, this query results in the following resolver tree.\"), mdx(\"div\", {\n    \"className\": \"mermaid\",\n    \"data-processed\": \"true\"\n  }, mdx(\"svg\", {\n    parentName: \"div\",\n    \"id\": \"mermaid-1627890475834\",\n    \"width\": \"100%\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"xmlnsXLink\": \"http://www.w3.org/1999/xlink\",\n    \"height\": \"186\",\n    \"style\": {\n      \"maxWidth\": \"775.15625px\"\n    },\n    \"viewBox\": \"0 0 775.15625 186\"\n  }, mdx(\"style\", {\n    parentName: \"svg\"\n  }, \"#mermaid-1627890475834{font-family:sans-serif;font-size:16px;fill:#333;}#mermaid-1627890475834 .error-icon{fill:#552222;}#mermaid-1627890475834 .error-text{fill:#552222;stroke:#552222;}#mermaid-1627890475834 .edge-thickness-normal{stroke-width:2px;}#mermaid-1627890475834 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-1627890475834 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-1627890475834 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-1627890475834 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-1627890475834 .marker{fill:#333333;stroke:#333333;}#mermaid-1627890475834 .marker.cross{stroke:#333333;}#mermaid-1627890475834 svg{font-family:sans-serif;font-size:16px;}#mermaid-1627890475834 .label{font-family:sans-serif;color:#333;}#mermaid-1627890475834 .cluster-label text{fill:#333;}#mermaid-1627890475834 .cluster-label span{color:#333;}#mermaid-1627890475834 .label text,#mermaid-1627890475834 span{fill:#333;color:#333;}#mermaid-1627890475834 .node rect,#mermaid-1627890475834 .node circle,#mermaid-1627890475834 .node ellipse,#mermaid-1627890475834 .node polygon,#mermaid-1627890475834 .node path{fill:#ECECFF;stroke:#9370DB;stroke-width:1px;}#mermaid-1627890475834 .node .label{text-align:center;}#mermaid-1627890475834 .node.clickable{cursor:pointer;}#mermaid-1627890475834 .arrowheadPath{fill:#333333;}#mermaid-1627890475834 .edgePath .path{stroke:#333333;stroke-width:1.5px;}#mermaid-1627890475834 .flowchart-link{stroke:#333333;fill:none;}#mermaid-1627890475834 .edgeLabel{background-color:#e8e8e8;text-align:center;}#mermaid-1627890475834 .edgeLabel rect{opacity:0.5;background-color:#e8e8e8;fill:#e8e8e8;}#mermaid-1627890475834 .cluster rect{fill:#ffffde;stroke:#aaaa33;stroke-width:1px;}#mermaid-1627890475834 .cluster text{fill:#333;}#mermaid-1627890475834 .cluster span{color:#333;}#mermaid-1627890475834 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:sans-serif;font-size:12px;background:hsl(80,100%,96.2745098039%);border:1px solid #aaaa33;border-radius:2px;pointer-events:none;z-index:100;}#mermaid-1627890475834:root{--mermaid-font-family:sans-serif;}\"), mdx(\"g\", {\n    parentName: \"svg\"\n  }, mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"output\"\n  }, mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"clusters\"\n  }), mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"edgePaths\"\n  }, mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"edgePath LS-A LE-B\",\n    \"id\": \"L-A-B\",\n    \"style\": {\n      \"opacity\": \"1\"\n    }\n  }, mdx(\"path\", {\n    parentName: \"g\",\n    \"className\": \"path\",\n    \"d\": \"M155.171875,71L159.33854166666666,71C163.50520833333334,71,171.83854166666666,71,180.171875,71C188.50520833333334,71,196.83854166666666,71,201.00520833333334,71L205.171875,71\",\n    \"markerEnd\": \"url(#arrowhead19)\",\n    \"style\": {\n      \"fill\": \"none\"\n    }\n  }), mdx(\"defs\", {\n    parentName: \"g\"\n  }, mdx(\"marker\", {\n    parentName: \"defs\",\n    \"id\": \"arrowhead19\",\n    \"viewBox\": \"0 0 10 10\",\n    \"refX\": \"9\",\n    \"refY\": \"5\",\n    \"markerUnits\": \"strokeWidth\",\n    \"markerWidth\": \"8\",\n    \"markerHeight\": \"6\",\n    \"orient\": \"auto\"\n  }, mdx(\"path\", {\n    parentName: \"marker\",\n    \"d\": \"M 0 0 L 10 5 L 0 10 z\",\n    \"className\": \"arrowheadPath\",\n    \"style\": {\n      \"strokeWidth\": \"1\",\n      \"strokeDasharray\": \"1, 0\"\n    }\n  })))), mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"edgePath LS-B LE-C\",\n    \"id\": \"L-B-C\",\n    \"style\": {\n      \"opacity\": \"1\"\n    }\n  }, mdx(\"path\", {\n    parentName: \"g\",\n    \"className\": \"path\",\n    \"d\": \"M301.5855823863636,52L309.6155894886363,47.833333333333336C317.64559659090907,43.666666666666664,333.70561079545456,35.333333333333336,350.20046164772725,31.166666666666668C366.6953125,27,383.625,27,392.08984375,27L400.5546875,27\",\n    \"markerEnd\": \"url(#arrowhead20)\",\n    \"style\": {\n      \"fill\": \"none\"\n    }\n  }), mdx(\"defs\", {\n    parentName: \"g\"\n  }, mdx(\"marker\", {\n    parentName: \"defs\",\n    \"id\": \"arrowhead20\",\n    \"viewBox\": \"0 0 10 10\",\n    \"refX\": \"9\",\n    \"refY\": \"5\",\n    \"markerUnits\": \"strokeWidth\",\n    \"markerWidth\": \"8\",\n    \"markerHeight\": \"6\",\n    \"orient\": \"auto\"\n  }, mdx(\"path\", {\n    parentName: \"marker\",\n    \"d\": \"M 0 0 L 10 5 L 0 10 z\",\n    \"className\": \"arrowheadPath\",\n    \"style\": {\n      \"strokeWidth\": \"1\",\n      \"strokeDasharray\": \"1, 0\"\n    }\n  })))), mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"edgePath LS-B LE-D\",\n    \"id\": \"L-B-D\",\n    \"style\": {\n      \"opacity\": \"1\"\n    }\n  }, mdx(\"path\", {\n    parentName: \"g\",\n    \"className\": \"path\",\n    \"d\": \"M301.5855823863636,90L309.6155894886363,94.16666666666667C317.64559659090907,98.33333333333333,333.70561079545456,106.66666666666667,345.90228456439394,110.83333333333333C358.0989583333333,115,366.4322916666667,115,370.5989583333333,115L374.765625,115\",\n    \"markerEnd\": \"url(#arrowhead21)\",\n    \"style\": {\n      \"fill\": \"none\"\n    }\n  }), mdx(\"defs\", {\n    parentName: \"g\"\n  }, mdx(\"marker\", {\n    parentName: \"defs\",\n    \"id\": \"arrowhead21\",\n    \"viewBox\": \"0 0 10 10\",\n    \"refX\": \"9\",\n    \"refY\": \"5\",\n    \"markerUnits\": \"strokeWidth\",\n    \"markerWidth\": \"8\",\n    \"markerHeight\": \"6\",\n    \"orient\": \"auto\"\n  }, mdx(\"path\", {\n    parentName: \"marker\",\n    \"d\": \"M 0 0 L 10 5 L 0 10 z\",\n    \"className\": \"arrowheadPath\",\n    \"style\": {\n      \"strokeWidth\": \"1\",\n      \"strokeDasharray\": \"1, 0\"\n    }\n  })))), mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"edgePath LS-D LE-E\",\n    \"id\": \"L-D-E\",\n    \"style\": {\n      \"opacity\": \"1\"\n    }\n  }, mdx(\"path\", {\n    parentName: \"g\",\n    \"className\": \"path\",\n    \"d\": \"M526.583984375,96L538.2783203125,91.83333333333333C549.97265625,87.66666666666667,573.361328125,79.33333333333333,593.8916015625,75.16666666666667C614.421875,71,632.09375,71,640.9296875,71L649.765625,71\",\n    \"markerEnd\": \"url(#arrowhead22)\",\n    \"style\": {\n      \"fill\": \"none\"\n    }\n  }), mdx(\"defs\", {\n    parentName: \"g\"\n  }, mdx(\"marker\", {\n    parentName: \"defs\",\n    \"id\": \"arrowhead22\",\n    \"viewBox\": \"0 0 10 10\",\n    \"refX\": \"9\",\n    \"refY\": \"5\",\n    \"markerUnits\": \"strokeWidth\",\n    \"markerWidth\": \"8\",\n    \"markerHeight\": \"6\",\n    \"orient\": \"auto\"\n  }, mdx(\"path\", {\n    parentName: \"marker\",\n    \"d\": \"M 0 0 L 10 5 L 0 10 z\",\n    \"className\": \"arrowheadPath\",\n    \"style\": {\n      \"strokeWidth\": \"1\",\n      \"strokeDasharray\": \"1, 0\"\n    }\n  })))), mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"edgePath LS-D LE-F\",\n    \"id\": \"L-D-F\",\n    \"style\": {\n      \"opacity\": \"1\"\n    }\n  }, mdx(\"path\", {\n    parentName: \"g\",\n    \"className\": \"path\",\n    \"d\": \"M526.583984375,134L538.2783203125,138.16666666666666C549.97265625,142.33333333333334,573.361328125,150.66666666666666,589.2223307291666,154.83333333333334C605.0833333333334,159,613.4166666666666,159,617.5833333333334,159L621.75,159\",\n    \"markerEnd\": \"url(#arrowhead23)\",\n    \"style\": {\n      \"fill\": \"none\"\n    }\n  }), mdx(\"defs\", {\n    parentName: \"g\"\n  }, mdx(\"marker\", {\n    parentName: \"defs\",\n    \"id\": \"arrowhead23\",\n    \"viewBox\": \"0 0 10 10\",\n    \"refX\": \"9\",\n    \"refY\": \"5\",\n    \"markerUnits\": \"strokeWidth\",\n    \"markerWidth\": \"8\",\n    \"markerHeight\": \"6\",\n    \"orient\": \"auto\"\n  }, mdx(\"path\", {\n    parentName: \"marker\",\n    \"d\": \"M 0 0 L 10 5 L 0 10 z\",\n    \"className\": \"arrowheadPath\",\n    \"style\": {\n      \"strokeWidth\": \"1\",\n      \"strokeDasharray\": \"1, 0\"\n    }\n  }))))), mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"edgeLabels\"\n  }, mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"edgeLabel\",\n    \"transform\": \"\",\n    \"style\": {\n      \"opacity\": \"1\"\n    }\n  }, mdx(\"g\", {\n    parentName: \"g\",\n    \"transform\": \"translate(0,0)\",\n    \"className\": \"label\"\n  }, mdx(\"rect\", {\n    parentName: \"g\",\n    \"rx\": \"0\",\n    \"ry\": \"0\",\n    \"width\": \"0\",\n    \"height\": \"0\"\n  }), mdx(\"foreignObject\", {\n    parentName: \"g\",\n    \"width\": \"0\",\n    \"height\": \"0\"\n  }, mdx(\"div\", {\n    parentName: \"foreignObject\",\n    \"xmlns\": \"http://www.w3.org/1999/xhtml\",\n    \"style\": {\n      \"display\": \"inline-block\",\n      \"whiteSpace\": \"nowrap\"\n    }\n  }, mdx(\"span\", {\n    parentName: \"div\",\n    \"id\": \"L-L-A-B\",\n    \"className\": \"edgeLabel L-LS-A' L-LE-B\"\n  }))))), mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"edgeLabel\",\n    \"transform\": \"\",\n    \"style\": {\n      \"opacity\": \"1\"\n    }\n  }, mdx(\"g\", {\n    parentName: \"g\",\n    \"transform\": \"translate(0,0)\",\n    \"className\": \"label\"\n  }, mdx(\"rect\", {\n    parentName: \"g\",\n    \"rx\": \"0\",\n    \"ry\": \"0\",\n    \"width\": \"0\",\n    \"height\": \"0\"\n  }), mdx(\"foreignObject\", {\n    parentName: \"g\",\n    \"width\": \"0\",\n    \"height\": \"0\"\n  }, mdx(\"div\", {\n    parentName: \"foreignObject\",\n    \"xmlns\": \"http://www.w3.org/1999/xhtml\",\n    \"style\": {\n      \"display\": \"inline-block\",\n      \"whiteSpace\": \"nowrap\"\n    }\n  }, mdx(\"span\", {\n    parentName: \"div\",\n    \"id\": \"L-L-B-C\",\n    \"className\": \"edgeLabel L-LS-B' L-LE-C\"\n  }))))), mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"edgeLabel\",\n    \"transform\": \"\",\n    \"style\": {\n      \"opacity\": \"1\"\n    }\n  }, mdx(\"g\", {\n    parentName: \"g\",\n    \"transform\": \"translate(0,0)\",\n    \"className\": \"label\"\n  }, mdx(\"rect\", {\n    parentName: \"g\",\n    \"rx\": \"0\",\n    \"ry\": \"0\",\n    \"width\": \"0\",\n    \"height\": \"0\"\n  }), mdx(\"foreignObject\", {\n    parentName: \"g\",\n    \"width\": \"0\",\n    \"height\": \"0\"\n  }, mdx(\"div\", {\n    parentName: \"foreignObject\",\n    \"xmlns\": \"http://www.w3.org/1999/xhtml\",\n    \"style\": {\n      \"display\": \"inline-block\",\n      \"whiteSpace\": \"nowrap\"\n    }\n  }, mdx(\"span\", {\n    parentName: \"div\",\n    \"id\": \"L-L-B-D\",\n    \"className\": \"edgeLabel L-LS-B' L-LE-D\"\n  }))))), mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"edgeLabel\",\n    \"transform\": \"\",\n    \"style\": {\n      \"opacity\": \"1\"\n    }\n  }, mdx(\"g\", {\n    parentName: \"g\",\n    \"transform\": \"translate(0,0)\",\n    \"className\": \"label\"\n  }, mdx(\"rect\", {\n    parentName: \"g\",\n    \"rx\": \"0\",\n    \"ry\": \"0\",\n    \"width\": \"0\",\n    \"height\": \"0\"\n  }), mdx(\"foreignObject\", {\n    parentName: \"g\",\n    \"width\": \"0\",\n    \"height\": \"0\"\n  }, mdx(\"div\", {\n    parentName: \"foreignObject\",\n    \"xmlns\": \"http://www.w3.org/1999/xhtml\",\n    \"style\": {\n      \"display\": \"inline-block\",\n      \"whiteSpace\": \"nowrap\"\n    }\n  }, mdx(\"span\", {\n    parentName: \"div\",\n    \"id\": \"L-L-D-E\",\n    \"className\": \"edgeLabel L-LS-D' L-LE-E\"\n  }))))), mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"edgeLabel\",\n    \"transform\": \"\",\n    \"style\": {\n      \"opacity\": \"1\"\n    }\n  }, mdx(\"g\", {\n    parentName: \"g\",\n    \"transform\": \"translate(0,0)\",\n    \"className\": \"label\"\n  }, mdx(\"rect\", {\n    parentName: \"g\",\n    \"rx\": \"0\",\n    \"ry\": \"0\",\n    \"width\": \"0\",\n    \"height\": \"0\"\n  }), mdx(\"foreignObject\", {\n    parentName: \"g\",\n    \"width\": \"0\",\n    \"height\": \"0\"\n  }, mdx(\"div\", {\n    parentName: \"foreignObject\",\n    \"xmlns\": \"http://www.w3.org/1999/xhtml\",\n    \"style\": {\n      \"display\": \"inline-block\",\n      \"whiteSpace\": \"nowrap\"\n    }\n  }, mdx(\"span\", {\n    parentName: \"div\",\n    \"id\": \"L-L-D-F\",\n    \"className\": \"edgeLabel L-LS-D' L-LE-F\"\n  })))))), mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"nodes\"\n  }, mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"node default\",\n    \"id\": \"flowchart-A-10\",\n    \"transform\": \"translate(81.5859375,71)\",\n    \"style\": {\n      \"opacity\": \"1\"\n    }\n  }, mdx(\"rect\", {\n    parentName: \"g\",\n    \"rx\": \"5\",\n    \"ry\": \"5\",\n    \"x\": \"-73.5859375\",\n    \"y\": \"-19\",\n    \"width\": \"147.171875\",\n    \"height\": \"38\",\n    \"className\": \"label-container\"\n  }), mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"label\",\n    \"transform\": \"translate(0,0)\"\n  }, mdx(\"g\", {\n    parentName: \"g\",\n    \"transform\": \"translate(-63.5859375,-9)\"\n  }, mdx(\"foreignObject\", {\n    parentName: \"g\",\n    \"width\": \"127.171875\",\n    \"height\": \"18\"\n  }, mdx(\"div\", {\n    parentName: \"foreignObject\",\n    \"xmlns\": \"http://www.w3.org/1999/xhtml\",\n    \"style\": {\n      \"display\": \"inline-block\",\n      \"whiteSpace\": \"nowrap\"\n    }\n  }, \"query: QueryType\"))))), mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"node default\",\n    \"id\": \"flowchart-B-11\",\n    \"transform\": \"translate(264.96875,71)\",\n    \"style\": {\n      \"opacity\": \"1\"\n    }\n  }, mdx(\"rect\", {\n    parentName: \"g\",\n    \"rx\": \"5\",\n    \"ry\": \"5\",\n    \"x\": \"-59.796875\",\n    \"y\": \"-19\",\n    \"width\": \"119.59375\",\n    \"height\": \"38\",\n    \"className\": \"label-container\"\n  }), mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"label\",\n    \"transform\": \"translate(0,0)\"\n  }, mdx(\"g\", {\n    parentName: \"g\",\n    \"transform\": \"translate(-49.796875,-9)\"\n  }, mdx(\"foreignObject\", {\n    parentName: \"g\",\n    \"width\": \"99.59375\",\n    \"height\": \"18\"\n  }, mdx(\"div\", {\n    parentName: \"foreignObject\",\n    \"xmlns\": \"http://www.w3.org/1999/xhtml\",\n    \"style\": {\n      \"display\": \"inline-block\",\n      \"whiteSpace\": \"nowrap\"\n    }\n  }, \"me: UserType\"))))), mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"node default\",\n    \"id\": \"flowchart-C-13\",\n    \"transform\": \"translate(473.2578125,27)\",\n    \"style\": {\n      \"opacity\": \"1\"\n    }\n  }, mdx(\"rect\", {\n    parentName: \"g\",\n    \"rx\": \"5\",\n    \"ry\": \"5\",\n    \"x\": \"-72.703125\",\n    \"y\": \"-19\",\n    \"width\": \"145.40625\",\n    \"height\": \"38\",\n    \"className\": \"label-container\"\n  }), mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"label\",\n    \"transform\": \"translate(0,0)\"\n  }, mdx(\"g\", {\n    parentName: \"g\",\n    \"transform\": \"translate(-62.703125,-9)\"\n  }, mdx(\"foreignObject\", {\n    parentName: \"g\",\n    \"width\": \"125.40625\",\n    \"height\": \"18\"\n  }, mdx(\"div\", {\n    parentName: \"foreignObject\",\n    \"xmlns\": \"http://www.w3.org/1999/xhtml\",\n    \"style\": {\n      \"display\": \"inline-block\",\n      \"whiteSpace\": \"nowrap\"\n    }\n  }, \"name: StringType\"))))), mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"node default\",\n    \"id\": \"flowchart-D-15\",\n    \"transform\": \"translate(473.2578125,115)\",\n    \"style\": {\n      \"opacity\": \"1\"\n    }\n  }, mdx(\"rect\", {\n    parentName: \"g\",\n    \"rx\": \"5\",\n    \"ry\": \"5\",\n    \"x\": \"-98.4921875\",\n    \"y\": \"-19\",\n    \"width\": \"196.984375\",\n    \"height\": \"38\",\n    \"className\": \"label-container\"\n  }), mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"label\",\n    \"transform\": \"translate(0,0)\"\n  }, mdx(\"g\", {\n    parentName: \"g\",\n    \"transform\": \"translate(-88.4921875,-9)\"\n  }, mdx(\"foreignObject\", {\n    parentName: \"g\",\n    \"width\": \"176.984375\",\n    \"height\": \"18\"\n  }, mdx(\"div\", {\n    parentName: \"foreignObject\",\n    \"xmlns\": \"http://www.w3.org/1999/xhtml\",\n    \"style\": {\n      \"display\": \"inline-block\",\n      \"whiteSpace\": \"nowrap\"\n    }\n  }, \"company: CompanyType\"))))), mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"node default\",\n    \"id\": \"flowchart-E-17\",\n    \"transform\": \"translate(694.453125,71)\",\n    \"style\": {\n      \"opacity\": \"1\"\n    }\n  }, mdx(\"rect\", {\n    parentName: \"g\",\n    \"rx\": \"5\",\n    \"ry\": \"5\",\n    \"x\": \"-44.6875\",\n    \"y\": \"-19\",\n    \"width\": \"89.375\",\n    \"height\": \"38\",\n    \"className\": \"label-container\"\n  }), mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"label\",\n    \"transform\": \"translate(0,0)\"\n  }, mdx(\"g\", {\n    parentName: \"g\",\n    \"transform\": \"translate(-34.6875,-9)\"\n  }, mdx(\"foreignObject\", {\n    parentName: \"g\",\n    \"width\": \"69.375\",\n    \"height\": \"18\"\n  }, mdx(\"div\", {\n    parentName: \"foreignObject\",\n    \"xmlns\": \"http://www.w3.org/1999/xhtml\",\n    \"style\": {\n      \"display\": \"inline-block\",\n      \"whiteSpace\": \"nowrap\"\n    }\n  }, \"id: IdType\"))))), mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"node default\",\n    \"id\": \"flowchart-F-19\",\n    \"transform\": \"translate(694.453125,159)\",\n    \"style\": {\n      \"opacity\": \"1\"\n    }\n  }, mdx(\"rect\", {\n    parentName: \"g\",\n    \"rx\": \"5\",\n    \"ry\": \"5\",\n    \"x\": \"-72.703125\",\n    \"y\": \"-19\",\n    \"width\": \"145.40625\",\n    \"height\": \"38\",\n    \"className\": \"label-container\"\n  }), mdx(\"g\", {\n    parentName: \"g\",\n    \"className\": \"label\",\n    \"transform\": \"translate(0,0)\"\n  }, mdx(\"g\", {\n    parentName: \"g\",\n    \"transform\": \"translate(-62.703125,-9)\"\n  }, mdx(\"foreignObject\", {\n    parentName: \"g\",\n    \"width\": \"125.40625\",\n    \"height\": \"18\"\n  }, mdx(\"div\", {\n    parentName: \"foreignObject\",\n    \"xmlns\": \"http://www.w3.org/1999/xhtml\",\n    \"style\": {\n      \"display\": \"inline-block\",\n      \"whiteSpace\": \"nowrap\"\n    }\n  }, \"name: StringType\")))))))))), mdx(\"p\", null, \"This tree will be traversed by the execution engine, starting with one or more root resolvers. In the above example the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"me\"), \" field represents the only root resolver.\"), mdx(\"p\", null, \"Field resolvers that are subselections of a field, can only be executed after a value has been resolved for their \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"parent\"), \" field. In the case of the above example this means that the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"company\"), \" resolvers can only run, after the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"me\"), \" resolver has finished. Resolvers of field subselections can and will be executed in parallel.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Because of this it is important that resolvers, with the exception of top level mutation field resolvers, do not contain side-effects, since their execution order may vary.\")), mdx(\"p\", null, \"The execution of a request finishes, once each resolver of the selected fields has produced a result.\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"This is of course an oversimplification that differs from the actual implementation.\")), mdx(\"h1\", {\n    \"id\": \"defining-a-resolver\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#defining-a-resolver\",\n    \"aria-label\": \"defining a resolver permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 512 512\",\n    \"width\": \"16\",\n    \"height\": \"16\",\n    \"fill\": \"var(--heading-text-color)\"\n  }, \"\\n                        \", mdx(\"path\", {\n    parentName: \"svg\",\n    \"d\": \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  }), \"\\n                      \")), \"Defining a Resolver\"), mdx(\"p\", null, \"Resolvers can be defined in a way that should feel very familiar to C# developers, especially in the Annotation-based approach.\"), mdx(\"h2\", {\n    \"id\": \"properties\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#properties\",\n    \"aria-label\": \"properties permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 512 512\",\n    \"width\": \"16\",\n    \"height\": \"16\",\n    \"fill\": \"var(--heading-text-color)\"\n  }, \"\\n                        \", mdx(\"path\", {\n    parentName: \"svg\",\n    \"d\": \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  }), \"\\n                      \")), \"Properties\"), mdx(\"p\", null, \"Hot Chocolate automatically converts properties with a public get accessor to a resolver that simply returns its value.\"), mdx(\"p\", null, \"Properties are also covered in detail by the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/hotchocolate/defining-a-schema/object-types\"\n  }, \"object type documentation\"), \".\"), mdx(\"h2\", {\n    \"id\": \"regular-resolver\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#regular-resolver\",\n    \"aria-label\": \"regular resolver permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 512 512\",\n    \"width\": \"16\",\n    \"height\": \"16\",\n    \"fill\": \"var(--heading-text-color)\"\n  }, \"\\n                        \", mdx(\"path\", {\n    parentName: \"svg\",\n    \"d\": \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  }), \"\\n                      \")), \"Regular Resolver\"), mdx(\"p\", null, \"A regular resolver is just a simple method, which returns a value.\"), mdx(ExampleTabs, {\n    mdxType: \"ExampleTabs\"\n  }, mdx(ExampleTabs.Annotation, null, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public class Query\\n{\\n    public string Foo() => \\\"Bar\\\";\\n}\\n\\npublic class Startup\\n{\\n    public void ConfigureServices(IServiceCollection services)\\n    {\\n        services\\n            .AddGraphQLServer()\\n            .AddQueryType<Query>();\\n    }\\n}\\n\"))), mdx(ExampleTabs.Code, null, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public class Query\\n{\\n    public string Foo() => \\\"Bar\\\";\\n}\\n\\npublic class QueryType: ObjectType<Query>\\n{\\n    protected override void Configure(IObjectTypeDescriptor<Query> descriptor)\\n    {\\n        descriptor\\n            .Field(f => f.Foo())\\n            .Type<NonNullType<StringType>>();\\n    }\\n}\\n\\npublic class Startup\\n{\\n    public void ConfigureServices(IServiceCollection services)\\n    {\\n        services\\n            .AddGraphQLServer()\\n            .AddQueryType<QueryType>();\\n    }\\n}\\n\")), mdx(\"p\", null, \"We can also provide a resolver delegate by using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Resolve\"), \" method.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"descriptor\\n    .Field(\\\"foo\\\")\\n    .Resolve(context =>\\n    {\\n        return \\\"Bar\\\";\\n    });\\n\"))), mdx(ExampleTabs.Schema, null, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public class Query\\n{\\n    public string Foo() => \\\"Bar\\\";\\n}\\n\\npublic class Startup\\n{\\n    public void ConfigureServices(IServiceCollection services)\\n    {\\n        services\\n            .AddGraphQLServer()\\n            .AddDocumentFromString(@\\\"\\n                type Query {\\n                    foo: String!\\n                }\\n            \\\")\\n            .BindComplexType<Query>();\\n    }\\n}\\n\")), mdx(\"p\", null, \"We can also add a resolver by calling \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AddResolver()\"), \" on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IRequestExecutorBuilder\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"services\\n    .AddGraphQLServer()\\n    .AddDocumentFromString(@\\\"\\n        type Query {\\n          foo: String!\\n        }\\n    \\\")\\n    .AddResolver(\\\"Query\\\", \\\"foo\\\", (context) => \\\"Bar\\\");\\n\")))), mdx(\"h2\", {\n    \"id\": \"async-resolver\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#async-resolver\",\n    \"aria-label\": \"async resolver permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 512 512\",\n    \"width\": \"16\",\n    \"height\": \"16\",\n    \"fill\": \"var(--heading-text-color)\"\n  }, \"\\n                        \", mdx(\"path\", {\n    parentName: \"svg\",\n    \"d\": \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  }), \"\\n                      \")), \"Async Resolver\"), mdx(\"p\", null, \"Most data fetching operations, like calling a service or communicating with a database, will be asynchronous.\"), mdx(\"p\", null, \"In Hot Chocolate, we can simply mark our resolver methods and delegates as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"async\"), \" or return a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Task<T>\"), \" and it becomes an async-capable resolver.\"), mdx(\"p\", null, \"We can also add a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CancellationToken\"), \" argument to our resolver. Hot Chocolate will automatically cancel this token if the request has been aborted.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public class Query\\n{\\n    public async Task<string> Foo(CancellationToken ct)\\n    {\\n        // Omitted code for brevity\\n    }\\n}\\n\")), mdx(\"p\", null, \"When using a delegate resolver, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CancellationToken\"), \" is passed as second argument to the delegate.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"descriptor\\n    .Field(\\\"foo\\\")\\n    .Resolve((context, ct) =>\\n    {\\n        // Omitted code for brevity\\n    });\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CancellationToken\"), \" can also be accessed through the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IResolverContext\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"descriptor\\n    .Field(\\\"foo\\\")\\n    .Resolve(context =>\\n    {\\n        CancellationToken ct = context.RequestAborted;\\n\\n        // Omitted code for brevity\\n    });\\n\")), mdx(\"h2\", {\n    \"id\": \"resolvewith\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#resolvewith\",\n    \"aria-label\": \"resolvewith permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 512 512\",\n    \"width\": \"16\",\n    \"height\": \"16\",\n    \"fill\": \"var(--heading-text-color)\"\n  }, \"\\n                        \", mdx(\"path\", {\n    parentName: \"svg\",\n    \"d\": \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  }), \"\\n                      \")), \"ResolveWith\"), mdx(\"p\", null, \"Thus far we have looked at two ways to specify resolvers in Code-first:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add new methods to the CLR type, e.g. the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"T\"), \" type of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ObjectType<T>\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add new fields to the schema type in the form of delegates\", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"descriptor.Field(\\\"foo\\\").Resolve(context => )\\n\")))), mdx(\"p\", null, \"But there's a third way. We can describe our field using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"descriptor\"), \", but instead of a resolver delegate, we can point to a method on another class, responsible for resolving this field.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public class FooResolvers\\n{\\n    public string GetFoo(string arg, [Service] FooService service)\\n    {\\n        // Omitted code for brevity\\n    }\\n}\\n\\npublic class QueryType : ObjectType\\n{\\n    protected override void Configure(IObjectTypeDescriptor descriptor)\\n    {\\n        descriptor\\n            .Field(\\\"foo\\\")\\n            .Argument(\\\"arg\\\", a => a.Type<NonNullType<StringType>>())\\n            .ResolveWith<FooResolvers>(r => r.GetFoo(default, default));\\n    }\\n}\\n\")), mdx(\"h1\", {\n    \"id\": \"arguments\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#arguments\",\n    \"aria-label\": \"arguments permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 512 512\",\n    \"width\": \"16\",\n    \"height\": \"16\",\n    \"fill\": \"var(--heading-text-color)\"\n  }, \"\\n                        \", mdx(\"path\", {\n    parentName: \"svg\",\n    \"d\": \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  }), \"\\n                      \")), \"Arguments\"), mdx(\"p\", null, \"We can access arguments we defined for our resolver like regular arguments of a function.\"), mdx(\"p\", null, \"There are also specific arguments that will be automatically populated by Hot Chocolate when the resolver is executed. These include \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#injecting-services\"\n  }, \"Dependency injection services\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/hotchocolate/fetching-data/dataloader\"\n  }, \"DataLoaders\"), \", state, or even context like a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#accessing-parent-values\"\n  }, mdx(\"em\", {\n    parentName: \"a\"\n  }, \"parent\")), \" value.\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/hotchocolate/defining-a-schema/arguments\"\n  }, \"Learn more about arguments\")), mdx(\"h1\", {\n    \"id\": \"injecting-services\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#injecting-services\",\n    \"aria-label\": \"injecting services permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 512 512\",\n    \"width\": \"16\",\n    \"height\": \"16\",\n    \"fill\": \"var(--heading-text-color)\"\n  }, \"\\n                        \", mdx(\"path\", {\n    parentName: \"svg\",\n    \"d\": \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  }), \"\\n                      \")), \"Injecting Services\"), mdx(\"p\", null, \"Resolvers integrate nicely with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Microsoft.Extensions.DependecyInjection\"), \".\\nWe can access all registered services in our resolvers.\"), mdx(\"p\", null, \"Let's assume we have created a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UserService\"), \" and registered it as a service.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public class Startup\\n{\\n    public void ConfigureServices(IServiceCollection services)\\n    {\\n        services.AddSingleton<UserService>()\\n\\n        services\\n            .AddGraphQLServer()\\n            .AddQueryType<Query>();\\n    }\\n}\\n\")), mdx(\"p\", null, \"We can then access the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UserService\"), \" in our resolvers like the following.\"), mdx(ExampleTabs, {\n    mdxType: \"ExampleTabs\"\n  }, mdx(ExampleTabs.Annotation, null, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public class Query\\n{\\n    public List<User> GetUsers([Service] UserService userService)\\n        => userService.GetUsers();\\n}\\n\"))), mdx(ExampleTabs.Code, null, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public class Query\\n{\\n    public List<User> GetUsers([Service] UserService userService)\\n        => userService.GetUsers();\\n}\\n\\npublic class QueryType: ObjectType<Query>\\n{\\n    protected override void Configure(IObjectTypeDescriptor<Query> descriptor)\\n    {\\n        descriptor\\n            .Field(f => f.Foo(default))\\n            .Type<ListType<UserType>>();\\n    }\\n}\\n\")), mdx(\"p\", null, \"When using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Resolve\"), \" method, we can access services through the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IResolverContext\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"descriptor\\n    .Field(\\\"foo\\\")\\n    .Resolve(context =>\\n    {\\n        var userService = context.Service<UserService>();\\n\\n        return userService.GetUsers();\\n    });\\n\"))), mdx(ExampleTabs.Schema, null, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public class Query\\n{\\n    public List<User> GetUsers([Service] UserService userService)\\n        => userService.GetUsers();\\n}\\n\")), mdx(\"p\", null, \"When using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AddResolver()\"), \", we can access services through the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IResolverContext\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"services\\n    .AddGraphQLServer()\\n    .AddDocumentFromString(@\\\"\\n        type Query {\\n          users: [User!]!\\n        }\\n    \\\")\\n    .AddResolver(\\\"Query\\\", \\\"users\\\", (context) =>\\n    {\\n        var userService = context.Service<UserService>();\\n\\n        return userService.GetUsers();\\n    });\\n\")))), mdx(\"p\", null, \"Hot Chocolate will correctly inject the service depending on its lifetime. For example, a scoped service is only instantiated once per scope (by default that's the GraphQL request execution) and this same instance is injected into all resolvers who share the same scope.\"), mdx(\"h2\", {\n    \"id\": \"constructor-injection\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#constructor-injection\",\n    \"aria-label\": \"constructor injection permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 512 512\",\n    \"width\": \"16\",\n    \"height\": \"16\",\n    \"fill\": \"var(--heading-text-color)\"\n  }, \"\\n                        \", mdx(\"path\", {\n    parentName: \"svg\",\n    \"d\": \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  }), \"\\n                      \")), \"Constructor Injection\"), mdx(\"p\", null, \"Of course we can also inject services into the constructor of our types.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public class Query\\n{\\n    private readonly UserService _userService;\\n\\n    public Query(UserService userService)\\n    {\\n        _userService = userService;\\n    }\\n\\n     public List<User> GetUsers()\\n        => _userService.GetUsers();\\n}\\n\")), mdx(\"p\", null, \"It's important to note that the service lifetime of types is singleton per default for performance reasons.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"This means one instance per injected service is kept around and used for the entire lifetime of the GraphQL server, regardless of the original lifetime of the service.\")), mdx(\"p\", null, \"If we depend on truly transient or scoped services, we need to inject them directly into the dependent methods as described \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#injecting-services\"\n  }, \"above\"), \".\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/dotnet/core/extensions/dependency-injection#service-lifetimes\"\n  }, \"Learn more about service lifetimes in ASP.NET Core\")), mdx(\"h2\", {\n    \"id\": \"ihttpcontextaccessor\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#ihttpcontextaccessor\",\n    \"aria-label\": \"ihttpcontextaccessor permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 512 512\",\n    \"width\": \"16\",\n    \"height\": \"16\",\n    \"fill\": \"var(--heading-text-color)\"\n  }, \"\\n                        \", mdx(\"path\", {\n    parentName: \"svg\",\n    \"d\": \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  }), \"\\n                      \")), \"IHttpContextAccessor\"), mdx(\"p\", null, \"The \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/dotnet/api/microsoft.aspnetcore.http.ihttpcontextaccessor\"\n  }, \"IHttpContextAccessor\"), \" allows us to access the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/dotnet/api/microsoft.aspnetcore.http.httpcontext\"\n  }, \"HttpContext\"), \" of the current request from within our resolvers. This is useful, if we for example need to set a header or cookie.\"), mdx(\"p\", null, \"First we need to add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IHttpContextAccessor\"), \" as a service.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public class Startup\\n{\\n    public void ConfigureServices(IServiceCollection services)\\n    {\\n        services.AddHttpContextAccessor();\\n\\n        // Omitted code for brevity\\n    }\\n}\\n\")), mdx(\"p\", null, \"After this we can inject it into our resolvers and make use of the the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HttpContext\"), \" property.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public string Foo(string id, [Service] IHttpContextAccessor httpContextAccessor)\\n{\\n    if (httpContextAccessor.HttpContext is not null)\\n    {\\n        // Omitted code for brevity\\n    }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"iresolvercontext\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#iresolvercontext\",\n    \"aria-label\": \"iresolvercontext permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 512 512\",\n    \"width\": \"16\",\n    \"height\": \"16\",\n    \"fill\": \"var(--heading-text-color)\"\n  }, \"\\n                        \", mdx(\"path\", {\n    parentName: \"svg\",\n    \"d\": \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  }), \"\\n                      \")), \"IResolverContext\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IResolverContext\"), \" is mainly used in delegate resolvers of the Code-first approach, but we can also access it in the Annotation-based approach, by simply injecting it.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public class Query\\n{\\n    public string Foo(IResolverContext context)\\n    {\\n        // Omitted code for brevity\\n    }\\n}\\n\")), mdx(\"h1\", {\n    \"id\": \"accessing-parent-values\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#accessing-parent-values\",\n    \"aria-label\": \"accessing parent values permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 512 512\",\n    \"width\": \"16\",\n    \"height\": \"16\",\n    \"fill\": \"var(--heading-text-color)\"\n  }, \"\\n                        \", mdx(\"path\", {\n    parentName: \"svg\",\n    \"d\": \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  }), \"\\n                      \")), \"Accessing parent values\"), mdx(\"p\", null, \"The resolver of each field on a type has access to the value that was resolved for said type.\"), mdx(\"p\", null, \"Let's look at an example. We have the following schema.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sdl\"\n  }, \"type Query {\\n  me: User!;\\n}\\n\\ntype User {\\n  id: ID!;\\n  friends: [User!]!;\\n}\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"User\"), \" schema type is represented by an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"User\"), \" CLR type. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" field is an actual property on this CLR type.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public class User\\n{\\n    public string Id { get; set; }\\n}\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"friends\"), \" on the other hand is a resolver i.e. method we defined. It depends on the user's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Id\"), \" property to compute its result.\\nFrom the point of view of this \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"friends\"), \" resolver, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"User\"), \" CLR type is its \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"parent\"), \".\"), mdx(\"p\", null, \"We can access this so called \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"parent\"), \" value like the following.\"), mdx(ExampleTabs, {\n    mdxType: \"ExampleTabs\"\n  }, mdx(ExampleTabs.Annotation, null, mdx(\"p\", null, \"In the Annotation-based approach we can just access the properties using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this\"), \" keyword.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public class User\\n{\\n    public string Id { get; set; }\\n\\n    public List<User> GetFriends()\\n    {\\n        var currentUserId = this.Id;\\n\\n        // Omitted code for brevity\\n    }\\n}\\n\")), mdx(\"p\", null, \"There's also a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[Parent]\"), \" attribute that injects the parent into the resolver.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public class User\\n{\\n    public string Id { get; set; }\\n\\n    public List<User> GetFriends([Parent] User parent)\\n    {\\n        // Omitted code for brevity\\n    }\\n}\\n\")), mdx(\"p\", null, \"This is especially useful when using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/hotchocolate/defining-a-schema/extending-types\"\n  }, \"type extensions\"), \".\")), mdx(ExampleTabs.Code, null, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public class User\\n{\\n    public string Id { get; set; }\\n\\n    public List<User> GetFriends([Parent] User parent)\\n    {\\n        // Omitted code for brevity\\n    }\\n}\\n\")), mdx(\"p\", null, \"When using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Resolve\"), \" method, we can access the parent through the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IResolverContext\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public class User\\n{\\n    public string Id { get; set; }\\n}\\n\\npublic class UserType : ObjectType<User>\\n{\\n    protected override void Configure(IObjectTypeDescriptor<User> descriptor)\\n    {\\n        descriptor\\n            .Field(\\\"friends\\\")\\n            .Resolve(context =>\\n            {\\n                User parent = context.Parent<User>();\\n\\n                // Omitted code for brevity\\n            });\\n    }\\n}\\n\"))), mdx(ExampleTabs.Schema, null, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public class User\\n{\\n    public string Id { get; set; }\\n\\n    public List<User> GetFriends([Parent] User parent)\\n    {\\n        // Omitted code for brevity\\n    }\\n}\\n\")), mdx(\"p\", null, \"When using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AddResolver()\"), \", we can access the parent through the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IResolverContext\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"services\\n    .AddGraphQLServer()\\n    .AddDocumentFromString(@\\\"\\n        type User {\\n          friends: [User!]!\\n        }\\n    \\\")\\n    .AddResolver(\\\"User\\\", \\\"friends\\\", (context) =>\\n    {\\n        User parent = context.Parent<User>();\\n\\n        // Omitted code for brevity\\n    });\\n\")))));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":2,"value":"Resolver Tree"},{"depth":1,"value":"Defining a Resolver"},{"depth":2,"value":"Properties"},{"depth":2,"value":"Regular Resolver"},{"depth":2,"value":"Async Resolver"},{"depth":2,"value":"ResolveWith"},{"depth":1,"value":"Arguments"},{"depth":1,"value":"Injecting Services"},{"depth":2,"value":"Constructor Injection"},{"depth":2,"value":"IHttpContextAccessor"},{"depth":2,"value":"IResolverContext"},{"depth":1,"value":"Accessing parent values"}]}},"site":{"siteMetadata":{"siteUrl":"https://chillicream.com","repositoryUrl":"https://github.com/ChilliCream/hotchocolate","tools":{"slack":"https://bit.ly/joinchilli"}}},"config":{"products":[{"path":"hotchocolate","title":"Hot Chocolate","description":"Build your own thin GraphQL API layer on top of any resource.","versions":[{"path":"","title":"v11","items":[{"path":"index","title":"Introduction","items":null},{"path":"get-started","title":"Get Started","items":null},{"path":"defining-a-schema","title":"Defining a schema","items":[{"path":"index","title":"Overview"},{"path":"queries","title":"Queries"},{"path":"mutations","title":"Mutations"},{"path":"subscriptions","title":"Subscriptions"},{"path":"object-types","title":"Object Types"},{"path":"scalars","title":"Scalars"},{"path":"arguments","title":"Arguments"},{"path":"input-object-types","title":"Input Object Types"},{"path":"lists","title":"Lists"},{"path":"non-null","title":"Non-Null"},{"path":"enums","title":"Enums"},{"path":"interfaces","title":"Interfaces"},{"path":"unions","title":"Unions"},{"path":"extending-types","title":"Extending Types"},{"path":"directives","title":"Directives"},{"path":"documentation","title":"Documentation"},{"path":"versioning","title":"Versioning"}]},{"path":"fetching-data","title":"Fetching data","items":[{"path":"index","title":"Overview"},{"path":"resolvers","title":"Resolvers"},{"path":"fetching-from-databases","title":"Fetching from Databases"},{"path":"fetching-from-rest","title":"Fetching from REST"},{"path":"dataloader","title":"DataLoader"},{"path":"pagination","title":"Pagination"},{"path":"filtering","title":"Filtering"},{"path":"sorting","title":"Sorting"},{"path":"projections","title":"Projections"}]},{"path":"distributed-schema","title":"Distributed Schemas","items":[{"path":"index","title":"Overview"},{"path":"schema-stitching","title":"Schema Stitching"},{"path":"schema-federations","title":"Schema Federations"},{"path":"schema-configuration","title":"Schema Configuration"}]},{"path":"integrations","title":"Integrations","items":[{"path":"index","title":"Overview"},{"path":"entity-framework","title":"Entity Framework"},{"path":"mongodb","title":"MongoDB"},{"path":"spatial-data","title":"Spatial Data"}]},{"path":"performance","title":"Performance","items":[{"path":"index","title":"Overview"},{"path":"persisted-queries","title":"Persisted queries"},{"path":"automatic-persisted-queries","title":"Automatic persisted queries"}]},{"path":"security","title":"Security","items":[{"path":"index","title":"Overview"},{"path":"authentication","title":"Authentication"},{"path":"authorization","title":"Authorization"}]},{"path":"api-reference","title":"API Reference","items":[{"path":"index","title":"Overview"},{"path":"custom-attributes","title":"Custom Attributes"},{"path":"language","title":"Language"},{"path":"extending-filtering","title":"Extending Filtering"},{"path":"visitors","title":"Visitors"},{"path":"aspnetcore","title":"ASP.NET Core"},{"path":"dependency-injection","title":"Dependency Injection"},{"path":"executable","title":"Executable"},{"path":"apollo-tracing","title":"Apollo Tracing"},{"path":"migrate-from-10-to-11","title":"Migrate from 10.5 to 11.0"}]}]},{"path":"v10","title":"v10","items":[{"path":"index","title":"Introduction","items":null},{"path":"code-first","title":"Code-First","items":null},{"path":"schema-first","title":"Schema-First","items":null},{"path":"schema","title":"Schema","items":[{"path":"index","title":"Schema"},{"path":"object-type","title":"Object Type"},{"path":"interface-type","title":"Interface Type"},{"path":"union-type","title":"Union Type"},{"path":"input-object-type","title":"Input Object Type"},{"path":"enum-type","title":"Enum Type"},{"path":"descriptions","title":"Schema Descriptions"},{"path":"custom-scalar-types","title":"Scalar Type Support"},{"path":"descriptor-attributes","title":"Descriptor Attributes"},{"path":"extending-types","title":"Custom Base Classes"},{"path":"directives","title":"Directives"},{"path":"resolvers","title":"Resolvers"},{"path":"relay","title":"Relay"},{"path":"conventions","title":"Conventions"},{"path":"options","title":"Schema Options"}]},{"path":"data-fetching","title":"Data Fetching","items":[{"path":"index","title":"Data Loaders"},{"path":"pagination","title":"Pagination"},{"path":"filters","title":"Filters"}]},{"path":"security","title":"Security","items":[{"path":"index","title":"Authorization"},{"path":"security","title":"Security"}]},{"path":"execution-engine","title":"Execution Engine","items":[{"path":"index","title":"Middleware"},{"path":"validation-rules","title":"Validation Rules"},{"path":"instrumentation","title":"Instrumentation"},{"path":"apollo-tracing","title":"Apollo Tracing"},{"path":"batching","title":"Batching"},{"path":"persisted-queries","title":"Persisted Queries"},{"path":"custom-context-data","title":"Custom Context Data"},{"path":"subscriptions","title":"Subscriptions"},{"path":"type-conversion","title":"Type Conversion"},{"path":"error-filter","title":"Error Filter"},{"path":"execution-options","title":"Execution Options"}]},{"path":"server","title":"Server","items":[{"path":"index","title":"ASP.NET"},{"path":"dependency-injection","title":"Dependency Injection"}]},{"path":"stitching","title":"Schema Stitching","items":null},{"path":"tooling","title":"Tooling","items":null},{"path":"advanced","title":"Advanced","items":[{"path":"index","title":"Parser"},{"path":"dotnet-cli","title":".NET CLI"}]},{"path":"tutorials","title":"Tutorials","items":[{"path":"index","title":"Entity Framework"}]},{"path":"examples","title":"Examples","items":[{"path":"index","title":"Star Wars"},{"path":"slack-clone","title":"Slack Clone"},{"path":"other-examples","title":"Other Examples"}]}]}]},{"path":"bananacakepop","title":"Banana Cake Pop","description":"Use this GUI to get deep insights from any GraphQL API.","versions":[{"path":"","title":"v1","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"strawberryshake","title":"Strawberry Shake","description":"The only GraphQL client you will every need in the .NET ecosystem.","versions":[{"path":"","title":"v11","items":[{"path":"index","title":"Introduction","items":null},{"path":"get-started","title":"Get Started","items":[{"path":"index","title":"Blazor"},{"path":"xamarin","title":"Xamarin"},{"path":"console","title":"Console"}]},{"path":"subscriptions","title":"Subscriptions","items":null},{"path":"tooling","title":"Tooling / CLI","items":null},{"path":"caching","title":"Caching","items":[{"path":"index","title":"Overview"},{"path":"entities","title":"Entities"},{"path":"invalidation","title":"Invalidation"}]},{"path":"performance","title":"Performance","items":[{"path":"index","title":"Overview"},{"path":"persisted-queries","title":"Persisted Queries"},{"path":"persisted-state","title":"Persisted State"}]},{"path":"networking","title":"Networking","items":[{"path":"index","title":"Protocols"},{"path":"authentication","title":"Authentication"}]},{"path":"scalars","title":"Scalars","items":null}]}]},{"path":"greendonut","title":"Green Donut","description":"Configure data loaders and caching for GraphQL endpoints.","versions":[{"path":"","title":"v11","items":[{"path":"index","title":"Introduction","items":null}]},{"path":"v10","title":"v10","items":[{"path":"index","title":"Introduction","items":null},{"path":"installation","title":"Installation","items":null},{"path":"usage","title":"Usage","items":null},{"path":"api","title":"API","items":null},{"path":"advanced-concepts","title":"Advanced Concepts","items":[{"path":"index","title":"Custom DataLoader"},{"path":"diagnostics","title":"Diagnostic Events"}]}]}]}]}},"pageContext":{"originPath":"hotchocolate/fetching-data/resolvers.md"}},"staticQueryHashes":["1981385993","2890364758","4218812017"]}