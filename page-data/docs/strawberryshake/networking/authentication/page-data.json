{"componentChunkName":"component---src-templates-doc-page-template-tsx","path":"/docs/strawberryshake/networking/authentication","result":{"data":{"file":{"childMdx":{"fields":{"slug":"/strawberryshake/networking/authentication/","lastUpdated":"2021-05-04","lastAuthorName":"Rafael Staib"},"frontmatter":{"title":"Authentication"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Authentication\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"To access a protected API with Strawberry Shake, you need to proof the user's identity to the server.\\nEach network protocol of Strawberry Shake handles authentication a bit different.\"), mdx(\"h1\", null, \"HTTP\"), mdx(\"p\", null, \"Strawberry Shake uses the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HttpClientFactory\"), \" to generate a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HttpClient\"), \" on every request.\\nYou can either register a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HttpClient\"), \" directly on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ServiceCollection\"), \" or use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ConfigureHttpClient\"), \" method on the client builder.\"), mdx(\"h2\", null, \"ConfigureHttpClient\"), mdx(\"p\", null, \"The generated extension method to register the client on the serivce collection, returns a builder that can be used to configure the http client.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \" services\\n    .AddConferenceClient()\\n    .ConfigureHttpClient(client =>\\n    {\\n        client.BaseAddress =\\n            new Uri(\\\"https://hc-conference-app.azurewebsites.net/graphql/\\\");\\n        client.DefaultRequestHeaders.Authorization =\\n            new AuthenticationHeaderValue(\\\"Bearer\\\", \\\"Your Oauth token\\\");\\n    });\\n\")), mdx(\"p\", null, \"There is an overload of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ConfigureHttpClient\"), \" method that provides access to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IServiceProvider\"), \", in case the access token is stored there.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"services\\n    .AddConferenceClient()\\n    .ConfigureHttpClient((serviceProvider, client) =>\\n    {\\n        var token = serviceProvider.GetRequiredService<ISomeService>().Token;\\n    });\\n\")), mdx(\"p\", null, \"The second parameter of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ConfigureHttpClient\"), \" allows direct access to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HttpClientBuilder\"), \". Use this delegate to register extensions like Polly.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"services\\n    .AddConferenceClient()\\n    .ConfigureHttpClient(\\n        client => { /*...*/ },\\n        builder => builder.AddPolly());\\n\\n\")), mdx(\"h2\", null, \"HttpClientFactory\"), mdx(\"p\", null, \"In case you want to configure the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HttpClient\"), \" directly on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ServiceCollection\"), \", Strawberry Shake generates you a property \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ClientName\"), \", that you can use to set the correct name for the client.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"services.AddHttpClient(\\n    ConferenceClient.ClientName,\\n    client => client.BaseAddress =\\n        new Uri(\\\"https://hc-conference-app.azurewebsites.net/graphql/\\\"));\\n\\nservices.AddConferenceClient();\\n\")), mdx(\"h1\", null, \"Websockets\"), mdx(\"p\", null, \"There are three common ways to do authentication a request over a web socket. You can either specify the authentication headers, use cookies or send the access token with the first message over the socket.\\nSimilar to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HttpClient\"), \", you can configure the a web socket client over the client builder or the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ServiceCollection\"), \".\"), mdx(\"p\", null, \"Strawberry Shake uses a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IWebSocketClient\"), \" that provides a similar interface as the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HttpClient\"), \" has.\"), mdx(\"h2\", null, \"ConfigureWebsocketClient\"), mdx(\"p\", null, \"You can configure the web socket client directly on the client builder after you registered it on the service collection.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"services\\n    .AddConferenceClient()\\n    .ConfigureWebSocketClient(client =>\\n    {\\n        client.Uri = new Uri(\\\"ws://localhost:\\\" + port + \\\"/graphql\\\");\\n        client.Socket.Options.SetRequestHeader(\\\"Authorization\\\", \\\"Bearer ...\\\");\\n    });\\n\")), mdx(\"p\", null, \"You can also access the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IServiceProvider\"), \" with the following overload:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"services\\n    .AddConferenceClient()\\n    .ConfigureWebSocketClient((serviceProvider, client) =>\\n    {\\n        var token = serviceProvider.GetRequiredService<ISomeService>().Token;\\n    });\\n\")), mdx(\"p\", null, \"The second parameter of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ConfigureWebSocketClient\"), \" method, can be used to access the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IWebSocketClientBuilder\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"services\\n    .AddConferenceClient()\\n    .ConfigureWebSocketClient(\\n        (serviceProvider, client) =>\\n            {\\n                var token = serviceProvider.GetRequiredService<ISomeService>().Token;\\n            },\\n            builder =>\\n                builder.ConfigureConnectionInterceptor<CustomConnectionInterceptor>());\\n\")), mdx(\"h2\", null, \"WebSocketClientFactory\"), mdx(\"p\", null, \"If you prefer to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ServiceCollection\"), \" to configure your web socket, you can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AddWebSocketClient\"), \" method. Strawberry Shake generates a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ClientName\"), \" property, on each client. You can use this, to easily specify the correct name of the client.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"services\\n    .AddWebSocketClient(\\n        ConferenceClient.ClientName,\\n        client => client.Uri =\\n            new Uri(\\\"wss://hc-conference-app.azurewebsites.net/graphql/\\\"));\\n\\nservices.AddConferenceClient();\\n\")), mdx(\"h2\", null, \"IWebSocketClient\"), mdx(\"p\", null, \"On a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IWebSocketClient\"), \" you can configure the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Uri\"), \" of your endpoint. You can also directly set a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ISocketConnectionInterceptor\"), \" on the client, to intercept the connection and configure the initial payload. You do also have access to the underlying \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ClientWebSocket\"), \" to configure headers or cookies.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"IWebSocketClient client;\\nclient.Uri = new Uri(\\\"wss://hc-conference-app.azurewebsites.net/graphql/\\\");\\nclient.Socket.Options.SetRequestHeader(\\\"Authorization\\\", \\\"Bearer \\u2026\\\");\\nclient.ConnectionInterceptor = new CustomConnectionInterceptor();\\n\")), mdx(\"h2\", null, \"Initial payload\"), mdx(\"p\", null, \"In JavaScript it is not possible to add headers to a web socket. Therefor many GraphQL server do not use HTTP headers for the authentication of web sockets. Instead, they send the authentication token with the first payload to the server.\"), mdx(\"p\", null, \"You can specify create this payload with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ISocketConnectionInterceptor\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"public class CustomConnectionInterceptor\\n    : ISocketConnectionInterceptor\\n{\\n    // the object returned by this method, will be included in the connection initialization message\\n    public ValueTask<object?> CreateConnectionInitPayload(\\n        ISocketProtocol protocol,\\n        CancellationToken cancellationToken)\\n    {\\n        return new ValueTask<object?>(\\n            new Dictionary<string, string> { [\\\"authToken\\\"] = \\\"...\\\" });\\n    }\\n}\\n\")), mdx(\"p\", null, \"You can set the connection interceptor directly on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IWebSocketClient\"), \" or on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IWebSocketClientBuilder\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#http","title":"HTTP","items":[{"url":"#configurehttpclient","title":"ConfigureHttpClient"},{"url":"#httpclientfactory","title":"HttpClientFactory"}]},{"url":"#websockets","title":"Websockets","items":[{"url":"#configurewebsocketclient","title":"ConfigureWebsocketClient"},{"url":"#websocketclientfactory","title":"WebSocketClientFactory"},{"url":"#iwebsocketclient","title":"IWebSocketClient"},{"url":"#initial-payload","title":"Initial payload"}]}]}}},"site":{"siteMetadata":{"siteUrl":"https://chillicream.com","repositoryUrl":"https://github.com/ChilliCream/hotchocolate","tools":{"slack":"https://bit.ly/joinchilli"}}},"config":{"products":[{"path":"hotchocolate","title":"Hot Chocolate","description":"Build your own thin GraphQL API layer on top of any resource.","versions":[{"path":"","title":"v11.1 (latest)","items":[{"path":"index","title":"Introduction","items":null},{"path":"get-started","title":"Get Started","items":null},{"path":"defining-a-schema","title":"Defining a schema","items":[{"path":"index","title":"Schema basics"},{"path":"descriptions","title":"Schema Documentation"},{"path":"operations","title":"Operations"},{"path":"versioning","title":"Versioning"},{"path":"unions-and-interfaces","title":"Unions and Interfaces"},{"path":"extending-types","title":"Extending types"},{"path":"scalars","title":"Scalars"},{"path":"directives","title":"Directives"}]},{"path":"fetching-data","title":"Fetching data","items":[{"path":"index","title":"Resolver"},{"path":"fetching-from-databases","title":"Fetching from Databases"},{"path":"fetching-from-rest","title":"Fetching from REST"},{"path":"dataloader","title":"DataLoader"},{"path":"pagination","title":"Pagination"},{"path":"filtering","title":"Filtering"},{"path":"sorting","title":"Sorting"},{"path":"projections","title":"Projections"}]},{"path":"distributed-schema","title":"Distributed Schemas","items":[{"path":"index","title":"Overview"},{"path":"schema-stitching","title":"Schema Stitching"},{"path":"schema-federations","title":"Schema Federations"},{"path":"schema-configuration","title":"Schema Configuration"}]},{"path":"integrations","title":"Integrations","items":[{"path":"index","title":"Overview"},{"path":"entity-framework","title":"Entity Framework"},{"path":"spatial-data","title":"Spatial Data"},{"path":"mongodb","title":"MongoDB"}]},{"path":"performance","title":"Performance","items":[{"path":"index","title":"Overview"},{"path":"persisted-queries","title":"Persisted queries"},{"path":"automatic-persisted-queries","title":"Automatic persisted queries"}]},{"path":"api-reference","title":"API Reference","items":[{"path":"index","title":"Overview"},{"path":"object-type","title":"Object Type"},{"path":"custom-attributes","title":"Custom Attributes"},{"path":"language","title":"Language"},{"path":"extending-filtering","title":"Extending Filtering"},{"path":"visitors","title":"Visitors"},{"path":"aspnetcore","title":"ASP.NET Core"},{"path":"dependency-injection","title":"Dependency Injection"},{"path":"executable","title":"Executable"},{"path":"apollo-tracing","title":"Apollo Tracing"},{"path":"coding-approaches","title":"Coding Approaches"},{"path":"migrate-from-10-to-11","title":"Migrate from 10.5 to 11.0"}]}]},{"path":"v10","title":"v10 (previous)","items":[{"path":"index","title":"Introduction","items":null},{"path":"code-first","title":"Code-First","items":null},{"path":"schema-first","title":"Schema-First","items":null},{"path":"schema","title":"Schema","items":[{"path":"index","title":"Schema"},{"path":"object-type","title":"Object Type"},{"path":"interface-type","title":"Interface Type"},{"path":"union-type","title":"Union Type"},{"path":"input-object-type","title":"Input Object Type"},{"path":"enum-type","title":"Enum Type"},{"path":"descriptions","title":"Schema Descriptions"},{"path":"custom-scalar-types","title":"Scalar Type Support"},{"path":"descriptor-attributes","title":"Descriptor Attributes"},{"path":"extending-types","title":"Custom Base Classes"},{"path":"directives","title":"Directives"},{"path":"resolvers","title":"Resolvers"},{"path":"relay","title":"Relay"},{"path":"conventions","title":"Conventions"},{"path":"options","title":"Schema Options"}]},{"path":"data-fetching","title":"Data Fetching","items":[{"path":"index","title":"Data Loaders"},{"path":"pagination","title":"Pagination"},{"path":"filters","title":"Filters"}]},{"path":"security","title":"Security","items":[{"path":"index","title":"Authorization"},{"path":"security","title":"Security"}]},{"path":"execution-engine","title":"Execution Engine","items":[{"path":"index","title":"Middleware"},{"path":"validation-rules","title":"Validation Rules"},{"path":"instrumentation","title":"Instrumentation"},{"path":"apollo-tracing","title":"Apollo Tracing"},{"path":"batching","title":"Batching"},{"path":"persisted-queries","title":"Persisted Queries"},{"path":"custom-context-data","title":"Custom Context Data"},{"path":"subscriptions","title":"Subscriptions"},{"path":"type-conversion","title":"Type Conversion"},{"path":"error-filter","title":"Error Filter"},{"path":"execution-options","title":"Execution Options"}]},{"path":"server","title":"Server","items":[{"path":"index","title":"ASP.Net"},{"path":"dependency-injection","title":"Dependency Injection"}]},{"path":"stitching","title":"Schema Stitching","items":null},{"path":"tooling","title":"Tooling","items":null},{"path":"advanced","title":"Advanced","items":[{"path":"index","title":"Parser"},{"path":"dotnet-cli","title":".Net CLI"}]},{"path":"tutorials","title":"Tutorials","items":[{"path":"index","title":"Entity Framework"}]},{"path":"examples","title":"Examples","items":[{"path":"index","title":"Star Wars"},{"path":"slack-clone","title":"Slack Clone"},{"path":"other-examples","title":"Other Examples"}]}]}]},{"path":"bananacakepop","title":"Banana Cake Pop","description":"Use this GUI to get deep insights from any GraphQL API.","versions":[{"path":"","title":"v1 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"strawberryshake","title":"Strawberry Shake","description":"The only GraphQL client you will every need in the .NET ecosystem.","versions":[{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null},{"path":"get-started","title":"Get Started","items":[{"path":"index","title":"Blazor"},{"path":"xamarin","title":"Xamarin"},{"path":"console","title":"Console"}]},{"path":"subscriptions","title":"Subscriptions","items":null},{"path":"tooling","title":"Tooling / CLI","items":null},{"path":"caching","title":"Caching","items":[{"path":"index","title":"Overview"},{"path":"entities","title":"Entities"},{"path":"invalidation","title":"Invalidation"}]},{"path":"performance","title":"Performance","items":[{"path":"index","title":"Overview"},{"path":"persisted-queries","title":"Persisted Queries"},{"path":"persisted-state","title":"Persisted State"}]},{"path":"networking","title":"Networking","items":[{"path":"index","title":"Protocols"},{"path":"authentication","title":"Authentication"}]},{"path":"scalars","title":"Scalars","items":null}]}]},{"path":"greendonut","title":"Green Donut","description":"Configure data loaders and caching for GraphQL endpoints.","versions":[{"path":"","title":"v11 (latest)","items":[{"path":"index","title":"Introduction","items":null}]},{"path":"v10","title":"v10 (previous)","items":[{"path":"index","title":"Introduction","items":null},{"path":"installation","title":"Installation","items":null},{"path":"usage","title":"Usage","items":null},{"path":"api","title":"API","items":null},{"path":"advanced-concepts","title":"Advanced Concepts","items":[{"path":"index","title":"Custom DataLoader"},{"path":"diagnostics","title":"Diagnostic Events"}]}]}]}]}},"pageContext":{"originPath":"strawberryshake/networking/authentication.md"}},"staticQueryHashes":["1014893094","2890364758","4218812017"]}