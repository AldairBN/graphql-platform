{"componentChunkName":"component---src-templates-doc-page-template-tsx","path":"/docs/greendonut/v10/advanced-concepts","result":{"data":{"file":{"childMarkdownRemark":{"fields":{"slug":"/greendonut/v10/advanced-concepts/"},"frontmatter":{"title":"Custom DataLoader"},"html":"<p>A custom <em>DataLoader</em> is a class that derives from\n<code class=\"language-text\">DataLoaderBase&lt;TKey, TValue&gt;</code> and implements <code class=\"language-text\">FetchData</code>. This is very useful,\nnot just in <em>DI</em> (Dependency Injection) scenarios, because the data fetching\nlogic is defined inside the custom <em>DataLoader</em> itself; therefore, must not be\nprovided repeatedly when creating new instances.</p>\n<p>Creating a custom <em>DataLoader</em> is not that difficult. First of all we <em>should</em>\ncreate a dedicated marker interface for separation purposes.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"53143309626539500000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public interface IUserDataLoader\n    : IDataLoader<string, User>\n{ }`, `53143309626539500000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IUserDataLoader</span>\n    <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IDataLoader<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> User<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Although the extra interface <code class=\"language-text\">IUserDataLoader</code> isn't necessarily required, we\nstrongly recommend to create an extra interface in this particular case because\nof several reasons. One reason is you might have a handful of <em>DataLoader</em> which\nimplementing a completely different data fetching logic, but from the outside\nthey look identic due to their identic type parameter list. That's why we should\nalways create a separate interface for each <em>DataLoader</em>. We just mentioned one\nreason here because the explanation would go beyond the scope of custom\n<em>DataLoader</em>.</p>\n<p>Last but not least, we have to create a new class deriving from\n<code class=\"language-text\">DataLoaderBase&lt;TKey, TValue&gt;</code> and implementing our marker interface.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"95836170406482310000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class UserDataLoader\n    : DataLoaderBase<string, User>\n    , IUserDataLoader\n{\n    protected override Task<IReadOnlyList<Result<User>>> Fetch(\n        IReadOnlyList<string> keys)\n    {\n        // Here goes our data fetching logic\n    }\n}`, `95836170406482310000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDataLoader</span>\n    <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">DataLoaderBase<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> User<span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">,</span> <span class=\"token class-name\">IUserDataLoader</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>IReadOnlyList<span class=\"token punctuation\">&lt;</span>Result<span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">Fetch</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">IReadOnlyList<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> keys<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Here goes our data fetching logic</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","tableOfContents":""}},"site":{"siteMetadata":{"siteUrl":"https://chillicream.com","repositoryUrl":"https://github.com/ChilliCream/hotchocolate","tools":{"slack":"https://join.slack.com/t/hotchocolategraphql/shared_invite/enQtNTA4NjA0ODYwOTQ0LTViMzA2MTM4OWYwYjIxYzViYmM0YmZhYjdiNzBjOTg2ZmU1YmMwNDZiYjUyZWZlMzNiMTk1OWUxNWZhMzQwY2Q"}}},"config":{"products":[{"path":"hotchocolate","title":"Hot Chocolate","description":"Build your own thin GraphQL API layer on top of any resource.","versions":[{"path":"v10","title":"v10 (stable)","items":[{"path":"index","title":"Introduction","items":null},{"path":"code-first","title":"Code-First","items":null},{"path":"schema-first","title":"Schema-First","items":null},{"path":"schema","title":"Schema","items":[{"path":"index","title":"Schema"},{"path":"object-type","title":"Object Type"},{"path":"interface-type","title":"Interface Type"},{"path":"union-type","title":"Union Type"},{"path":"input-object-type","title":"Input Object Type"},{"path":"enum-type","title":"Enum Type"},{"path":"descriptions","title":"Schema Descriptions"},{"path":"custom-scalar-types","title":"Scalar Type Support"},{"path":"descriptor-attributes","title":"Descriptor Attributes"},{"path":"extending-types","title":"Custom Base Classes"},{"path":"directives","title":"Directives"},{"path":"resolvers","title":"Resolvers"},{"path":"relay","title":"Relay"},{"path":"conventions","title":"Conventions"},{"path":"options","title":"Schema Options"}]},{"path":"data-fetching","title":"Data Fetching","items":[{"path":"index","title":"Data Loaders"},{"path":"pagination","title":"Pagination"},{"path":"filters","title":"Filters"}]},{"path":"security","title":"Security","items":[{"path":"index","title":"Authorization"},{"path":"security","title":"Security"}]},{"path":"execution-engine","title":"Execution Engine","items":[{"path":"index","title":"Middleware"},{"path":"validation-rules","title":"Validation Rules"},{"path":"instrumentation","title":"Instrumentation"},{"path":"apollo-tracing","title":"Apollo Tracing"},{"path":"batching","title":"Batching"},{"path":"persisted-queries","title":"Persisted Queries"},{"path":"custom-context-data","title":"Custom Context Data"},{"path":"subscriptions","title":"Subscriptions"},{"path":"type-conversion","title":"Type Conversion"},{"path":"error-filter","title":"Error Filter"},{"path":"execution-options","title":"Execution Options"}]},{"path":"server","title":"Server","items":[{"path":"index","title":"ASP.Net"},{"path":"dependency-injection","title":"Dependency Injection"}]},{"path":"stitching","title":"Schema Stitching","items":null},{"path":"tooling","title":"Tooling","items":null},{"path":"advanced","title":"Advanced","items":[{"path":"index","title":"Parser"},{"path":"dotnet-cli","title":".Net CLI"}]},{"path":"tutorials","title":"Tutorials","items":[{"path":"index","title":"Entity Framework"}]},{"path":"examples","title":"Examples","items":[{"path":"index","title":"Star Wars"},{"path":"slack-clone","title":"Slack Clone"},{"path":"other-examples","title":"Other Examples"}]}]},{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null},{"path":"get-started","title":"Get Started","items":null},{"path":"defining-a-schema","title":"Defining a schema","items":[{"path":"index","title":"Schema basics"},{"path":"versioning","title":"Versioning"},{"path":"unions-and-interfaces","title":"Unions and Interfaces"},{"path":"scalars","title":"Scalars"},{"path":"directives","title":"Directives"}]},{"path":"fetching-data","title":"Fetching data","items":[{"path":"index","title":"Resolver"},{"path":"fetching-from-databases","title":"Fetching from Databases"},{"path":"fetching-from-rest","title":"Fetching from REST"},{"path":"dataloader","title":"DataLoader"},{"path":"pagination","title":"Pagination"},{"path":"filtering","title":"Filtering"},{"path":"sorting","title":"Sorting"}]},{"path":"api-reference","title":"API Reference","items":[{"path":"index","title":"Overview"},{"path":"language","title":"Lanugage"},{"path":"visitors","title":"Visitors"},{"path":"aspnetcore","title":"ASP.NET Core"},{"path":"migrate-from-10-to-11","title":"Migrate from 10.5 to 11.0"}]}]}]},{"path":"bananacakepop","title":"Banana Cake Pop","description":"Use this GUI to get deep insights from any GraphQL API.","versions":[{"path":"","title":"v1 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"strawberryshake","title":"Strawberry Shake","description":"Generate a unique GraphQL client for .Net to fetch data from any GraphQL API.","versions":[{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"marshmallowpie","title":"Marshmallow Pie","description":"Configure a GraphQL registry to keep track of any GraphQL server and client.","versions":[{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"greendonut","title":"Green Donut","description":"Configure data loaders and caching for GraphQL endpoints.","versions":[{"path":"v10","title":"v10 (stable)","items":[{"path":"index","title":"Introduction","items":null},{"path":"installation","title":"Installation","items":null},{"path":"usage","title":"Usage","items":null},{"path":"api","title":"API","items":null},{"path":"advanced-concepts","title":"Advanced Concepts","items":[{"path":"index","title":"Custom DataLoader"},{"path":"diagnostics","title":"Diagnostic Events"}]}]},{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]}]}},"pageContext":{"originPath":"greendonut/v10/advanced-concepts/index.md"}},"staticQueryHashes":["2890364758","4218812017","63159454"]}