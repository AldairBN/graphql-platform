{"componentChunkName":"component---src-templates-doc-page-template-tsx","path":"/docs/greendonut/v10/advanced-concepts/diagnostics","result":{"data":{"file":{"childMdx":{"fields":{"slug":"/greendonut/v10/advanced-concepts/diagnostics/","lastUpdated":"2020-09-17","lastAuthorName":"Rafael Staib"},"frontmatter":{"title":"Diagnostic Events"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Diagnostic Events\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This library has recently added \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"DiagnosticSources\"), \" to offer an\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Instrumentation API\"), \" to collect diagnostic events. To get started we need to\\nadd \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"two\"), \" packages and implement \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"two\"), \" classes. So lets get started.\"), mdx(\"h1\", {\n    \"id\": \"installation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h1\"\n  }, {\n    \"href\": \"#installation\",\n    \"aria-label\": \"installation permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 512 512\",\n    \"width\": \"16\",\n    \"height\": \"16\"\n  }), \"\\n                        \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  })), \"\\n                      \")), \"Installation\"), mdx(\"p\", null, \"We need to add the required packages.\"), mdx(\"p\", null, \"For \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \".Net Core\"), \" we use the dotnet CLI. Which is perhaps the most preferred way\\ndoing this.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-powershell\"\n  }), \"dotnet add package System.Diagnostics.DiagnosticSource\\ndotnet add package Microsoft.Extensions.DiagnosticAdapter\\n\")), mdx(\"p\", null, \"And for \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \".Net Framework\"), \" we still use the following line.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-powershell\"\n  }), \"Install-Package System.Diagnostics.DiagnosticSource\\nInstall-Package Microsoft.Extensions.DiagnosticAdapter\\n\")), mdx(\"h1\", {\n    \"id\": \"implement-diagnostic-listener\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h1\"\n  }, {\n    \"href\": \"#implement-diagnostic-listener\",\n    \"aria-label\": \"implement diagnostic listener permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 512 512\",\n    \"width\": \"16\",\n    \"height\": \"16\"\n  }), \"\\n                        \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  })), \"\\n                      \")), \"Implement Diagnostic Listener\"), mdx(\"p\", null, \"After we added those two packages we can start listening to Green Donut\\ndiagnostic events by implementing a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"DiagnosticListener\"), \".\"), mdx(\"p\", null, \"First we implement the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"DiagnosticListener\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"using System;\\nusing System.Collections.Concurrent;\\nusing System.Collections.Generic;\\nusing System.Diagnostics;\\nusing Microsoft.Extensions.DiagnosticAdapter;\\n\\nnamespace Demo\\n{\\n    public class CustomListener\\n    {\\n        // here you see the complete set of diagnostic events we can listen to.\\n        // here we usually add just those events we want to listen to.\\n        // for example if we are not interested to get informed about values\\n        // loaded from the cache then we just remove the complete method.\\n\\n        [DiagnosticName(\\\"GreenDonut.ExecuteBatchRequest\\\")]\\n        public void EnableExecuteBatchRequest()\\n        {\\n            // this event remains empty. it is required to enable the fetch\\n            // activity. if you remove this event, ExecuteBatchRequest.Start and\\n            // ExecuteBatchRequest.Stop stop working.\\n        }\\n\\n        [DiagnosticName(\\\"GreenDonut.ExecuteBatchRequest.Start\\\")]\\n        public void HandleExecuteBatchRequestStart(\\n            IReadOnlyList<object> keys)\\n        {\\n            // here goes our code to handle activity start.\\n        }\\n\\n        [DiagnosticName(\\\"GreenDonut.ExecuteBatchRequest.Stop\\\")]\\n        public void HandleExecuteBatchRequestStop(\\n            IReadOnlyList<object> keys,\\n            IReadOnlyList<object> values)\\n        {\\n            // here goes our code to handle activity stop.\\n        }\\n\\n        [DiagnosticName(\\\"GreenDonut.ExecuteSingleRequest\\\")]\\n        public void EnableExecuteSingleRequest()\\n        {\\n            // this event remains empty. it is required to enable the fetch\\n            // activity. if you remove this event, ExecuteSingleRequest.Start\\n            // and ExecuteSingleRequest.Stop stop working.\\n        }\\n\\n        [DiagnosticName(\\\"GreenDonut.ExecuteSingleRequest.Start\\\")]\\n        public void HandleExecuteSingleRequestStart(\\n            object key)\\n        {\\n            // here goes our code to handle activity start.\\n        }\\n\\n        [DiagnosticName(\\\"GreenDonut.ExecuteSingleRequest.Stop\\\")]\\n        public void HandleExecuteSingleRequestStop(\\n            object key,\\n            IReadOnlyList<object> values)\\n        {\\n            // here goes our code to handle activity stop.\\n        }\\n\\n        [DiagnosticName(\\\"GreenDonut.BatchError\\\")]\\n        public void HandleBatchError(\\n            IReadOnlyList<object> keys,\\n            Exception exception)\\n        {\\n            // here goes our code to handle batch errors which occur during\\n            // fetch.\\n        }\\n\\n        [DiagnosticName(\\\"GreenDonut.CachedValue\\\")]\\n        public void HandleCachedValue(object key, object cacheKey, object value)\\n        {\\n            // here goes our code to handle values coming from the cache.\\n        }\\n\\n        [DiagnosticName(\\\"GreenDonut.Error\\\")]\\n        public void HandleError(object key, Exception exception)\\n        {\\n            // here goes our code to handle result errors which occur during\\n            // fetch.\\n        }\\n    }\\n}\\n\")), mdx(\"p\", null, \"Then we need to implement an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Observer\"), \" to subscribe to the Green Donut\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"DiagnosticSource\"), \" which produces the diagnostic events.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"using System;\\nusing System.Diagnostics;\\n\\nnamespace Demo\\n{\\n    public class CustomObserver\\n        : IObserver<DiagnosticListener>\\n    {\\n        private readonly CustomListener _listener;\\n\\n        public CustomObserver(CustomListener listener)\\n        {\\n            _listener = listener ??\\n                throw new ArgumentNullException(nameof(listener));\\n        }\\n\\n        public void OnCompleted() { }\\n\\n        public void OnError(Exception error) { }\\n\\n        public void OnNext(DiagnosticListener value)\\n        {\\n            if (value.Name == \\\"GreenDonut\\\")\\n            {\\n                value.SubscribeWithAdapter(_listener);\\n            }\\n        }\\n    }\\n}\\n\")), mdx(\"h1\", {\n    \"id\": \"subscribe-to-events\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h1\"\n  }, {\n    \"href\": \"#subscribe-to-events\",\n    \"aria-label\": \"subscribe to events permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 512 512\",\n    \"width\": \"16\",\n    \"height\": \"16\"\n  }), \"\\n                        \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  })), \"\\n                      \")), \"Subscribe to Events\"), mdx(\"p\", null, \"Last but not least we must subscribe to the Green Donut \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"DiagnosticSource\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"// subscribe\\nvar listener = new CustomListener();\\nvar observer = new CustomObserver(listener);\\nvar subscription = DiagnosticListener.AllListeners.Subscribe(observer);\\n\\n// unsubscribe\\nsubscription.Dispose();\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note\")), mdx(\"ul\", {\n    parentName: \"blockquote\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Remember to dispose your subscription if you would like to stop listening to\\ndiagnostic events.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Keep in mind that this code is not production ready. It is meant to give you\\nan idea how it works.\"))));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":1,"value":"Installation"},{"depth":1,"value":"Implement Diagnostic Listener"},{"depth":1,"value":"Subscribe to Events"}]}},"site":{"siteMetadata":{"siteUrl":"https://chillicream.com","repositoryUrl":"https://github.com/ChilliCream/hotchocolate","tools":{"slack":"https://bit.ly/joinchilli"}}},"config":{"products":[{"path":"hotchocolate","title":"Hot Chocolate","description":"Build your own thin GraphQL API layer on top of any resource.","versions":[{"path":"","title":"v11 (latest)","items":[{"path":"index","title":"Introduction","items":null},{"path":"get-started","title":"Get Started","items":null},{"path":"defining-a-schema","title":"Defining a schema","items":[{"path":"index","title":"Overview"},{"path":"queries","title":"Queries"},{"path":"mutations","title":"Mutations"},{"path":"subscriptions","title":"Subscriptions"},{"path":"object-types","title":"Object Types"},{"path":"scalars","title":"Scalars"},{"path":"arguments","title":"Arguments"},{"path":"input-object-types","title":"Input Object Types"},{"path":"lists","title":"Lists"},{"path":"non-null","title":"Non-Null"},{"path":"enums","title":"Enums"},{"path":"interfaces","title":"Interfaces"},{"path":"unions","title":"Unions"},{"path":"extending-types","title":"Extending Types"},{"path":"directives","title":"Directives"},{"path":"documentation","title":"Documentation"},{"path":"versioning","title":"Versioning"}]},{"path":"fetching-data","title":"Fetching data","items":[{"path":"index","title":"Resolver"},{"path":"fetching-from-databases","title":"Fetching from Databases"},{"path":"fetching-from-rest","title":"Fetching from REST"},{"path":"dataloader","title":"DataLoader"},{"path":"pagination","title":"Pagination"},{"path":"filtering","title":"Filtering"},{"path":"sorting","title":"Sorting"},{"path":"projections","title":"Projections"}]},{"path":"distributed-schema","title":"Distributed Schemas","items":[{"path":"index","title":"Overview"},{"path":"schema-stitching","title":"Schema Stitching"},{"path":"schema-federations","title":"Schema Federations"},{"path":"schema-configuration","title":"Schema Configuration"}]},{"path":"integrations","title":"Integrations","items":[{"path":"index","title":"Overview"},{"path":"entity-framework","title":"Entity Framework"},{"path":"spatial-data","title":"Spatial Data"},{"path":"mongodb","title":"MongoDB"}]},{"path":"performance","title":"Performance","items":[{"path":"index","title":"Overview"},{"path":"persisted-queries","title":"Persisted queries"},{"path":"automatic-persisted-queries","title":"Automatic persisted queries"}]},{"path":"api-reference","title":"API Reference","items":[{"path":"index","title":"Overview"},{"path":"custom-attributes","title":"Custom Attributes"},{"path":"language","title":"Language"},{"path":"extending-filtering","title":"Extending Filtering"},{"path":"visitors","title":"Visitors"},{"path":"aspnetcore","title":"ASP.NET Core"},{"path":"dependency-injection","title":"Dependency Injection"},{"path":"executable","title":"Executable"},{"path":"apollo-tracing","title":"Apollo Tracing"},{"path":"migrate-from-10-to-11","title":"Migrate from 10.5 to 11.0"}]}]},{"path":"v10","title":"v10 (previous)","items":[{"path":"index","title":"Introduction","items":null},{"path":"code-first","title":"Code-First","items":null},{"path":"schema-first","title":"Schema-First","items":null},{"path":"schema","title":"Schema","items":[{"path":"index","title":"Schema"},{"path":"object-type","title":"Object Type"},{"path":"interface-type","title":"Interface Type"},{"path":"union-type","title":"Union Type"},{"path":"input-object-type","title":"Input Object Type"},{"path":"enum-type","title":"Enum Type"},{"path":"descriptions","title":"Schema Descriptions"},{"path":"custom-scalar-types","title":"Scalar Type Support"},{"path":"descriptor-attributes","title":"Descriptor Attributes"},{"path":"extending-types","title":"Custom Base Classes"},{"path":"directives","title":"Directives"},{"path":"resolvers","title":"Resolvers"},{"path":"relay","title":"Relay"},{"path":"conventions","title":"Conventions"},{"path":"options","title":"Schema Options"}]},{"path":"data-fetching","title":"Data Fetching","items":[{"path":"index","title":"Data Loaders"},{"path":"pagination","title":"Pagination"},{"path":"filters","title":"Filters"}]},{"path":"security","title":"Security","items":[{"path":"index","title":"Authorization"},{"path":"security","title":"Security"}]},{"path":"execution-engine","title":"Execution Engine","items":[{"path":"index","title":"Middleware"},{"path":"validation-rules","title":"Validation Rules"},{"path":"instrumentation","title":"Instrumentation"},{"path":"apollo-tracing","title":"Apollo Tracing"},{"path":"batching","title":"Batching"},{"path":"persisted-queries","title":"Persisted Queries"},{"path":"custom-context-data","title":"Custom Context Data"},{"path":"subscriptions","title":"Subscriptions"},{"path":"type-conversion","title":"Type Conversion"},{"path":"error-filter","title":"Error Filter"},{"path":"execution-options","title":"Execution Options"}]},{"path":"server","title":"Server","items":[{"path":"index","title":"ASP.NET"},{"path":"dependency-injection","title":"Dependency Injection"}]},{"path":"stitching","title":"Schema Stitching","items":null},{"path":"tooling","title":"Tooling","items":null},{"path":"advanced","title":"Advanced","items":[{"path":"index","title":"Parser"},{"path":"dotnet-cli","title":".NET CLI"}]},{"path":"tutorials","title":"Tutorials","items":[{"path":"index","title":"Entity Framework"}]},{"path":"examples","title":"Examples","items":[{"path":"index","title":"Star Wars"},{"path":"slack-clone","title":"Slack Clone"},{"path":"other-examples","title":"Other Examples"}]}]}]},{"path":"bananacakepop","title":"Banana Cake Pop","description":"Use this GUI to get deep insights from any GraphQL API.","versions":[{"path":"","title":"v1 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"strawberryshake","title":"Strawberry Shake","description":"The only GraphQL client you will every need in the .NET ecosystem.","versions":[{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null},{"path":"get-started","title":"Get Started","items":[{"path":"index","title":"Blazor"},{"path":"xamarin","title":"Xamarin"},{"path":"console","title":"Console"}]},{"path":"subscriptions","title":"Subscriptions","items":null},{"path":"tooling","title":"Tooling / CLI","items":null},{"path":"caching","title":"Caching","items":[{"path":"index","title":"Overview"},{"path":"entities","title":"Entities"},{"path":"invalidation","title":"Invalidation"}]},{"path":"performance","title":"Performance","items":[{"path":"index","title":"Overview"},{"path":"persisted-queries","title":"Persisted Queries"},{"path":"persisted-state","title":"Persisted State"}]},{"path":"networking","title":"Networking","items":[{"path":"index","title":"Protocols"},{"path":"authentication","title":"Authentication"}]},{"path":"scalars","title":"Scalars","items":null}]}]},{"path":"greendonut","title":"Green Donut","description":"Configure data loaders and caching for GraphQL endpoints.","versions":[{"path":"","title":"v11 (latest)","items":[{"path":"index","title":"Introduction","items":null}]},{"path":"v10","title":"v10 (previous)","items":[{"path":"index","title":"Introduction","items":null},{"path":"installation","title":"Installation","items":null},{"path":"usage","title":"Usage","items":null},{"path":"api","title":"API","items":null},{"path":"advanced-concepts","title":"Advanced Concepts","items":[{"path":"index","title":"Custom DataLoader"},{"path":"diagnostics","title":"Diagnostic Events"}]}]}]}]}},"pageContext":{"originPath":"greendonut/v10/advanced-concepts/diagnostics.md"}},"staticQueryHashes":["1014893094","2890364758","4218812017"]}