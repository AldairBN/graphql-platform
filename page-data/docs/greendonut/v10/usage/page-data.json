{"componentChunkName":"component---src-templates-doc-page-template-tsx","path":"/docs/greendonut/v10/usage","result":{"data":{"file":{"childMdx":{"fields":{"slug":"/greendonut/v10/usage/"},"frontmatter":{"title":"Usage"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Usage\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The simplest way to get started is to create an instance of the default\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"DataLoader\"), \" implementation, which might be the right choice if you need just\\none type of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"DataLoader\"), \". However, if you need a bunch of individual\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"DataLoader\"), \" and/or using \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"DI\"), \", which is an abbreviation for\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Dependency Injection\"), \", you might want to also take a look at the\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/greendonut/v10/advanced-concepts\"\n  }), \"Custom DataLoader\"), \" section.\"), mdx(\"h1\", null, \"Create a new instance\"), mdx(\"p\", null, \"Creating a new instance is easy as you will see in the following example. The\\ntricky part here is to implement our data fetching logic - here shown as\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FetchUsers\"), \" - which depends on our backend resource. Once we have done that, we\\njust pass our fetch function into the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"DataLoader\"), \" constructor. That's actually\\neverything so far.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"var userLoader = new DataLoader<string, User>(FetchUsers);\\n\")), mdx(\"p\", null, \"In order to change the default behavior of a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DataLoader\"), \", we have to create a\\nnew instance of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DataLoaderOptions\"), \" and pass it right into the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DataLoader\"), \"\\nconstructor. Lets see how that looks like.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"var options = new DataLoaderOptions<string>\\n{\\n    SlidingExpiration = TimeSpan.FromHours(1)\\n};\\nvar userLoader = new DataLoader<string, User>(keys => FetchUsers(keys), options);\\n\")), mdx(\"p\", null, \"So, what we see here is that we have changed the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SlidingExpiration\"), \" from its\\ndefault value, which is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"1 hour\"), \". \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0\"), \" means the cache entries will live\\nforever in the cache as long as the maximum cache size does not exceed. Whereas\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"1 hour\"), \" means a single cache entry will stay in the cache as long as the entry\\ngets touched within one hour. This is an additional feature that does not exist\\nin the original \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"facebook\"), \" implementation.\"), mdx(\"h1\", null, \"Fetching data\"), mdx(\"p\", null, \"Fetching data consists of two parts. The first part is declaring your need in one or\\nmore data items by providing one or more keys.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"await userLoader.LoadAsync(\\\"Foo\\\", \\\"Bar\\\", \\\"Baz\\\");\\n\")), mdx(\"p\", null, \"The second part is dispatching our requested data items. There are two options.\\nThe first option is \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"manual dispatching\"), \" the default behavior as of version \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"2.0.0\"), \".\\nAs the name says, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"manual dispatching\"), \" means we have to trigger the dispatching\\nprocess manually; otherwise no data is being fetched. This is actually an\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"important difference\"), \" to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"facebook's\"), \" original implementation, which is\\nwritten in \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"JavaScript\"), \". \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Facebook's\"), \" implementation is using a trick in\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"NodeJs\"), \" to dispatch automatically. If you're interested how that works, click\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://stackoverflow.com/questions/19822668/what-exactly-is-a-node-js-event-loop-tick/19823583#19823583\"\n  }), \"here\"), \"\\nto learn more about that. But now lets see how we trigger the dispatching\\nprocess manually.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"await userLoader.DispatchAsync();\\n\")), mdx(\"p\", null, \"The second option is, we enable \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"auto dispatching\"), \" which dispatches permanently\\nin the background. This process starts immediately after creating a new instance\\nof the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"DataLoader\"), \". Lets see how that looks like.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"var options = new DataLoaderOptions<string>\\n{\\n    AutoDispatching = true\\n};\\nvar userLoader = new DataLoader<string, User>(FetchUsers, options);\\n\")), mdx(\"p\", null, \"In this case we wouldn't need to call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DispatchAsync\"), \" at all.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note\")), mdx(\"ul\", {\n    parentName: \"blockquote\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Be careful when and how reusing \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"DataLoader\"), \" instances, because sometimes\\nusers have different privileges. That implies perhaps a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"DataLoader\"), \" on a\\nper request base. However, it really depends on your application logic and\\nthe specific case you try to find a perfect solution for.\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#create-a-new-instance","title":"Create a new instance"},{"url":"#fetching-data","title":"Fetching data"}]}}},"site":{"siteMetadata":{"siteUrl":"https://chillicream.com","repositoryUrl":"https://github.com/ChilliCream/hotchocolate","tools":{"slack":"https://bit.ly/joinchilli"}}},"config":{"products":[{"path":"hotchocolate","title":"Hot Chocolate","description":"Build your own thin GraphQL API layer on top of any resource.","versions":[{"path":"","title":"v11.1 (latest)","items":[{"path":"index","title":"Introduction","items":null},{"path":"get-started","title":"Get Started","items":null},{"path":"defining-a-schema","title":"Defining a schema","items":[{"path":"index","title":"Schema basics"},{"path":"descriptions","title":"Schema Documentation"},{"path":"operations","title":"Operations"},{"path":"versioning","title":"Versioning"},{"path":"unions-and-interfaces","title":"Unions and Interfaces"},{"path":"extending-types","title":"Extending types"},{"path":"scalars","title":"Scalars"},{"path":"directives","title":"Directives"}]},{"path":"fetching-data","title":"Fetching data","items":[{"path":"index","title":"Resolver"},{"path":"fetching-from-databases","title":"Fetching from Databases"},{"path":"fetching-from-rest","title":"Fetching from REST"},{"path":"dataloader","title":"DataLoader"},{"path":"pagination","title":"Pagination"},{"path":"filtering","title":"Filtering"},{"path":"sorting","title":"Sorting"},{"path":"projections","title":"Projections"}]},{"path":"distributed-schema","title":"Distributed Schemas","items":[{"path":"index","title":"Overview"},{"path":"schema-stitching","title":"Schema Stitching"},{"path":"schema-federations","title":"Schema Federations"},{"path":"schema-configuration","title":"Schema Configuration"}]},{"path":"integrations","title":"Integrations","items":[{"path":"index","title":"Overview"},{"path":"entity-framework","title":"Entity Framework"},{"path":"spatial-data","title":"Spatial Data"},{"path":"mongodb","title":"MongoDB"}]},{"path":"performance","title":"Performance","items":[{"path":"index","title":"Overview"},{"path":"persisted-queries","title":"Persisted queries"},{"path":"automatic-persisted-queries","title":"Automatic persisted queries"}]},{"path":"api-reference","title":"API Reference","items":[{"path":"index","title":"Overview"},{"path":"object-type","title":"Object Type"},{"path":"custom-attributes","title":"Custom Attributes"},{"path":"language","title":"Language"},{"path":"extending-filtering","title":"Extending Filtering"},{"path":"visitors","title":"Visitors"},{"path":"aspnetcore","title":"ASP.NET Core"},{"path":"dependency-injection","title":"Dependency Injection"},{"path":"executable","title":"Executable"},{"path":"apollo-tracing","title":"Apollo Tracing"},{"path":"migrate-from-10-to-11","title":"Migrate from 10.5 to 11.0"}]}]},{"path":"v10","title":"v10 (previous)","items":[{"path":"index","title":"Introduction","items":null},{"path":"code-first","title":"Code-First","items":null},{"path":"schema-first","title":"Schema-First","items":null},{"path":"schema","title":"Schema","items":[{"path":"index","title":"Schema"},{"path":"object-type","title":"Object Type"},{"path":"interface-type","title":"Interface Type"},{"path":"union-type","title":"Union Type"},{"path":"input-object-type","title":"Input Object Type"},{"path":"enum-type","title":"Enum Type"},{"path":"descriptions","title":"Schema Descriptions"},{"path":"custom-scalar-types","title":"Scalar Type Support"},{"path":"descriptor-attributes","title":"Descriptor Attributes"},{"path":"extending-types","title":"Custom Base Classes"},{"path":"directives","title":"Directives"},{"path":"resolvers","title":"Resolvers"},{"path":"relay","title":"Relay"},{"path":"conventions","title":"Conventions"},{"path":"options","title":"Schema Options"}]},{"path":"data-fetching","title":"Data Fetching","items":[{"path":"index","title":"Data Loaders"},{"path":"pagination","title":"Pagination"},{"path":"filters","title":"Filters"}]},{"path":"security","title":"Security","items":[{"path":"index","title":"Authorization"},{"path":"security","title":"Security"}]},{"path":"execution-engine","title":"Execution Engine","items":[{"path":"index","title":"Middleware"},{"path":"validation-rules","title":"Validation Rules"},{"path":"instrumentation","title":"Instrumentation"},{"path":"apollo-tracing","title":"Apollo Tracing"},{"path":"batching","title":"Batching"},{"path":"persisted-queries","title":"Persisted Queries"},{"path":"custom-context-data","title":"Custom Context Data"},{"path":"subscriptions","title":"Subscriptions"},{"path":"type-conversion","title":"Type Conversion"},{"path":"error-filter","title":"Error Filter"},{"path":"execution-options","title":"Execution Options"}]},{"path":"server","title":"Server","items":[{"path":"index","title":"ASP.Net"},{"path":"dependency-injection","title":"Dependency Injection"}]},{"path":"stitching","title":"Schema Stitching","items":null},{"path":"tooling","title":"Tooling","items":null},{"path":"advanced","title":"Advanced","items":[{"path":"index","title":"Parser"},{"path":"dotnet-cli","title":".Net CLI"}]},{"path":"tutorials","title":"Tutorials","items":[{"path":"index","title":"Entity Framework"}]},{"path":"examples","title":"Examples","items":[{"path":"index","title":"Star Wars"},{"path":"slack-clone","title":"Slack Clone"},{"path":"other-examples","title":"Other Examples"}]}]}]},{"path":"bananacakepop","title":"Banana Cake Pop","description":"Use this GUI to get deep insights from any GraphQL API.","versions":[{"path":"","title":"v1 (preview)","items":[{"path":"index","title":"Introduction","items":null}]}]},{"path":"strawberryshake","title":"Strawberry Shake","description":"The only GraphQL client you will every need in the .NET ecosystem.","versions":[{"path":"","title":"v11 (preview)","items":[{"path":"index","title":"Introduction","items":null},{"path":"get-started","title":"Get Started","items":[{"path":"index","title":"Blazor"},{"path":"xamarin","title":"Xamarin"},{"path":"console","title":"Console"}]},{"path":"subscriptions","title":"Subscriptions","items":null},{"path":"tooling","title":"Tooling / CLI","items":null},{"path":"caching","title":"Caching","items":[{"path":"index","title":"Overview"},{"path":"entities","title":"Entities"},{"path":"invalidation","title":"Invalidation"}]},{"path":"performance","title":"Performance","items":[{"path":"index","title":"Overview"},{"path":"persisted-queries","title":"Persisted Queries"},{"path":"persisted-state","title":"Persisted State"}]},{"path":"networking","title":"Networking","items":[{"path":"index","title":"Protocols"},{"path":"authentication","title":"Authentication"}]},{"path":"scalars","title":"Scalars","items":null}]}]},{"path":"greendonut","title":"Green Donut","description":"Configure data loaders and caching for GraphQL endpoints.","versions":[{"path":"","title":"v11 (latest)","items":[{"path":"index","title":"Introduction","items":null}]},{"path":"v10","title":"v10 (previous)","items":[{"path":"index","title":"Introduction","items":null},{"path":"installation","title":"Installation","items":null},{"path":"usage","title":"Usage","items":null},{"path":"api","title":"API","items":null},{"path":"advanced-concepts","title":"Advanced Concepts","items":[{"path":"index","title":"Custom DataLoader"},{"path":"diagnostics","title":"Diagnostic Events"}]}]}]}]}},"pageContext":{"originPath":"greendonut/v10/usage.md"}},"staticQueryHashes":["1014893094","2890364758","4218812017"]}