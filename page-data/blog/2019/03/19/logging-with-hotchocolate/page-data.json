{"componentChunkName":"component---src-templates-blog-article-template-tsx","path":"/blog/2019/03/19/logging-with-hotchocolate","result":{"data":{"markdownRemark":{"frontmatter":{"featuredImage":null,"path":"/blog/2019/03/19/logging-with-hotchocolate","title":"GraphQL - Tracing with Hot Chocolate","tags":["hotchocolate","graphql","dotnet","aspnetcore","tracing"],"author":"Michael Staib","authorImageUrl":"https://avatars1.githubusercontent.com/u/9714350?s=100&v=4","authorUrl":"https://github.com/michaelstaib","date":"March 19, 2019"},"html":"<p>One common question that comes up on our slack channel is if <em>Hot Chocolate</em> supports some kind of logging infrastructure. My personal opinion here is that logging/tracing is often very project specific and an API should not force one specific logging solution onto its users.</p>\n<p>Instead we have opted to provide diagnostic events through Microsoft`s diagnostic source which does not force us to serialize any payloads. This in turn gives you the ability to pick and choose the information that best fits your need for your tracing/logging solution.</p>\n<p>This post will walk you through on how to add a logger of your choice to <em>Hot Chocolate</em> and get exactly the right amount of information for your project.</p>\n<p>In this blog we will use the ASP.Net core logging API to show how a logger can be attached to our diagnostic events.</p>\n<h2 id=\"setup\" style=\"position:relative;\"><a href=\"#setup\" aria-label=\"setup permalink\" class=\"anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"16\" height=\"16\"><path d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"/></svg></a>Setup</h2>\n<p>But before we can get started let us first setup a web project with <em>Hot Chocolate</em>:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"53249774315070560000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`mkdir logging\ncd logging\ndotnet new web\ndotnet add package HotChocolate.AspNetCore:9.0.0-preview.5\ndotnet add package HotChocolate.AspNetCore.Playground:9.0.0-preview.5`, `53249774315070560000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> logging\n<span class=\"token builtin class-name\">cd</span> logging\ndotnet new web\ndotnet <span class=\"token function\">add</span> package HotChocolate.AspNetCore:9.0.0-preview.5\ndotnet <span class=\"token function\">add</span> package HotChocolate.AspNetCore.Playground:9.0.0-preview.5</code></pre></div>\n<h2 id=\"configure-the-logger\" style=\"position:relative;\"><a href=\"#configure-the-logger\" aria-label=\"configure the logger permalink\" class=\"anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"16\" height=\"16\"><path d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"/></svg></a>Configure the Logger</h2>\n<p>After our project is setup let us start with setting up the ASP.net core logging infrastructure. This is fairly easy with ASP.net core. Head over to the <code class=\"language-text\">Program.cs</code> and replace the builder configuration with the following one.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"18717180380091070000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public static IWebHostBuilder CreateWebHostBuilder(string[] args) =>\n    WebHost.CreateDefaultBuilder(args)\n        .ConfigureLogging((hostingContext, logging) =>\n        {\n            logging.ClearProviders();\n            logging.AddConsole();\n        })\n        .UseStartup<Startup>();`, `18717180380091070000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IWebHostBuilder</span> <span class=\"token function\">CreateWebHostBuilder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    WebHost<span class=\"token punctuation\">.</span><span class=\"token function\">CreateDefaultBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureLogging</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>hostingContext<span class=\"token punctuation\">,</span> logging<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token punctuation\">{</span>\n            logging<span class=\"token punctuation\">.</span><span class=\"token function\">ClearProviders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            logging<span class=\"token punctuation\">.</span><span class=\"token function\">AddConsole</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">UseStartup</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Startup<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">ConfigureLogging</code> configures the various logging providers that are then available throughout our <code class=\"language-text\">WebHost</code>. In our simple example we clear all the providers and then add only the console logger.</p>\n<p>Next head over to the <code class=\"language-text\">Startup.cs</code> and register the logger with the dependency injection by adding the following line to <code class=\"language-text\">ConfigureServices</code>.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"14189404431227138000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`services.AddLogging();`, `14189404431227138000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddLogging</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Perfect, now we have setup all the basics and can get started.</p>\n<h2 id=\"diagnostic-observer\" style=\"position:relative;\"><a href=\"#diagnostic-observer\" aria-label=\"diagnostic observer permalink\" class=\"anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"16\" height=\"16\"><path d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"/></svg></a>Diagnostic Observer</h2>\n<p>The <em>Hot Chocolate</em> server provides diagnostic events through a diagnostic source. We can subscribe to these events by providing a diagnostic observer. A diagnostic observer is basically any class that implements our marker interface <code class=\"language-text\">IDiagnosticObserver</code>.</p>\n<p>Into this class we can add public methods that are subscribed to the actual diagnostic listener. The methods that shall subscribe to an event have to be annotated to with the <code class=\"language-text\">DiagnosticNameAttribute</code>.</p>\n<p>We have listed the various available events and their payloads in our documentation that can be found <a href=\"https://hotchocolate.io/docs/next/instrumentation\">here</a>.</p>\n<p>Let us say that in our case we want to write a message to the console whenever a request begins. Moreover, if the request is a query or mutation then we also want to write the result to the console.</p>\n<p>Before we add the actual event methods, let us create a class called <code class=\"language-text\">DiagnosticObserver</code>. In order to write events to the logger we need to inject a concrete logger to our class. So, our class could look like the following:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"8008982205063209000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class DiagnosticObserver\n    : IDiagnosticObserver\n{\n    private readonly ILogger _logger;\n\n    public DiagnosticObserver(ILogger<DiagnosticObserver> logger)\n    {\n        _logger = logger ?? throw new ArgumentNullException(nameof(logger));\n    }\n}`, `8008982205063209000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DiagnosticObserver</span>\n    <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IDiagnosticObserver</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ILogger</span> _logger<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">DiagnosticObserver</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ILogger<span class=\"token punctuation\">&lt;</span>DiagnosticObserver<span class=\"token punctuation\">></span></span> logger<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _logger <span class=\"token operator\">=</span> logger <span class=\"token operator\">??</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentNullException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Next, let us add our two event methods.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"73555261484371410000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class DiagnosticObserver\n        : IDiagnosticObserver\n{\n    private readonly ILogger _logger;\n\n    public DiagnosticObserver(ILogger<DiagnosticObserver> logger)\n    {\n        _logger = logger ?? throw new ArgumentNullException(nameof(logger));\n    }\n\n    [DiagnosticName(&quot;HotChocolate.Execution.Query&quot;)]\n    public void OnQuery(IQueryContext context)\n    {\n        // This method is used as marker to enable begin and end events\n        // in the case that you want to explicitly track the start and the\n        // end of this event.\n    }\n\n    [DiagnosticName(&quot;HotChocolate.Execution.Query.Start&quot;)]\n    public void BeginQueryExecute(IQueryContext context)\n    {\n        _logger.LogInformation(context.Request.Query);\n    }\n\n    [DiagnosticName(&quot;HotChocolate.Execution.Query.Stop&quot;)]\n    public void EndQueryExecute(IQueryContext context)\n    {\n        if(context.Result is IReadOnlyQueryResult result)\n        {\n            using (var stream = new MemoryStream())\n            {\n                var resultSerializer = new JsonQueryResultSerializer();\n                resultSerializer.SerializeAsync(\n                    result, stream).Wait();\n                _logger.LogInformation(\n                    Encoding.UTF8.GetString(stream.ToArray()));\n            }\n        }\n    }\n}`, `73555261484371410000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DiagnosticObserver</span>\n        <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IDiagnosticObserver</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ILogger</span> _logger<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">DiagnosticObserver</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ILogger<span class=\"token punctuation\">&lt;</span>DiagnosticObserver<span class=\"token punctuation\">></span></span> logger<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _logger <span class=\"token operator\">=</span> logger <span class=\"token operator\">??</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentNullException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DiagnosticName</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"HotChocolate.Execution.Query\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnQuery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IQueryContext</span> context<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// This method is used as marker to enable begin and end events</span>\n        <span class=\"token comment\">// in the case that you want to explicitly track the start and the</span>\n        <span class=\"token comment\">// end of this event.</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DiagnosticName</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"HotChocolate.Execution.Query.Start\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">BeginQueryExecute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IQueryContext</span> context<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogInformation</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>Query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DiagnosticName</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"HotChocolate.Execution.Query.Stop\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">EndQueryExecute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IQueryContext</span> context<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>Result <span class=\"token keyword\">is</span> <span class=\"token class-name\">IReadOnlyQueryResult</span> result<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MemoryStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> resultSerializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">JsonQueryResultSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                resultSerializer<span class=\"token punctuation\">.</span><span class=\"token function\">SerializeAsync</span><span class=\"token punctuation\">(</span>\n                    result<span class=\"token punctuation\">,</span> stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogInformation</span><span class=\"token punctuation\">(</span>\n                    Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">.</span><span class=\"token function\">GetString</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In order to enable start/stop events we have to add a third method that represents the subscription to the event.</p>\n<p>This is only needed when subscribing to activities that consist of a start event and a stop event. These start and stop events allow for measuring performance.</p>\n<p>Apart from our standard payloads that are described in our documentation we can also inject the <code class=\"language-text\">Activity</code> instance to your start/stop event and use the high precision time measurement that the diagnostics APIs provide.</p>\n<p>The events always provide you with the full context objects that are available in the query and field middleware pipeline. You basically have full access to all the data that you would have access to in a middleware and by this you are able to pick the information you need for your tracing/logging solution and create the logging messages in a structure that fits your needs.</p>\n<p>Moreover, you also can use the <code class=\"language-text\">ContextData</code> dictionary on the context objects to share information between your subscription events like a request identifier.</p>\n<p>After we have implemented our observer, we have to register it as a service.</p>\n<p>Add the following line to the <code class=\"language-text\">ConfigureServices</code> method in our <code class=\"language-text\">Startup.cs</code>.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"47838840461336590000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`services.AddDiagnosticObserver<DiagnosticObserver>();`, `47838840461336590000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddDiagnosticObserver</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>DiagnosticObserver<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>With that our logger is ready to receive events. We now just need a GraphQL API that produces events.</p>\n<p>For this we add a simple query type:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"17891398818293113000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class Query\n{\n    public string Hello() => &quot;world&quot;;\n}`, `17891398818293113000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Query</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">Hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Next we register the query type with our schema by adding the following line to the <code class=\"language-text\">ConfigureServices</code> method in our <code class=\"language-text\">Startup.cs</code>.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"59216544038448690000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`services.AddGraphQL(c =>\n{\n    c.RegisterQueryType<Query>();\n});`, `59216544038448690000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddGraphQL</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">RegisterQueryType</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Query<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Last but not least we have to add our <code class=\"language-text\">GraphQL</code> middleware and in order to write some queries our <code class=\"language-text\">Playground</code> middleware.</p>\n<p>Replace the <code class=\"language-text\">Configure</code> method in our <code class=\"language-text\">Startup.cs</code> with the following:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"80106573890873820000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n{\n    if (env.IsDevelopment())\n    {\n        app.UseDeveloperExceptionPage();\n    }\n\n    app.UseGraphQL();\n    app.UsePlayground();\n\n    app.Run(async (context) =>\n    {\n        await context.Response.WriteAsync(&quot;Hello World!&quot;);\n    });\n}`, `80106573890873820000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IApplicationBuilder</span> app<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IHostingEnvironment</span> env<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">.</span><span class=\"token function\">IsDevelopment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        app<span class=\"token punctuation\">.</span><span class=\"token function\">UseDeveloperExceptionPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    app<span class=\"token punctuation\">.</span><span class=\"token function\">UseGraphQL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    app<span class=\"token punctuation\">.</span><span class=\"token function\">UsePlayground</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    app<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> context<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">.</span><span class=\"token function\">WriteAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You should now be able to start the GraphQL server.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"83049435078630300000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`dotnet run`, `83049435078630300000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">dotnet run</code></pre></div>\n<p>The server should be accessible through plaground under the following URL <code class=\"language-text\">http://127.0.0.1:5000/playground</code>.</p>\n<p>Add the following query and execute it:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"39407724021988570000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`{\n  hello\n}`, `39407724021988570000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  hello\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The query and the result should now be printed to your console.</p>\n<p>This is just a simple example of how to subscribe to our diagnostic events. Checkout our documentation for a list of all of the events available <a href=\"https://hotchocolate.io/docs/next/instrumentation\">here</a>.</p>\n<p>We have added this example project to our example repo <a href=\"https://github.com/ChilliCream/hotchocolate-examples/tree/master/Instrumentation\">here</a>.</p>\n<p>Also, we have a more complex implementation of a Hot Chocolate ETW event source <a href=\"https://github.com/ChilliCream/thor-client/tree/master/src/Clients/HotChocolate\">here</a>.</p>\n<p>Another example is our <a href=\"https://github.com/ChilliCream/hotchocolate/blob/master/src/Core/Core/Execution/Instrumentation/ApolloTracingDiagnosticObserver.cs\">Apollo Tracing implementation</a> that is also based on our instrumentation API.</p>\n<p>I hope this little field trip into our instrumentation API gives a little outlook of an often-overlooked feature that is coming with version 9. All of what I showed in this blog is available with preview 5 (9.0.0-preview.5) that we released today.</p>\n<p>We will add stitching related events with the next view preview builds.</p>","fields":{"readingTime":{"text":"6 min read"}}},"site":{"siteMetadata":{"siteUrl":"https://chillicream.com","author":"Chilli_Cream"}}},"pageContext":{}},"staticQueryHashes":["2209038331","2890364758","4218812017"]}