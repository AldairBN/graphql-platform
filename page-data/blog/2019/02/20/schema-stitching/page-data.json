{"componentChunkName":"component---src-templates-blog-article-template-tsx","path":"/blog/2019/02/20/schema-stitching","result":{"data":{"markdownRemark":{"excerpt":"With version 8 of Hot Chocolate we have mainly focused on schema stitching. One of the most requested features in this area was auto…","frontmatter":{"featuredImage":null,"path":"/blog/2019/02/20/schema-stitching","title":"GraphQL - Schema Stitching with Version 8","tags":["hotchocolate","graphql","dotnet","aspnetcore","schema-stitching"],"author":"Michael Staib","authorImageUrl":"https://avatars1.githubusercontent.com/u/9714350?s=100&v=4","authorUrl":"https://github.com/michaelstaib","date":"February 20, 2019"},"html":"<p>With version 8 of Hot Chocolate we have mainly focused on schema stitching. One of the most requested features in this area was auto-stitching. Auto-stitching will enable us to automatically pull in schemas from other GraphQL servers and merge those into one schema.</p>\n<p><strong>What is schema stitching actually?</strong></p>\n<p>Schema stitching is the capability to merge multiple GraphQL schemas into one schema that can be queried.</p>\n<h2 id=\"introduction\" style=\"position:relative;\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"16\" height=\"16\"><path d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"/></svg></a>Introduction</h2>\n<p><strong>So, for what is that useful?</strong></p>\n<p>In our case we have lots of specialized services that serve data for specific problem domains. Some of these services are GraphQL services, some of them are REST services and yes sadly a little portion of those are still SOAP services.</p>\n<p>With <em>Hot Chocolate</em> schema stitching we are able to create a gateway that bundles all those services into one GraphQL schema.</p>\n<p><strong>Is schema stitching basically just putting two schemas together?</strong></p>\n<p>Just putting two schemas into one and avoid name collisions is simple. But what we want to achieve with schema stitching is one consistent schema.</p>\n<p><em>Hot Chocolate</em> schema stitching allows us to really integrate services into one schema by folding types into one another and even renaming or removing parts.</p>\n<p>With this we can create a consistent GraphQL schema that hides the implementation details of our backend services and provides the consumer of our endpoint with the capability to fetch the data they need with one call, no under- or over-fetching and most importantly no repeated fetching because we first needed to fetch that special id with which we now can fetch this other thingy.</p>\n<h2 id=\"getting-started\" style=\"position:relative;\"><a href=\"#getting-started\" aria-label=\"getting started permalink\" class=\"anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"16\" height=\"16\"><path d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"/></svg></a>Getting Started</h2>\n<p>In order to showcase how schema stitching works and what the problems are let us assume we have a service like twitter, where a user can post messages.</p>\n<p>Moreover, let us assume we have three teams working on internal micro-/domain-services that handle certain aspects of that service.</p>\n<p>The first service is handling the message stream and has the following schema:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"9997270693345927000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`type Query {\n  messages(userId: ID!): [Message!]\n  message(messageId: ID!): Message\n}\n\ntype Mutation {\n  newMessage(input: NewMessageInput!): NewMessagePayload!\n}\n\ntype Message {\n  id: ID!\n  text: String!\n  createdBy: ID!\n  createdAt: DateTime!\n  tags: [String!]\n}\n\ntype NewMessageInput {\n  text: String!\n  tags: [String!]\n}\n\ntype NewMessagePayload {\n  message: Message\n}`, `9997270693345927000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">messages</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">userId</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Message<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">message</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">messageId</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Message\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Mutation</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">newMessage</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">input</span><span class=\"token punctuation\">:</span> NewMessageInput<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> NewMessagePayload<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Message</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">text</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">createdBy</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">createdAt</span><span class=\"token punctuation\">:</span> DateTime<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NewMessageInput</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">text</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NewMessagePayload</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">message</span><span class=\"token punctuation\">:</span> Message\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The second service is handling the users of the services and has the following schema:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"4945173342197084000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`type Query {\n  user(userId: ID!): User!\n  users: [User!]\n}\n\ntype Mutation {\n  newUser(input: NewUserInput!): NewUserPayload!\n  resetPassword(input: ResetPasswordInput!): ResetPasswordPayload!\n}\n\ntype NewUserInput {\n  username: String!\n  password: String!\n}\n\ntype ResetPasswordInput {\n  username: String!\n  password: String!\n}\n\ntype NewUserPayload {\n  user: User\n}\n\ntype ResetPasswordPayload {\n  user: User\n}\n\ntype User {\n  id: ID!\n  username: String!\n}`, `4945173342197084000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">user</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">userId</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> User<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">users</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>User<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Mutation</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">newUser</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">input</span><span class=\"token punctuation\">:</span> NewUserInput<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> NewUserPayload<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">resetPassword</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">input</span><span class=\"token punctuation\">:</span> ResetPasswordInput<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> ResetPasswordPayload<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NewUserInput</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">username</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">password</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ResetPasswordInput</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">username</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">password</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NewUserPayload</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">user</span><span class=\"token punctuation\">:</span> User\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ResetPasswordPayload</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">user</span><span class=\"token punctuation\">:</span> User\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">username</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Last but not least we have a third service handling the message analytics. In our example case we keep it simple and our analytics service just tracks three different counters per message. The schema for this service looks like the following:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"24280609706978185000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`type Query {\n  analytics(messageId: ID!, type: CounterType!): MessageAnalytics\n}\n\ntype MessageAnalytics {\n  id: ID!\n  messageId: ID!\n  count: Int!\n  type: CounterType!\n}\n\nenum CounterType {\n  VIEWS\n  LIKES\n  REPLIES\n}`, `24280609706978185000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">analytics</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">messageId</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">type</span><span class=\"token punctuation\">:</span> CounterType<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> MessageAnalytics\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">MessageAnalytics</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">messageId</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">count</span><span class=\"token punctuation\">:</span> Int<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">type</span><span class=\"token punctuation\">:</span> CounterType<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">CounterType</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">VIEWS</span>\n  <span class=\"token constant\">LIKES</span>\n  <span class=\"token constant\">REPLIES</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>With those three separate schemas our UI team would have to fetch from multiple endpoints.</p>\n<p>Even worse for our UI team, in order to build a stream view that shows the message text and the name of the user who posted the message, they would have to first fetch all the messages and could only then fetch the names of the users.</p>\n<p>This is actually one of the very things GraphQL tries to solve.</p>\n<h2 id=\"setting-up-our-server\" style=\"position:relative;\"><a href=\"#setting-up-our-server\" aria-label=\"setting up our server permalink\" class=\"anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"16\" height=\"16\"><path d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"/></svg></a>Setting up our server</h2>\n<p>Before we start with stitching itself let`s get into how to setup our server.</p>\n<p>Every <em>Hot Chocolate</em> server can be a stitching server. This means in order to get started we can just use the <em>Hot Chocolate</em> GraphQL server template and modify it a little bit to make the server a stitching server.</p>\n<p>If you do not have the <em>Hot Chocolate</em> GraphQL server template installed execute first the following command.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"10233690249615624000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`dotnet new -i HotChocolate.Templates.Server`, `10233690249615624000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">dotnet new -i HotChocolate.Templates.Server</code></pre></div>\n<p>After that we will create a new folder and add a new server to that folder.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"63472551405543960000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`mkdir stitching-demo\ncd stitching-demo\ndotnet new graphql-server`, `63472551405543960000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> stitching-demo\n<span class=\"token builtin class-name\">cd</span> stitching-demo\ndotnet new graphql-server</code></pre></div>\n<p>With this we have now a functioning GraphQL server with a simple hello world example.</p>\n<p>In order to make this server a stitching server we now have to add the <em>Hot Chocolate</em> stitching engine.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"67123735863780660000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`dotnet add package HotChocolate.Stitching`, `67123735863780660000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">dotnet <span class=\"token function\">add</span> package HotChocolate.Stitching</code></pre></div>\n<p>Now that our GraphQL server is ready we can start to configure the endpoints of our remote schemas.</p>\n<blockquote>\n<p>Remote schemas are what we call the GraphQL schemas that we want to include into our merged schema. Remote schemas can be any GraphQL Spec compliant server (Apollo, Sangria, Hot Chocolate etc.) that serves its schema over HTTP. Also we can include local schemas that are created with the <em>Hot Chocolate</em> .net API.</p>\n</blockquote>\n<p>The endpoints are declared by using a named <code class=\"language-text\">HttpClient</code> via the HttpClient factory that is included with ASP.net core.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"17465473949642950000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`services.AddHttpClient(&quot;messages&quot;, (sp, client) =>\n{\n  client.BaseAddress = new Uri(&quot;http://127.0.0.1:5050&quot;);\n});\nservices.AddHttpClient(&quot;users&quot;, (sp, client) =>\n{\n  client.BaseAddress = new Uri(&quot;http://127.0.0.1:5051&quot;);\n});\nservices.AddHttpClient(&quot;analytics&quot;, (sp, client) =>\n{\n  client.BaseAddress = new Uri(&quot;http://127.0.0.1:5052&quot;);\n});`, `17465473949642950000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddHttpClient</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"messages\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>sp<span class=\"token punctuation\">,</span> client<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n  client<span class=\"token punctuation\">.</span>BaseAddress <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Uri</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://127.0.0.1:5050\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nservices<span class=\"token punctuation\">.</span><span class=\"token function\">AddHttpClient</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"users\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>sp<span class=\"token punctuation\">,</span> client<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n  client<span class=\"token punctuation\">.</span>BaseAddress <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Uri</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://127.0.0.1:5051\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nservices<span class=\"token punctuation\">.</span><span class=\"token function\">AddHttpClient</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"analytics\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>sp<span class=\"token punctuation\">,</span> client<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n  client<span class=\"token punctuation\">.</span>BaseAddress <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Uri</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://127.0.0.1:5052\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now let`s remove the parts from the server template that we don't need.</p>\n<blockquote>\n<p>We will show some strategies of how to handle authenticated services later on.</p>\n</blockquote>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"11120398114056851000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`services.AddDataLoaderRegistry();\n\nservices.AddGraphQL(sp => Schema.Create(c =>\n{\n    c.RegisterQueryType<Query>();\n}));`, `11120398114056851000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddDataLoaderRegistry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nservices<span class=\"token punctuation\">.</span><span class=\"token function\">AddGraphQL</span><span class=\"token punctuation\">(</span>sp <span class=\"token operator\">=></span> Schema<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">RegisterQueryType</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Query<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"stitching-builder\" style=\"position:relative;\"><a href=\"#stitching-builder\" aria-label=\"stitching builder permalink\" class=\"anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"16\" height=\"16\"><path d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"/></svg></a>Stitching Builder</h2>\n<p>The stitching builder is the main API to configure a stitched GraphQL schema (GraphQL gateway). In order to have a simple auto-merge we have just to provide all the necessary schema names and the stitching layer will fetch the remote schemas via introspection on the first call to the stitched schema.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"68192775469509660000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`services.AddStitchedSchema(builder => builder\n  .AddSchemaFromHttp(&quot;messages&quot;)\n  .AddSchemaFromHttp(&quot;users&quot;)\n  .AddSchemaFromHttp(&quot;analytics&quot;));`, `68192775469509660000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddStitchedSchema</span><span class=\"token punctuation\">(</span>builder <span class=\"token operator\">=></span> builder\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddSchemaFromHttp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"messages\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddSchemaFromHttp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"users\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddSchemaFromHttp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"analytics\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Since a stitched schema is essentially no different to any other GraphQL schema, we can configure custom types, add custom middleware or do any other thing that we could do with a <em>Hot Chocolate</em> GraphQL schema.</p>\n<p>In our example we are stitching together schemas that come with non-spec scalar types like <code class=\"language-text\">DateTime</code>. So, the stitching layer would report a schema error when stitching the above three schemas together since the <code class=\"language-text\">DateTime</code> scalar is unknown.</p>\n<p>In order to declare this custom scalar we can register the extended scalar set like with a regular <em>Hot Chocolate</em> GraphQL schema through the <code class=\"language-text\">AddSchemaConfiguration</code>-method on the stitching builder.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"10838170785372369000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`services.AddStitchedSchema(builder => builder\n  .AddSchemaFromHttp(&quot;messages&quot;)\n  .AddSchemaFromHttp(&quot;users&quot;)\n  .AddSchemaFromHttp(&quot;analytics&quot;))\n  .AddSchemaConfiguration(c =>\n  {\n    c.RegisterExtendedScalarTypes();\n  })`, `10838170785372369000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddStitchedSchema</span><span class=\"token punctuation\">(</span>builder <span class=\"token operator\">=></span> builder\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddSchemaFromHttp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"messages\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddSchemaFromHttp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"users\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddSchemaFromHttp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"analytics\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddSchemaConfiguration</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span>\n  <span class=\"token punctuation\">{</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">RegisterExtendedScalarTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>More information about our scalars can be found <a href=\"https://hotchocolate.io/docs/custom-scalar-types\">here</a>.</p>\n</blockquote>\n<p>With this in place our stitched schema now looks like the following:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"45819506066647950000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`type Query {\n  messages(userId: ID!): [Message!]\n  message(messageId: ID!): Message\n  user(userId: ID!): User!\n  users: [User!]\n  analytics(messageId: ID!, type: CounterType!): MessageAnalytics\n}\n\ntype Mutation {\n  newMessage(input: NewMessageInput!): NewMessagePayload!\n  newUser(input: NewUserInput!): NewUserPayload!\n  resetPassword(input: ResetPasswordInput!): ResetPasswordPayload!\n}\n\ntype Message {\n  id: ID!\n  text: String!\n  createdBy: ID!\n  createdAt: DateTime!\n  tags: [String!]\n}\n\ntype NewMessageInput {\n  text: String!\n  tags: [String!]\n}\n\ntype NewMessagePayload {\n  message: Message\n}\n\ntype NewUserInput {\n  username: String!\n  password: String!\n}\n\ntype ResetPasswordInput {\n  username: String!\n  password: String!\n}\n\ntype NewUserPayload {\n  user: User\n}\n\ntype ResetPasswordPayload {\n  user: User\n}\n\ntype User {\n  id: ID!\n  username: String!\n}\n\ntype MessageAnalytics {\n  id: ID!\n  messageId: ID!\n  count: Int!\n  type: CounterType!\n}\n\nenum CounterType {\n  VIEWS\n  LIKES\n  REPLIES\n}`, `45819506066647950000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">messages</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">userId</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Message<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">message</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">messageId</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Message\n  <span class=\"token attr-name\">user</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">userId</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> User<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">users</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>User<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">analytics</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">messageId</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">type</span><span class=\"token punctuation\">:</span> CounterType<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> MessageAnalytics\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Mutation</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">newMessage</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">input</span><span class=\"token punctuation\">:</span> NewMessageInput<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> NewMessagePayload<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">newUser</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">input</span><span class=\"token punctuation\">:</span> NewUserInput<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> NewUserPayload<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">resetPassword</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">input</span><span class=\"token punctuation\">:</span> ResetPasswordInput<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> ResetPasswordPayload<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Message</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">text</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">createdBy</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">createdAt</span><span class=\"token punctuation\">:</span> DateTime<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NewMessageInput</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">text</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NewMessagePayload</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">message</span><span class=\"token punctuation\">:</span> Message\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NewUserInput</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">username</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">password</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ResetPasswordInput</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">username</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">password</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NewUserPayload</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">user</span><span class=\"token punctuation\">:</span> User\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ResetPasswordPayload</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">user</span><span class=\"token punctuation\">:</span> User\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">username</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">MessageAnalytics</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">messageId</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">count</span><span class=\"token punctuation\">:</span> Int<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">type</span><span class=\"token punctuation\">:</span> CounterType<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">CounterType</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">VIEWS</span>\n  <span class=\"token constant\">LIKES</span>\n  <span class=\"token constant\">REPLIES</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We have just achieved a simple schema merge without doing a lot of work. But honestly we would like to change some of the types. While the stitching result is nice, we would like to integrate the types with each other.</p>\n<h3 id=\"extending-types\" style=\"position:relative;\"><a href=\"#extending-types\" aria-label=\"extending types permalink\" class=\"anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"16\" height=\"16\"><path d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"/></svg></a>Extending Types</h3>\n<p>So, the first thing that we would like to have is a new field on the query that is called <code class=\"language-text\">me</code>. The <code class=\"language-text\">me</code> field shall represent the currently signed in user of our service.</p>\n<p>Further, the user type should expose the message stream of the user, this way we could fetch the messages of the signed in user like the following:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"62320207872970680000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`{\n  me {\n    messages {\n      text\n      tags\n    }\n  }\n}`, `62320207872970680000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  me <span class=\"token punctuation\">{</span>\n    messages <span class=\"token punctuation\">{</span>\n      text\n      tags\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In order to extend types in a stitched schema we can use the new GraphQL extend syntax that was introduced with the 2018 spec.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"53532795785096620000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`extend type Query {\n  me: User! @delegate(schema: &quot;users&quot;, path: &quot;user(id: \\$contextData:UserId)&quot;)\n}\n\nextend type User {\n  messages: [Message!]\n  @delegate(schema: &quot;messages&quot;, path: &quot;messages(userId: \\$fields:Id)&quot;)\n}`, `53532795785096620000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">extend</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">me</span><span class=\"token punctuation\">:</span> User<span class=\"token operator\">!</span> <span class=\"token directive function\">@delegate</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">schema</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"users\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">path</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"user(id: $contextData:UserId)\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extend</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">messages</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Message<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token directive function\">@delegate</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">schema</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"messages\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">path</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"messages(userId: $fields:Id)\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>With just that and no further code needed we have specified how the GraphQL stitching engine shall rewrite our schema.</p>\n<p>Let us dissect the above GraphQL SDL in order to understand what it does.</p>\n<p>First, let us have a look at the <code class=\"language-text\">Query</code> extension. We declared a field like we would do with the schema-first approach. After that we annotated the field with the <code class=\"language-text\">delegate</code> directive. The <code class=\"language-text\">delegate</code> directive basically works like a middleware that delegates calls to to a remote schema.</p>\n<p>The <code class=\"language-text\">path</code>-argument on the <code class=\"language-text\">delegate</code> directive specifies how to fetch the data from the remote schema. The selection path can have multiple levels. So, if we wanted to fetch just the username we could do that like the following:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"6639075581844822000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`user(id: \\$contextData:UserId).username`, `6639075581844822000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\">user<span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$contextData</span><span class=\"token punctuation\">:</span>UserId<span class=\"token punctuation\">)</span>.username</code></pre></div>\n<p>Moreover, we are using a special variable that can access the resolver context.</p>\n<p>Currently this variable has four scopes:</p>\n<ul>\n<li>\n<p>Arguments</p>\n<p>Access arguments of the annotated field field: <code class=\"language-text\">$arguments:ArgumentName</code></p>\n</li>\n<li>\n<p>Fields</p>\n<p>Access fields of the declaring type: <code class=\"language-text\">$fields:FieldName</code></p>\n</li>\n<li>\n<p>ContextData</p>\n<p>Access properties of the request context data map: <code class=\"language-text\">$contextData:Key</code></p>\n</li>\n<li>\n<p>ScopedContextData</p>\n<p>Access properties of the scoped field context data map: <code class=\"language-text\">$contextData:Key</code></p>\n</li>\n</ul>\n<p>The context data can be used to map custom properties into our GraphQL resolvers. In our case we will use it to map the internal user ID from the user claims into our context data map. This allows us to have some kind of abstraction between the actual HttpRequest and the data that is needed to process a GraphQL request.</p>\n<blockquote>\n<p>Documentation on how to add custom context data from a http request can be found <a href=\"https://hotchocolate.io/docs/custom-context\">here</a></p>\n</blockquote>\n<p>OK, let`s sum this up, with the <code class=\"language-text\">delegate</code> directive we are able to create powerful stitching resolvers without writing one line of c# code. Furthermore, we are able to create new types that make the API richer without those types having any representation in any of the remote schemas.</p>\n<p>In order to get our extensions integrated we need to add the extensions to our stitching builder. Like with the schema we have multiple extension methods to load the GraphQL SDL from a file or a string and so on.</p>\n<p>In our case let`s say we are loading it from a file called <code class=\"language-text\">Extensions.graphql</code>.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"13572916169293058000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`services.AddStitchedSchema(builder => builder\n  .AddSchemaFromHttp(&quot;messages&quot;)\n  .AddSchemaFromHttp(&quot;users&quot;)\n  .AddSchemaFromHttp(&quot;analytics&quot;))\n  .AddExtensionsFromFile(&quot;./graphql/Extensions.graphql&quot;)\n  .AddSchemaConfiguration(c =>\n  {\n    c.RegisterExtendedScalarTypes();\n  })`, `13572916169293058000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddStitchedSchema</span><span class=\"token punctuation\">(</span>builder <span class=\"token operator\">=></span> builder\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddSchemaFromHttp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"messages\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddSchemaFromHttp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"users\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddSchemaFromHttp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"analytics\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddExtensionsFromFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./graphql/Extensions.graphql\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddSchemaConfiguration</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span>\n  <span class=\"token punctuation\">{</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">RegisterExtendedScalarTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now with all of this in place our schema looks like the following:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"54975470853509840000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`type Query {\n  me: User!\n  messages(userId: ID!): [Message!]\n  message(messageId: ID!): Message\n  user(userId: ID!): User!\n  users: [User!]\n  analytics(messageId: ID!, type: CounterType!): MessageAnalytics\n}\n\ntype Mutation {\n  newMessage(input: NewMessageInput!): NewMessagePayload!\n  newUser(input: NewUserInput!): NewUserPayload!\n  resetPassword(input: ResetPasswordInput!): ResetPasswordPayload!\n}\n\ntype Message {\n  id: ID!\n  text: String!\n  createdBy: ID!\n  createdAt: DateTime!\n  tags: [String!]\n}\n\ntype NewMessageInput {\n  text: String!\n  tags: [String!]\n}\n\ntype NewMessagePayload {\n  message: Message\n}\n\ntype NewUserInput {\n  username: String!\n  password: String!\n}\n\ntype ResetPasswordInput {\n  username: String!\n  password: String!\n}\n\ntype NewUserPayload {\n  user: User\n}\n\ntype ResetPasswordPayload {\n  user: User\n}\n\ntype User {\n  id: ID!\n  username: String!\n  messages: [Message!]\n}\n\ntype MessageAnalytics {\n  id: ID!\n  messageId: ID!\n  count: Int!\n  type: CounterType!\n}\n\nenum CounterType {\n  VIEWS\n  LIKES\n  REPLIES\n}`, `54975470853509840000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">me</span><span class=\"token punctuation\">:</span> User<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">messages</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">userId</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Message<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">message</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">messageId</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Message\n  <span class=\"token attr-name\">user</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">userId</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> User<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">users</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>User<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">analytics</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">messageId</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">type</span><span class=\"token punctuation\">:</span> CounterType<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> MessageAnalytics\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Mutation</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">newMessage</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">input</span><span class=\"token punctuation\">:</span> NewMessageInput<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> NewMessagePayload<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">newUser</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">input</span><span class=\"token punctuation\">:</span> NewUserInput<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> NewUserPayload<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">resetPassword</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">input</span><span class=\"token punctuation\">:</span> ResetPasswordInput<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> ResetPasswordPayload<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Message</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">text</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">createdBy</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">createdAt</span><span class=\"token punctuation\">:</span> DateTime<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NewMessageInput</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">text</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NewMessagePayload</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">message</span><span class=\"token punctuation\">:</span> Message\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NewUserInput</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">username</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">password</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ResetPasswordInput</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">username</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">password</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NewUserPayload</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">user</span><span class=\"token punctuation\">:</span> User\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ResetPasswordPayload</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">user</span><span class=\"token punctuation\">:</span> User\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">username</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">messages</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Message<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">MessageAnalytics</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">messageId</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">count</span><span class=\"token punctuation\">:</span> Int<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">type</span><span class=\"token punctuation\">:</span> CounterType<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">CounterType</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">VIEWS</span>\n  <span class=\"token constant\">LIKES</span>\n  <span class=\"token constant\">REPLIES</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"renaming-and-removing-types\" style=\"position:relative;\"><a href=\"#renaming-and-removing-types\" aria-label=\"renaming and removing types permalink\" class=\"anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"16\" height=\"16\"><path d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"/></svg></a>Renaming and Removing Types</h3>\n<p>Though this is nice, we would like to go even further and enhance our <code class=\"language-text\">Message</code> type like the following:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"68662989221992030000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`type Message {\n  id: ID!\n  text: String!\n  createdBy: User\n  createdById: ID!\n  createdAt: DateTime!\n  tags: [String!]\n  views: Int!\n  likes: Int!\n  replies: Int!\n}`, `68662989221992030000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Message</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">text</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">createdBy</span><span class=\"token punctuation\">:</span> User\n  <span class=\"token attr-name\">createdById</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">createdAt</span><span class=\"token punctuation\">:</span> DateTime<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">views</span><span class=\"token punctuation\">:</span> Int<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">likes</span><span class=\"token punctuation\">:</span> Int<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">replies</span><span class=\"token punctuation\">:</span> Int<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Moreover, we would like to remove the <code class=\"language-text\">analytics</code> field from our query type since we have integrated the analytics data directly into our <code class=\"language-text\">Message</code> type.</p>\n<p>Since with the root field gone we have no way of accessing <code class=\"language-text\">MessageAnalytics</code> and <code class=\"language-text\">CounterType</code>, let`s also get rid of these types.</p>\n<p>The stitching builder has powerful refactoring functions that even can be extended by writing custom document- and type-rewriters.</p>\n<p>In order to remove a field or a type we can tell the stitching builder to ignore them by calling one of the ignore extension methods.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"87850567867267710000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`services.AddStitchedSchema(builder => builder\n  .AddSchemaFromHttp(&quot;messages&quot;)\n  .AddSchemaFromHttp(&quot;users&quot;)\n  .AddSchemaFromHttp(&quot;analytics&quot;))\n  .AddExtensionsFromFile(&quot;./graphql/Extensions.graphql&quot;)\n  .IgnoreField(&quot;analytics&quot;, &quot;Query&quot;, &quot;analytics&quot;)\n  .IgnoreType(&quot;analytics&quot;, &quot;MessageAnalytics&quot;)\n  .IgnoreType(&quot;analytics&quot;, &quot;CounterType&quot;)\n  .AddSchemaConfiguration(c =>\n  {\n    c.RegisterExtendedScalarTypes();\n  })`, `87850567867267710000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddStitchedSchema</span><span class=\"token punctuation\">(</span>builder <span class=\"token operator\">=></span> builder\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddSchemaFromHttp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"messages\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddSchemaFromHttp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"users\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddSchemaFromHttp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"analytics\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddExtensionsFromFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./graphql/Extensions.graphql\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">IgnoreField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"analytics\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Query\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"analytics\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">IgnoreType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"analytics\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"MessageAnalytics\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">IgnoreType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"analytics\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CounterType\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddSchemaConfiguration</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span>\n  <span class=\"token punctuation\">{</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">RegisterExtendedScalarTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>There are also methods for renaming types and fields where the stitching engine will take care that the schema is consitently rewritten so that all the type references will refer to the corrent new type/field name.</p>\n</blockquote>\n<p>With that we have removed the types from our stitched schema. Now, let us move on to extend our message type.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"14322297812237371000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`extend type Message {\n  createdBy: User!\n  @delegate(schema: &quot;users&quot;, path: &quot;user(id: \\$fields:createdById)&quot;)\n  views: Int! @delegate(schema: &quot;analytics&quot;, path: &quot;analytics(id: \\$fields:id)&quot;)\n  likes: Int! @delegate(schema: &quot;analytics&quot;, path: &quot;analytics(id: \\$fields:id)&quot;)\n  replies: Int!\n  @delegate(schema: &quot;analytics&quot;, path: &quot;analytics(id: \\$fields:id)&quot;)\n}`, `14322297812237371000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">extend</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">Message</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">createdBy</span><span class=\"token punctuation\">:</span> User<span class=\"token operator\">!</span>\n  <span class=\"token directive function\">@delegate</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">schema</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"users\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">path</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"user(id: $fields:createdById)\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token attr-name\">views</span><span class=\"token punctuation\">:</span> Int<span class=\"token operator\">!</span> <span class=\"token directive function\">@delegate</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">schema</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"analytics\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">path</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"analytics(id: $fields:id)\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token attr-name\">likes</span><span class=\"token punctuation\">:</span> Int<span class=\"token operator\">!</span> <span class=\"token directive function\">@delegate</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">schema</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"analytics\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">path</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"analytics(id: $fields:id)\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token attr-name\">replies</span><span class=\"token punctuation\">:</span> Int<span class=\"token operator\">!</span>\n  <span class=\"token directive function\">@delegate</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">schema</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"analytics\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">path</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"analytics(id: $fields:id)\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Since we introduced a new field <code class=\"language-text\">createdBy</code> that basically overwrites the field that we have already declared on our original <code class=\"language-text\">Message</code> type, we need to rename the original field <code class=\"language-text\">createdBy</code> to <code class=\"language-text\">createdById</code> so that we are still able to use it.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"27173262921833775000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`services.AddStitchedSchema(builder => builder\n  .AddSchemaFromHttp(&quot;messages&quot;)\n  .AddSchemaFromHttp(&quot;users&quot;)\n  .AddSchemaFromHttp(&quot;analytics&quot;))\n  .AddExtensionsFromFile(&quot;./graphql/Extensions.graphql&quot;)\n  .IgnoreField(&quot;analytics&quot;, &quot;Query&quot;, &quot;analytics&quot;)\n  .IgnoreType(&quot;analytics&quot;, &quot;MessageAnalytics&quot;)\n  .IgnoreType(&quot;analytics&quot;, &quot;CounterType&quot;)\n  .RenameField(&quot;messages&quot;, &quot;Message&quot;, &quot;createdBy&quot;, &quot;createdById&quot;)\n  .AddSchemaConfiguration(c =>\n  {\n    c.RegisterExtendedScalarTypes();\n  })`, `27173262921833775000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddStitchedSchema</span><span class=\"token punctuation\">(</span>builder <span class=\"token operator\">=></span> builder\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddSchemaFromHttp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"messages\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddSchemaFromHttp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"users\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddSchemaFromHttp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"analytics\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddExtensionsFromFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./graphql/Extensions.graphql\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">IgnoreField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"analytics\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Query\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"analytics\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">IgnoreType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"analytics\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"MessageAnalytics\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">IgnoreType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"analytics\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CounterType\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">RenameField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"messages\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Message\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"createdBy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"createdById\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddSchemaConfiguration</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span>\n  <span class=\"token punctuation\">{</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">RegisterExtendedScalarTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>It is important to now that the document- and type-rewriters are executed before the schemas are merged and the extensions integrated.</p>\n</blockquote>\n<p>Our new schema now looks like the following:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"76778526870410300000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`type Query {\n  me: User!\n  messages(userId: ID!): [Message!]\n  message(messageId: ID!): Message\n  user(userId: ID!): User!\n  users: [User!]\n}\n\ntype Mutation {\n  newMessage(input: NewMessageInput!): NewMessagePayload!\n  newUser(input: NewUserInput!): NewUserPayload!\n  resetPassword(input: ResetPasswordInput!): ResetPasswordPayload!\n}\n\ntype Message {\n  id: ID!\n  text: String!\n  createdBy: User\n  createdById: ID!\n  createdAt: DateTime!\n  tags: [String!]\n  views: Int!\n  likes: Int!\n  replies: Int!\n}\n\ntype NewMessageInput {\n  text: String!\n  tags: [String!]\n}\n\ntype NewMessagePayload {\n  message: Message\n}\n\ntype NewUserInput {\n  username: String!\n  password: String!\n}\n\ntype ResetPasswordInput {\n  username: String!\n  password: String!\n}\n\ntype NewUserPayload {\n  user: User\n}\n\ntype ResetPasswordPayload {\n  user: User\n}\n\ntype User {\n  id: ID!\n  username: String!\n  messages: [Message!]\n}`, `76778526870410300000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">me</span><span class=\"token punctuation\">:</span> User<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">messages</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">userId</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Message<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">message</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">messageId</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Message\n  <span class=\"token attr-name\">user</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">userId</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> User<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">users</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>User<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Mutation</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">newMessage</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">input</span><span class=\"token punctuation\">:</span> NewMessageInput<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> NewMessagePayload<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">newUser</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">input</span><span class=\"token punctuation\">:</span> NewUserInput<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> NewUserPayload<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">resetPassword</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">input</span><span class=\"token punctuation\">:</span> ResetPasswordInput<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> ResetPasswordPayload<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Message</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">text</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">createdBy</span><span class=\"token punctuation\">:</span> User\n  <span class=\"token attr-name\">createdById</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">createdAt</span><span class=\"token punctuation\">:</span> DateTime<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">views</span><span class=\"token punctuation\">:</span> Int<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">likes</span><span class=\"token punctuation\">:</span> Int<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">replies</span><span class=\"token punctuation\">:</span> Int<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NewMessageInput</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">text</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NewMessagePayload</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">message</span><span class=\"token punctuation\">:</span> Message\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NewUserInput</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">username</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">password</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ResetPasswordInput</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">username</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">password</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NewUserPayload</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">user</span><span class=\"token punctuation\">:</span> User\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ResetPasswordPayload</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">user</span><span class=\"token punctuation\">:</span> User\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">username</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">messages</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Message<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"query-rewriter\" style=\"position:relative;\"><a href=\"#query-rewriter\" aria-label=\"query rewriter permalink\" class=\"anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"16\" height=\"16\"><path d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"/></svg></a>Query Rewriter</h3>\n<p>As can be seen, it is quite simple to stitch multiple schemas together and enhance them with the stitching builder.</p>\n<p><strong>But how can we go further and hook into the query rewriter of the stitching engine?</strong></p>\n<p>Let us for instance try to get rid of the <code class=\"language-text\">createdById</code> field of the <code class=\"language-text\">Message</code> type as we actually do not want to expose this field to the consumer of the stitched schema.</p>\n<p>Since our resolver for the newly introduced <code class=\"language-text\">createdBy</code> field is dependent on the <code class=\"language-text\">createdById</code> field in order to fetch the <code class=\"language-text\">User</code> from the remote schema, we would need to be able to request it as some kind of a hidden field whenever a <code class=\"language-text\">Message</code> object is resolved.</p>\n<p>We could then write a little field middleware that copies us the hidden field data into our scoped context data, so that we are consequently able to use the id in our <code class=\"language-text\">delegate</code> directive by accessing the <code class=\"language-text\">createdById</code> via the scoped context data instead of referring to a field of the <code class=\"language-text\">Message</code> type.</p>\n<p>The stitching engine allows us to hook into the the query rewrite process and add our own rewrite logic that could add fields or even large sub-queries.</p>\n<p>The first thing we need to do here is to create a new class that inherits from <code class=\"language-text\">QueryDelegationRewriterBase</code>.</p>\n<p>The base class exposes two virtual methods <code class=\"language-text\">OnRewriteField</code> and <code class=\"language-text\">OnRewriteSelectionSet</code>.</p>\n<p>A selection set describes a selection of fields and fragments on a certain type.</p>\n<p>So, in order to fetch a hidden field every time a certain type is requested we would want to overwrite <code class=\"language-text\">OnRewriteSelectionSet</code>.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"11838383941348086000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`private class AddCreatedByIdQueryRewriter\n    : QueryDelegationRewriterBase\n{\n    public override SelectionSetNode OnRewriteSelectionSet(\n        NameString targetSchemaName,\n        IOutputType outputType,\n        IOutputField outputField,\n        SelectionSetNode selectionSet)\n    {\n        if(outputType.NamedType() is ObjectType objectType\n          && objectType.Name.Equals(&quot;Message&quot;))\n        {\n            return selectionSet.AddSelection(\n                new FieldNode\n                (\n                    null,\n                    new NameNode(&quot;createdBy&quot;),\n                    new NameNode(&quot;createdById&quot;),\n                    Array.Empty<DirectiveNode>(),\n                    Array.Empty<ArgumentNode>(),\n                    null\n                ));\n        }\n\n        return selectionSet;\n    }\n}`, `11838383941348086000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AddCreatedByIdQueryRewriter</span>\n    <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">QueryDelegationRewriterBase</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">SelectionSetNode</span> <span class=\"token function\">OnRewriteSelectionSet</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">NameString</span> targetSchemaName<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">IOutputType</span> outputType<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">IOutputField</span> outputField<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">SelectionSetNode</span> selectionSet<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>outputType<span class=\"token punctuation\">.</span><span class=\"token function\">NamedType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token class-name\">ObjectType</span> objectType\n          <span class=\"token operator\">&amp;&amp;</span> objectType<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Message\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> selectionSet<span class=\"token punctuation\">.</span><span class=\"token function\">AddSelection</span><span class=\"token punctuation\">(</span>\n                <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FieldNode</span>\n                <span class=\"token punctuation\">(</span>\n                    <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NameNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"createdBy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NameNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"createdById\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    Array<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Empty</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>DirectiveNode<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    Array<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Empty</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ArgumentNode<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token keyword\">null</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> selectionSet<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The syntax nodes have a lot of little rewrite helpers like <code class=\"language-text\">AddSelection</code>. These helper methods basically branch of the syntax tree and return a new version that contains the applied change.</p>\n<p>In our case we get a new <code class=\"language-text\">SelectionSetNode</code> that now also contains a field <code class=\"language-text\">createdBy</code> with an alias <code class=\"language-text\">createdById</code>. In a real-world implementation we should use a more complex alias name like <code class=\"language-text\">___internal_field_createdById</code> in order to avoid collisions with field selections of the query.</p>\n<p>Query delegation rewriters are registered with the dependency injection and not with our stitching builder.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"74615888566743990000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`services.AddQueryDelegationRewriter<AddCreatedByIdQueryRewriter>();`, `74615888566743990000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddQueryDelegationRewriter</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AddCreatedByIdQueryRewriter<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>Query delegation rewriters are hosted as scoped services and can be injected with <code class=\"language-text\">IStitchingContext</code> and <code class=\"language-text\">ISchema</code> in order to access the remote schemas or the stitched schema for advanced type information.</p>\n</blockquote>\n<p>With that in place, the stitching engine will always fetch the requested field for us whenever a <code class=\"language-text\">Message</code> object is requested.</p>\n<p>So, now let us move on to write a little middleware that copies this data into our scoped resolver context data map. The data in this map will only be available to the resolvers in the subtree of the message type.</p>\n<p>A field middleware has to be declared via the stitching builder.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"62804460597905250000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`services.AddStitchedSchema(builder => builder\n  .AddSchemaFromHttp(&quot;messages&quot;)\n  .AddSchemaFromHttp(&quot;users&quot;)\n  .AddSchemaFromHttp(&quot;analytics&quot;))\n  .AddExtensionsFromFile(&quot;./graphql/Extensions.graphql&quot;)\n  .IgnoreField(&quot;analytics&quot;, &quot;Query&quot;, &quot;analytics&quot;)\n  .IgnoreType(&quot;analytics&quot;, &quot;MessageAnalytics&quot;)\n  .IgnoreType(&quot;analytics&quot;, &quot;CounterType&quot;)\n  .IgnoreField(&quot;messages&quot;, &quot;Message&quot;, &quot;createdBy&quot;)\n  .AddSchemaConfiguration(c =>\n  {\n    c.RegisterExtendedScalarTypes();\n\n    c.Use(next => async context =>\n    {\n        await next.Invoke(context);\n\n        if(context.Field.Type.NamedType() is ObjectType objectType\n          && objectType.Name.Equals(&quot;Message&quot;)\n          && context.Result is IDictionary<string, object> data\n          && data.TryGetValue(&quot;createdById&quot;, out object value))\n        {\n            context.ScopedContextData =\n                context.ScopedContextData.SetItem(&quot;createdById&quot;, value);\n        }\n    })\n  })`, `62804460597905250000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddStitchedSchema</span><span class=\"token punctuation\">(</span>builder <span class=\"token operator\">=></span> builder\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddSchemaFromHttp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"messages\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddSchemaFromHttp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"users\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddSchemaFromHttp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"analytics\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddExtensionsFromFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./graphql/Extensions.graphql\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">IgnoreField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"analytics\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Query\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"analytics\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">IgnoreType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"analytics\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"MessageAnalytics\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">IgnoreType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"analytics\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CounterType\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">IgnoreField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"messages\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Message\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"createdBy\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddSchemaConfiguration</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span>\n  <span class=\"token punctuation\">{</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">RegisterExtendedScalarTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">Use</span><span class=\"token punctuation\">(</span>next <span class=\"token operator\">=></span> <span class=\"token keyword\">async</span> context <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> next<span class=\"token punctuation\">.</span><span class=\"token function\">Invoke</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>Field<span class=\"token punctuation\">.</span>Type<span class=\"token punctuation\">.</span><span class=\"token function\">NamedType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token class-name\">ObjectType</span> objectType\n          <span class=\"token operator\">&amp;&amp;</span> objectType<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Message\"</span><span class=\"token punctuation\">)</span>\n          <span class=\"token operator\">&amp;&amp;</span> context<span class=\"token punctuation\">.</span>Result <span class=\"token keyword\">is</span> <span class=\"token class-name\">IDictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">object</span><span class=\"token punctuation\">></span></span> data\n          <span class=\"token operator\">&amp;&amp;</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">TryGetValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"createdById\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">object</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            context<span class=\"token punctuation\">.</span>ScopedContextData <span class=\"token operator\">=</span>\n                context<span class=\"token punctuation\">.</span>ScopedContextData<span class=\"token punctuation\">.</span><span class=\"token function\">SetItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"createdById\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>We could also declare a field middleware as class. More about what can be done with a field middleware can be found <a href=\"https://hotchocolate.io/docs/middleware\">here</a>.</p>\n</blockquote>\n<p>With all of this in place we can now rewrite our <code class=\"language-text\">Message</code> type extension and access the <code class=\"language-text\">createdById</code> from the scoped context data:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"39740115147986850000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`extend type Message {\n  createdBy: User!\n  @delegate(schema: &quot;users&quot;, path: &quot;user(id: \\$scopedContextData:createdById)&quot;)\n  views: Int! @delegate(schema: &quot;analytics&quot;, path: &quot;analytics(id: \\$fields:id)&quot;)\n  likes: Int! @delegate(schema: &quot;analytics&quot;, path: &quot;analytics(id: \\$fields:id)&quot;)\n  replies: Int!\n  @delegate(schema: &quot;analytics&quot;, path: &quot;analytics(id: \\$fields:id)&quot;)\n}`, `39740115147986850000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">extend</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">Message</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">createdBy</span><span class=\"token punctuation\">:</span> User<span class=\"token operator\">!</span>\n  <span class=\"token directive function\">@delegate</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">schema</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"users\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">path</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"user(id: $scopedContextData:createdById)\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token attr-name\">views</span><span class=\"token punctuation\">:</span> Int<span class=\"token operator\">!</span> <span class=\"token directive function\">@delegate</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">schema</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"analytics\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">path</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"analytics(id: $fields:id)\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token attr-name\">likes</span><span class=\"token punctuation\">:</span> Int<span class=\"token operator\">!</span> <span class=\"token directive function\">@delegate</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">schema</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"analytics\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">path</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"analytics(id: $fields:id)\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token attr-name\">replies</span><span class=\"token punctuation\">:</span> Int<span class=\"token operator\">!</span>\n  <span class=\"token directive function\">@delegate</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">schema</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"analytics\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">path</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"analytics(id: $fields:id)\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"customizing-stitching-builder\" style=\"position:relative;\"><a href=\"#customizing-stitching-builder\" aria-label=\"customizing stitching builder permalink\" class=\"anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"16\" height=\"16\"><path d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"/></svg></a>Customizing Stitching Builder</h3>\n<p>The stitching builder can be extended on multiple levels by writing different kinds of schema syntax rewriter.</p>\n<h4 id=\"source-schema-rewriter\" style=\"position:relative;\"><a href=\"#source-schema-rewriter\" aria-label=\"source schema rewriter permalink\" class=\"anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"16\" height=\"16\"><path d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"/></svg></a>Source Schema Rewriter</h4>\n<p>The refactoring methods that we provide like <code class=\"language-text\">IgnoreField</code> or <code class=\"language-text\">RenameType</code> and so on rewrite the source schemas before they are merged.</p>\n<p>In order to rewrite the source schema we can opt to create a <code class=\"language-text\">IDocumentRewriter</code> that is able to rewrite the whole schema document, or a <code class=\"language-text\">ITypeRewriter</code> that only can rewrite parts of a type definition.</p>\n<p>If we wanted to delete a type or write a rewriter that also refactors the impacted types of a change then the <code class=\"language-text\">IDocumentRewriter</code> would be the way to go.</p>\n<p>If we wanted to rewrite just parts of a type like adding some documentation or adding new fields to a type, basically things that do not impact other types, we could opt for the <code class=\"language-text\">ITypeRewriter</code>.</p>\n<p>In both types we could opt to use the rewriter and visitor base classes that are included in our parser package.</p>\n<blockquote>\n<p>Information about our parser can be found <a href=\"https://hotchocolate.io/docs/parser\">here</a>.</p>\n</blockquote>\n<h4 id=\"merged-schema-rewriter\" style=\"position:relative;\"><a href=\"#merged-schema-rewriter\" aria-label=\"merged schema rewriter permalink\" class=\"anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"16\" height=\"16\"><path d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"/></svg></a>Merged Schema Rewriter</h4>\n<p>Apart from the source schema rewriters we can also rewrite the schema document after it has been merged:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"53797558544325440000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`IStitchingBuilder AddMergedDocumentRewriter(Func<DocumentNode, DocumentNode> rewrite);`, `53797558544325440000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token return-type class-name\">IStitchingBuilder</span> <span class=\"token function\">AddMergedDocumentRewriter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>DocumentNode<span class=\"token punctuation\">,</span> DocumentNode<span class=\"token punctuation\">></span></span> rewrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This can be very useful if we want to first let all source schema rewriters do their work and annotate the types. With the annotations in place we could write complex rewriters that further enhance our stitched schema.</p>\n<p>Also, if we just wanted to validate the schema for merge errors or collect information on the rewritten schema we are able to add schema visitors that run after all schema modifications are done.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"70318226145064220000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`IStitchingBuilder AddMergedDocumentVisitor(Action<DocumentNode> visit);`, `70318226145064220000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token return-type class-name\">IStitchingBuilder</span> <span class=\"token function\">AddMergedDocumentVisitor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Action<span class=\"token punctuation\">&lt;</span>DocumentNode<span class=\"token punctuation\">></span></span> visit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"merge-rules\" style=\"position:relative;\"><a href=\"#merge-rules\" aria-label=\"merge rules permalink\" class=\"anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"16\" height=\"16\"><path d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"/></svg></a>Merge Rules</h4>\n<p>In most cases the default merge rules should be enough. But with more domain knowledge about the source schemas one could write more aggressive merge rules.</p>\n<p>The merge rules are chained and pass along what they cannot handle. The types of the various schemas are bucketed by name and passed to the merge rule chain.</p>\n<h2 id=\"authentication\" style=\"position:relative;\"><a href=\"#authentication\" aria-label=\"authentication permalink\" class=\"anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"16\" height=\"16\"><path d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"/></svg></a>Authentication</h2>\n<p>In many cases schemas will be protected by some sort of authentication. In most cases http requests are authenticated with bearer tokens that are passed along as <code class=\"language-text\">Authorization</code> header.</p>\n<p>Moreover, the most common case that we have seen so far is that people want to pass the tokens along to the remote schema.</p>\n<p>The stitching engine creates a lazy query executor that will only start merging the schemas on the first call to the GraphQL gateway. This allows us to use the token of an incoming call to execute the introspection queries on the remote schemas. This also safes us from having to store some kind of service token with the GraphQL gateway.</p>\n<p>In order to pass on the incoming <code class=\"language-text\">Authorization</code> header to our registered HttpClients we need to first register the HttpContext accessor from ASP.net core.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"37991003551509815000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`services.AddHttpContextAccessor();`, `37991003551509815000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddHttpContextAccessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Next, we need to update our HttpClient factory declaration:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"35554522940834697000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`services.AddHttpClient(&quot;messages&quot;, (sp, client) =>\n{\n    HttpContext context = sp.GetRequiredService<IHttpContextAccessor>().HttpContext;\n\n    if (context.Request.Headers.ContainsKey(&quot;Authorization&quot;))\n    {\n        client.DefaultRequestHeaders.Authorization =\n            AuthenticationHeaderValue.Parse(\n                context.Request.Headers[&quot;Authorization&quot;]\n                    .ToString());\n    }\n\n    client.BaseAddress = new Uri(&quot;http://127.0.0.1:5050&quot;);\n});`, `35554522940834697000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddHttpClient</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"messages\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>sp<span class=\"token punctuation\">,</span> client<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">HttpContext</span> context <span class=\"token operator\">=</span> sp<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetRequiredService</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IHttpContextAccessor<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>HttpContext<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        client<span class=\"token punctuation\">.</span>DefaultRequestHeaders<span class=\"token punctuation\">.</span>Authorization <span class=\"token operator\">=</span>\n            AuthenticationHeaderValue<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>\n                context<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">[</span><span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">]</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    client<span class=\"token punctuation\">.</span>BaseAddress <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Uri</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://127.0.0.1:5050\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Another variant can also be to store service tokens for the remote schemas with our GraphQL gateway.</p>\n<p>How you want to implement authentication strongly depends on your needs. With the reliance on the HttpClient factory from the ASP.net core foundation we are very flexible and can handle multiple scenarios.</p>\n<h2 id=\"batching\" style=\"position:relative;\"><a href=\"#batching\" aria-label=\"batching permalink\" class=\"anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"16\" height=\"16\"><path d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"/></svg></a>Batching</h2>\n<p>The stitching layer transparently batches queries to the remote schemas. So, if you extend types like the following:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"62199981766701630000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`extend type Message {\n  views: Int! @delegate(schema: &quot;analytics&quot;, path: &quot;analytics(id: \\$fields:id)&quot;)\n  likes: Int! @delegate(schema: &quot;analytics&quot;, path: &quot;analytics(id: \\$fields:id)&quot;)\n  replies: Int!\n  @delegate(schema: &quot;analytics&quot;, path: &quot;analytics(id: \\$fields:id)&quot;)\n}`, `62199981766701630000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">extend</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">Message</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">views</span><span class=\"token punctuation\">:</span> Int<span class=\"token operator\">!</span> <span class=\"token directive function\">@delegate</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">schema</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"analytics\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">path</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"analytics(id: $fields:id)\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token attr-name\">likes</span><span class=\"token punctuation\">:</span> Int<span class=\"token operator\">!</span> <span class=\"token directive function\">@delegate</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">schema</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"analytics\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">path</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"analytics(id: $fields:id)\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token attr-name\">replies</span><span class=\"token punctuation\">:</span> Int<span class=\"token operator\">!</span>\n  <span class=\"token directive function\">@delegate</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">schema</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"analytics\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">path</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"analytics(id: $fields:id)\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We do send only a single request to your remote schema instead of three. The batching mechanism works not only within one type but extends to all requests that are executed in a resolver batch.</p>\n<p>Furthermore, we are also including calls that are done through direct calls on the <code class=\"language-text\">IStitchingContext</code>.</p>\n<p>Batching works very similar to <em>DataLoader</em> where the stitching engine sends requests through the <code class=\"language-text\">IRemoteQueryClient</code> which consequently only fetches the data once the query engine signals that all resolvers have been enqueued and have registered their calls against the remote schemas. This reduces the calls to the remote-schemas significantly and improves the overall performance.</p>\n<p>So, if we had two query calls:</p>\n<p>Query 1:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"4582796223509389000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`{\n  customer(id: &quot;abc&quot;) {\n    name\n    contracts {\n      id\n    }\n  }\n}`, `4582796223509389000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  customer<span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    name\n    contracts <span class=\"token punctuation\">{</span>\n      id\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Query 2:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"20467884880349495000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`{\n  customer(id: &quot;def&quot;) {\n    name\n    contracts {\n      id\n    }\n  }\n}`, `20467884880349495000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  customer<span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"def\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    name\n    contracts <span class=\"token punctuation\">{</span>\n      id\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We would merge those two queries into one:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"46689036877168390000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`{\n  __1: customer(id: &quot;abc&quot;) {\n    name\n    contracts {\n      id\n    }\n  }\n  __2: customer(id: &quot;def&quot;) {\n    name\n    contracts {\n      id\n    }\n  }\n}`, `46689036877168390000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">__1</span><span class=\"token punctuation\">:</span> customer<span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    name\n    contracts <span class=\"token punctuation\">{</span>\n      id\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token attr-name\">__2</span><span class=\"token punctuation\">:</span> customer<span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"def\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    name\n    contracts <span class=\"token punctuation\">{</span>\n      id\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This lets the remote schema optimize the calls much better since now the remote schema could take advantage of things like <em>DataLoader</em> etc.</p>\n<h2 id=\"root-types\" style=\"position:relative;\"><a href=\"#root-types\" aria-label=\"root types permalink\" class=\"anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"16\" height=\"16\"><path d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"/></svg></a>Root Types</h2>\n<p>We are currently supporting stitching <code class=\"language-text\">Query</code> and <code class=\"language-text\">Mutation</code>.</p>\n<p>With Version 9 we will introduce stitching the <code class=\"language-text\">Subscription</code> type.</p>\n<p>Stitching queries is straight forward and works like described earlier. Mutations are also quite straight forward, but it is often overlooked that mutations are executed with a different execution strategy.</p>\n<p>Query resolvers are executed in parallel when possible. All fields of a query have to be side-effect free.</p>\n<p><a href=\"https://facebook.github.io/graphql/June2018/#sec-Normal-and-Serial-Execution\">https://facebook.github.io/graphql/June2018/#sec-Normal-and-Serial-Execution</a></p>\n<blockquote>\n<p>Normally the executor can execute the entries in a grouped field set in whatever order it chooses (normally in parallel). Because the resolution of fields other than top‐level mutation fields must always be side effect‐free and idempotent, the execution order must not affect the result, and hence the server has the freedom to execute the field entries in whatever order it deems optimal.</p>\n</blockquote>\n<p>The top‐level mutation fields are executed serially which guarantees that the top-level fields are executed one after the other.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"77739399898677560000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`mutation {\n  createUser(userName: &quot;foo&quot;) {\n    someFields\n  }\n  addUserToGroup(userName: &quot;foo&quot;, groupName: &quot;bar&quot;) {\n    someFields\n  }\n}`, `77739399898677560000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">mutation</span> <span class=\"token punctuation\">{</span>\n  createUser<span class=\"token punctuation\">(</span><span class=\"token attr-name\">userName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    someFields\n  <span class=\"token punctuation\">}</span>\n  addUserToGroup<span class=\"token punctuation\">(</span><span class=\"token attr-name\">userName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">groupName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    someFields\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The above example first creates a user and then adds the created user to a group. This means that mutations can only be stitched on the top level. Everything, that you stitch in the lower levels is delegating the request to a <code class=\"language-text\">Query</code> type.</p>\n<p>Or, even simpler put, only fields that are declared on the mutation type can delegate to a mutation field on a remote query.</p>\n<p>Let's put that in a context.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"98599556690720240000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`type Mutation {\n  newUser(input: NewUserInput!): NewUserPayload! @delegate(schema: &quot;users&quot;)\n}\n\ntype NewUserInput {\n  username: String!\n  password: String!\n}\n\ntype NewUserPayload {\n  user: User\n}\n\ntype User {\n  id: ID!\n  username: String!\n  messages: [Message!]\n  @delegate(schema: &quot;messages&quot;, path: &quot;messages(userId: \\$fields:Id)&quot;)\n}`, `98599556690720240000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Mutation</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">newUser</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">input</span><span class=\"token punctuation\">:</span> NewUserInput<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> NewUserPayload<span class=\"token operator\">!</span> <span class=\"token directive function\">@delegate</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">schema</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"users\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NewUserInput</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">username</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">password</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NewUserPayload</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">user</span><span class=\"token punctuation\">:</span> User\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">username</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">messages</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Message<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token directive function\">@delegate</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">schema</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"messages\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">path</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"messages(userId: $fields:Id)\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the above example we have a mutation that delegates the <code class=\"language-text\">newUser</code> field to the <code class=\"language-text\">newUser</code> mutation of the <code class=\"language-text\">users</code> schema. The mutation returns the <code class=\"language-text\">NewUserPayload</code> which has a field <code class=\"language-text\">user</code> that returns the newly created user. The <code class=\"language-text\">User</code> object delegates the <code class=\"language-text\">messages</code> field to the message schema. Since this field is resolved in the third level it will delegated to the query type of the <code class=\"language-text\">messages</code> schema.</p>\n<p>This also means that we cannot group mutations like we could group queries. So, something like the following would not work since it is not spec-compliant:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"16447795249831799000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`type Mutation {\n  userMutations: UserMutations\n}\n\ntype UserMutations {\n  newUser(input: NewUserInput): NewUserPayload\n}`, `16447795249831799000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Mutation</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">userMutations</span><span class=\"token punctuation\">:</span> UserMutations\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">UserMutations</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">newUser</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">input</span><span class=\"token punctuation\">:</span> NewUserInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> NewUserPayload\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"stitching-context\" style=\"position:relative;\"><a href=\"#stitching-context\" aria-label=\"stitching context permalink\" class=\"anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"16\" height=\"16\"><path d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"/></svg></a>Stitching Context</h2>\n<p>The stitching engine provides a lot of extension points, but if we wanted to write the stitching for one specific resolver by ourselves then we could do that by using the <code class=\"language-text\">IStitchingContext</code> which is a scoped service and can be resolved through the resolver context.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"20455168288772740000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`IStitchingContext stitchingContext = context.Service<IStichingContext>();\nIRemoteQueryClient remoteQueryClient = stitchingContext.GetRemoteQueryClient(&quot;messages&quot;);\nIExecutionResult result = remoteQueryClient.ExecuteAsync(&quot;{ foo { bar } }&quot;)`, `20455168288772740000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">IStitchingContext</span> stitchingContext <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Service</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IStichingContext<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">IRemoteQueryClient</span> remoteQueryClient <span class=\"token operator\">=</span> stitchingContext<span class=\"token punctuation\">.</span><span class=\"token function\">GetRemoteQueryClient</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"messages\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">IExecutionResult</span> result <span class=\"token operator\">=</span> remoteQueryClient<span class=\"token punctuation\">.</span><span class=\"token function\">ExecuteAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{ foo { bar } }\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"example\" style=\"position:relative;\"><a href=\"#example\" aria-label=\"example permalink\" class=\"anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"16\" height=\"16\"><path d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"/></svg></a>Example</h2>\n<p>We have a simple stitching example <a href=\"https://github.com/ChilliCream/hotchocolate-examples/tree/master/Stitching\">here</a>.</p>\n<h2 id=\"version-9\" style=\"position:relative;\"><a href=\"#version-9\" aria-label=\"version 9 permalink\" class=\"anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"16\" height=\"16\"><path d=\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"/></svg></a>Version 9</h2>\n<p>We originally wanted to include subscription stitching with version 8, but are now moving this feature to next version.</p>\n<p>Apart from that, Version 9 will mainly focus on schema improvements.</p>\n<p>If you have feedback or feature requests for our schema stitching we love to talk to you about it. Head over to our <a href=\"https://join.slack.com/t/hotchocolategraphql/shared_invite/enQtNTA4NjA0ODYwOTQ0LTViMzA2MTM4OWYwYjIxYzViYmM0YmZhYjdiNzBjOTg2ZmU1YmMwNDZiYjUyZWZlMzNiMTk1OWUxNWZhMzQwY2Q\">slack channel</a>.</p>","fields":{"readingTime":{"text":"22 min read"}}},"site":{"siteMetadata":{"siteUrl":"https://chillicream.com","author":"Chilli_Cream"}}},"pageContext":{}},"staticQueryHashes":["1014893094","2890364758","4218812017"]}