{"componentChunkName":"component---src-templates-blog-article-template-tsx","path":"/blog/2019/09/27/strawberry-shake","result":{"data":{"mdx":{"excerpt":"This post has been updated, please head over to the newer post  here . We for a while now have two big GraphQL server projects on the .NETâ€¦","frontmatter":{"featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/edfb5cf97791063a5ee862e3cf5cb76e/c0777/strawberry-shake-banner.png","srcSet":"/static/edfb5cf97791063a5ee862e3cf5cb76e/67216/strawberry-shake-banner.png 200w,\n/static/edfb5cf97791063a5ee862e3cf5cb76e/9e76b/strawberry-shake-banner.png 400w,\n/static/edfb5cf97791063a5ee862e3cf5cb76e/c0777/strawberry-shake-banner.png 800w","sizes":"(min-width: 800px) 800px, 100vw"},"sources":[{"srcSet":"/static/edfb5cf97791063a5ee862e3cf5cb76e/19d43/strawberry-shake-banner.webp 200w,\n/static/edfb5cf97791063a5ee862e3cf5cb76e/f9846/strawberry-shake-banner.webp 400w,\n/static/edfb5cf97791063a5ee862e3cf5cb76e/d6f15/strawberry-shake-banner.webp 800w","type":"image/webp","sizes":"(min-width: 800px) 800px, 100vw"}]},"width":800,"height":420}}},"path":"/blog/2019/09/27/strawberry-shake","title":"Building a .NET GraphQL Client API","tags":["strawberry-shake","graphql","dotnet","aspnetcore"],"author":"Michael Staib","authorImageUrl":"https://avatars1.githubusercontent.com/u/9714350?s=100&v=4","authorUrl":"https://github.com/michaelstaib","date":"September 27, 2019"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"path\": \"/blog/2019/09/27/strawberry-shake\",\n  \"date\": \"2019-09-27\",\n  \"title\": \"Building a .NET GraphQL Client API\",\n  \"featuredImage\": \"shared/strawberry-shake-banner.png\",\n  \"tags\": [\"strawberry-shake\", \"graphql\", \"dotnet\", \"aspnetcore\"],\n  \"author\": \"Michael Staib\",\n  \"authorUrl\": \"https://github.com/michaelstaib\",\n  \"authorImageUrl\": \"https://avatars1.githubusercontent.com/u/9714350?s=100&v=4\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"This post has been updated, please head over to the newer post \", mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"/blog/2019/11/25/strawberry-shake_2\"\n  }, \"here\"), \".\")), mdx(\"p\", null, \"We for a while now have two big GraphQL server projects on the .NET platform. So, if you just want to build a decent GraphQL server you can pick and choose between \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"GraphQL .NET\"), \" or Hot Chocolate.\"), mdx(\"p\", null, \"If you are looking at consuming a GraphQL server in your \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Blazor\"), \" or \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Xamarin\"), \" application, then things are not so promising. You can either go with a bare bone client from the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"GraphQL .NET\"), \" project or you can decide to go it alone and build on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HttpClient\"), \".\"), mdx(\"p\", null, \"After the version 10 release of our Hot Chocolate GraphQL server we have started to build a new GraphQL client API that is more in line with how people in JavaScript consume GraphQL endpoints.\"), mdx(\"h2\", {\n    \"id\": \"introduction\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#introduction\",\n    \"aria-label\": \"introduction permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 512 512\",\n    \"width\": \"16\",\n    \"height\": \"16\",\n    \"fill\": \"var(--heading-text-color)\"\n  }, \"\\n                        \", mdx(\"path\", {\n    parentName: \"svg\",\n    \"d\": \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  }), \"\\n                      \")), \"Introduction\"), mdx(\"p\", null, \"Before we get into it let me first outline what our goals for our approach are:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Strongly typed API.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Define the API with GraphQL.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"No magic strings.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Everything compiles.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Customizable request pipelines.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Support for local resolvers.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Support for custom scalars.\")), mdx(\"p\", null, \"The preview that we released today is a prototype that has a ton of bugs and is meant at the moment to get feedback. Starting with this preview we will now release every other day a new preview and think that we will release this new API with version 11 of Hot Chocolate.\"), mdx(\"h2\", {\n    \"id\": \"getting-started\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#getting-started\",\n    \"aria-label\": \"getting started permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 512 512\",\n    \"width\": \"16\",\n    \"height\": \"16\",\n    \"fill\": \"var(--heading-text-color)\"\n  }, \"\\n                        \", mdx(\"path\", {\n    parentName: \"svg\",\n    \"d\": \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  }), \"\\n                      \")), \"Getting Started\"), mdx(\"p\", null, \"Let us have a look at how we want to tackle things with \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Strawberry Shake\"), \". For this little walkthrough I will use our \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/ChilliCream/hotchocolate/tree/master/examples/AspNetCore.StarWars\"\n  }, mdx(\"em\", {\n    parentName: \"a\"\n  }, \"Star Wars\"), \" server example\"), \".\"), mdx(\"p\", null, \"If you want to follow along then install the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://dotnet.microsoft.com/download/dotnet-core/3.0\"\n  }, \".NET Core 3 SDK\"), \" . We are also supporting other .NET variants but for this example you will need the .NET Core 3 SDK.\"), mdx(\"p\", null, \"Before we can start let us clone the Hot Chocolate repository and start our \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Star Wars\"), \" server.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"git clone https://github.com/ChilliCream/hotchocolate.git\\ncd hotchocolate\\ndotnet run --project examples/AspNetCore.StarWars/\\n\")), mdx(\"p\", null, \"Now that we have our \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Star Wars\"), \" server running, lets create a folder for our client and install the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Strawberry Shake\"), \" tools.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"mkdir berry\\ndotnet new tool-manifest\\ndotnet tool install StrawberryShake.Tools --version 11.0.0-preview.35 --local\\n\")), mdx(\"p\", null, \"In our example we are using the new .NET CLI local tools. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dotnet new tool-manifest\"), \" creates the tools manifest which basically is like a packages.config and holds the information of which tools in which version we are using.\"), mdx(\"p\", null, \"The next command \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dotnet tool install StrawberryShake.Tools --version 11.0.0-preview.35 --local\"), \" installs our \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Strawberry Shake\"), \" tools.\"), mdx(\"p\", null, \"Next we need a little project. Let\\u2019s create a new console application so that we can easily run and debug what we are doing.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"dotnet new console -n BerryClient\\ncd BerryClient\\ndotnet add package StrawberryShake --version 11.0.0-preview.35\\ndotnet add package Microsoft.Extensions.Http --version 3.0.0\\ndotnet add package Microsoft.Extensions.DependencyInjection --version 3.0.0\\n\")), mdx(\"p\", null, \"OK, now that we have a project setup lets initialize the project by creating a local schema. Like with \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"relay\"), \" we are holding a local schema file that can be extended with local types and fields. Our \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Graphql\"), \" compiler will use this schema information to validate the queries.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"For the next step ensure that the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Star Wars\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"GraphQL\"), \" server is running since we will fetch the schema from the server.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"dotnet graphql init ./StarWars http://localhost:5000/graphql -n StarWars\\n\")), mdx(\"p\", null, \"The init command will download the schema as GraphQL SDL and create a config to refetch the schema. Also, the config contains the client name. The client name defines how the client class is and interface is named.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Note: You can pass in the token and scheme if your endpoint is authenticated. There is also an update command to update the local schema.\")), mdx(\"p\", null, \"The configuration will look like the following:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"{\\n  \\\"Schemas\\\": [\\n    {\\n      \\\"Name\\\": \\\"StarWars\\\",\\n      \\\"Type\\\": \\\"http\\\",\\n      \\\"File\\\": \\\"StarWars.graphql\\\",\\n      \\\"Url\\\": \\\"http://localhost:5000/graphql\\\"\\n    }\\n  ],\\n  \\\"ClientName\\\": \\\"StarWarsClient\\\"\\n}\\n\")), mdx(\"p\", null, \"OK, now let\\u2019s get started by creating our first client API. For this open your editor of choice. I can recommend using VSCode for this at the moment since you will get GraphQL highlighting. As we move forward, we will refine the tooling more and provide proper IntelliSense.\"), mdx(\"p\", null, \"Now let us create a new file in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"StarWars\"), \" folder called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Queries.graphql\"), \" and add the following query:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-graphql\"\n  }, \"query getFoo {\\n  foo\\n}\\n\")), mdx(\"p\", null, \"Now build your project.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"dotnet build\\n\")), mdx(\"p\", null, \"When we now compile, we get an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"MSBuild\"), \" error on which we can click in VSCode and we are pointed to the place in our query file from which the error stems from. The error tells us that there is no field \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"foo\"), \" on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Query\"), \" type.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"/Users/michael/Local/play/berry/BerryClient/StarWars/Queries.graphql(2,3): error GQL: The field `foo` does not exist on the type `Query`. [/Users/michael/Local/play/berry/BerryClient/BerryClient.csproj]\\n\")), mdx(\"p\", null, \"Your GraphQL query document is not just a string, it properly compiles and is fully typed. Let's change our query to the following and compile again:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-graphql\"\n  }, \"query getFoo {\\n  hero {\\n    name\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"dotnet build\\n\")), mdx(\"p\", null, \"Now our project changes and we get a new \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Generated\"), \" folder that has all the types that we need to communicate with our backend.\"), mdx(\"p\", null, \"Let us have a look at our client interface for a minute.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public interface IStarWarsClient\\n{\\n    Task<IOperationResult<IGetFoo>> GetFooAsync();\\n\\n    Task<IOperationResult<IGetFoo>> GetFooAsync(\\n        CancellationToken cancellationToken);\\n}\\n\")), mdx(\"p\", null, \"The client will have for each operation in your query file one method that will execute that exact operation.\"), mdx(\"p\", null, \"Since, with GraphQL you essentially design your own service API by writing a query document your types can become quite messy very quickly.\"), mdx(\"p\", null, \"In order to avoid getting a messy API and to give you control over how your C# API will look like we are using fragments to infer types.\"), mdx(\"p\", null, \"Let us redesign our query with fragments and make it a bit more complex.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-graphql\"\n  }, \"query getHero {\\n  hero {\\n    ...SomeDroid\\n    ...SomeHuman\\n  }\\n}\\n\\nfragment SomeHuman on Human {\\n  ...HasName\\n  homePlanet\\n}\\n\\nfragment SomeDroid on Droid {\\n  ...HasName\\n  primaryFunction\\n}\\n\\nfragment HasName on Character {\\n  name\\n}\\n\")), mdx(\"p\", null, \"The fragments will yield in the following type structure:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public interface ISomeHuman\\n    : IHasName\\n{\\n    string HomePlanet { get; }\\n}\\n\\npublic interface ISomeDroid\\n    : IHasName\\n{\\n    string PrimaryFunction { get; }\\n}\\n\\npublic interface IHasName\\n{\\n    string Name { get; }\\n}\\n\")), mdx(\"p\", null, \"As we go forward, we will introduce some directives that will let you further manipulate the types like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@spread\"), \". \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@spread\"), \" will let you spread the fields of a child object over its parent object.\"), mdx(\"p\", null, \"Let's make one more tweak to our query and then we get this example running.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-graphql\"\n  }, \"query getHero($episode: Episode) {\\n  hero(episode: $episode) {\\n    ...SomeDroid\\n    ...SomeHuman\\n  }\\n}\\n\\nfragment SomeHuman on Human {\\n  ...HasName\\n  homePlanet\\n}\\n\\nfragment SomeDroid on Droid {\\n  ...HasName\\n  primaryFunction\\n}\\n\\nfragment HasName on Character {\\n  name\\n}\\n\")), mdx(\"p\", null, \"By definig a variable with our operation we now can pass in arguments into our operation.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public interface IStarWarsClient\\n{\\n    Task<IOperationResult<IGetHero>> GetHeroAsync(\\n        Episode episode);\\n\\n    Task<IOperationResult<IGetHero>> GetHeroAsync(\\n        Episode episode,\\n        CancellationToken cancellationToken);\\n}\\n\")), mdx(\"p\", null, \"OK, let's get it running and then go into more details. By default the generator will also generate dependency injection code for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Microsoft.Extensions.DependencyInjection\"), \". In order to get our client up and running we just have to set up a dependency injection container.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Note: You can shut of dependency injection generation with a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"MSBuild\"), \" property. The client can also be instantiated with a builder or by using a different dependency injection container.\")), mdx(\"p\", null, \"Replace you \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Program\"), \" class with the following code.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"class Program\\n{\\n    static async Task Main(string[] args)\\n    {\\n        var serviceCollection = new ServiceCollection();\\n        serviceCollection.AddDefaultScalarSerializers();\\n        serviceCollection.AddStarWarsClient();\\n        serviceCollection.AddHttpClient(\\\"StarWarsClient\\\")\\n            .ConfigureHttpClient(client =>\\n                client.BaseAddress = new Uri(\\\"http://localhost:5000/graphql\\\"));\\n\\n        IServiceProvider services = serviceCollection.BuildServiceProvider();\\n        IStarWarsClient client = services.GetRequiredService<IStarWarsClient>();\\n\\n        IOperationResult<IGetHero> result = await client.GetHeroAsync(Episode.Newhope);\\n        Console.WriteLine(((ISomeDroid)result.Data.Hero).Name);\\n\\n        result = await client.GetHeroAsync(Episode.Empire);\\n        Console.WriteLine(((ISomeHuman)result.Data.Hero).Name);\\n    }\\n}\\n\")), mdx(\"p\", null, \"Run the console and it will output the following;\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"R2-D2\\nLuke Skywalker\\n\")), mdx(\"h2\", {\n    \"id\": \"generation-options\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#generation-options\",\n    \"aria-label\": \"generation options permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 512 512\",\n    \"width\": \"16\",\n    \"height\": \"16\",\n    \"fill\": \"var(--heading-text-color)\"\n  }, \"\\n                        \", mdx(\"path\", {\n    parentName: \"svg\",\n    \"d\": \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  }), \"\\n                      \")), \"Generation Options\"), mdx(\"p\", null, \"By default, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Strawberry Shake\"), \" will generate C# 7.3 without nullable reference types. We also by default generate dependency injection code for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Microsoft.Extensions.DependencyInjection\"), \".\"), mdx(\"p\", null, \"If the generator detects that you are using C# 8.0 and enabled support for nullable reference types, then the generate is switching to produce code with nullable reference types.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-xml\"\n  }, \"<PropertyGroup>\\n  <LangVersion>8.0</LangVersion>\\n  <Nullable>enable</Nullable>\\n</PropertyGroup>\\n\")), mdx(\"p\", null, \"In order to manually overwrite those defaults, we added some build properties that you can use.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-xml\"\n  }, \"<PropertyGroup>\\n  <BerryLangVersion>CSharp_8_0</BerryLangVersion>\\n  <BerryEnableDI>true</BerryEnableDI>\\n  <BerryNamespace>$(RootNamespace)</BerryNamespace>\\n</PropertyGroup>\\n\")), mdx(\"h2\", {\n    \"id\": \"dependency-injection\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#dependency-injection\",\n    \"aria-label\": \"dependency injection permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 512 512\",\n    \"width\": \"16\",\n    \"height\": \"16\",\n    \"fill\": \"var(--heading-text-color)\"\n  }, \"\\n                        \", mdx(\"path\", {\n    parentName: \"svg\",\n    \"d\": \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  }), \"\\n                      \")), \"Dependency Injection\"), mdx(\"p\", null, \"The client API can be used with other dependency injection container and also without dependency injection at all.\"), mdx(\"p\", null, \"The execution pipeline can be extended or completely swapped out. This is an important aspect of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Strawberry Shake\"), \" since this allows us to add cross-cutting concerns like auto-batching, persisted query support and other features.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"private static IServiceCollection TryAddDefaultHttpPipeline(\\n    this IServiceCollection serviceCollection)\\n{\\n    serviceCollection.TryAddSingleton<OperationDelegate>(\\n        sp => HttpPipelineBuilder.New()\\n            .Use<CreateStandardRequestMiddleware>()\\n            .Use<SendHttpRequestMiddleware>()\\n            .Use<ParseSingleResultMiddleware>()\\n            .Build(sp));\\n    return serviceCollection;\\n}\\n\")), mdx(\"p\", null, \"When used with Microsoft's dependency injection container then we are also using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IHttpFactory\"), \" which allows for integration with polly and others.\"), mdx(\"h2\", {\n    \"id\": \"roadmap\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#roadmap\",\n    \"aria-label\": \"roadmap permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 512 512\",\n    \"width\": \"16\",\n    \"height\": \"16\",\n    \"fill\": \"var(--heading-text-color)\"\n  }, \"\\n                        \", mdx(\"path\", {\n    parentName: \"svg\",\n    \"d\": \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  }), \"\\n                      \")), \"Roadmap\"), mdx(\"p\", null, \"We are still heavy at work on the client and generator and this first preview is where we invite people to try it out in order to get feedback.\"), mdx(\"p\", null, \"There is still a ton of work to be done and a ton of tests to be written to get this up for prime time.\"), mdx(\"p\", null, \"We will have I think two more weeks to work on the generator to iron out generation issues. We will add documentation tags and things like that over the next view weeks.\"), mdx(\"p\", null, \"Also, there are some generator directives that should show up next week like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@spread\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@name\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@type\"), \".\"), mdx(\"p\", null, \"Moreover, we will add support for local schema stitching. We already integrated the stitching engine into the generator but have a view more things to do before this works properly.\"), mdx(\"p\", null, \"Local schema stitching will allow you to focus on your client API without having to wonder which client you have to use for which service. Also, it will allow you to form one local schema from which you can generate the types exactly like you want them.\"), mdx(\"p\", null, \"Furthermore, there are execution features that we are currently adding like auto-batching and manual-batching. Support for subscription, \\xB4@defer\\xB4 and persisted queries are also coming.\"), mdx(\"p\", null, \"Last but not least we have a lot to do on the tooling side. We want to have a nice integration with all Visual Studios and are working on things like live generation. You can get a feeling for this by doing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dotnet watch build\"), \". We have updated the watch information to exclude the generated files and include the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"GraphQL\"), \" files.\"), mdx(\"p\", null, \"Please check it out and give us feedback so we can adjust and refine the experience further.\"), mdx(\"p\", null, \"If you want to get into contact with us head over to our slack channel and join our community.\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"readingTime":{"text":"10 min read"}}},"site":{"siteMetadata":{"siteUrl":"https://chillicream.com","author":"Chilli_Cream"}}},"pageContext":{}},"staticQueryHashes":["2890364758","3416206942","4218812017"]}