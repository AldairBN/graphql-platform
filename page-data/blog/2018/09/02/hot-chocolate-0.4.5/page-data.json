{"componentChunkName":"component---src-templates-blog-article-template-tsx","path":"/blog/2018/09/02/hot-chocolate-0.4.5","result":{"data":{"markdownRemark":{"frontmatter":{"featuredImage":null,"path":"/blog/2018/09/02/hot-chocolate-0.4.5","title":"GraphQL - Hot Chocolate 0.4.5","tags":["hotchocolate","graphql","dotnet","aspnetcore"],"author":"Michael Staib","authorImageUrl":"https://avatars1.githubusercontent.com/u/9714350?s=100&v=4","authorUrl":"https://github.com/michaelstaib","date":"September 02, 2018"},"html":"<p>With version 0.4.5 we closed a lot of spec gaps and refined the schema configuration API.</p>\n<p>We now are finished with implementing the query validation rules. The following rules were added since version 0.4.0:</p>\n<ul>\n<li>Argument Names <a href=\"https://github.com/ChilliCream/hotchocolate/issues/111\">111</a></li>\n<li>Fragments Must Be Used <a href=\"https://github.com/ChilliCream/hotchocolate/issues/116\">116</a></li>\n<li>Fragment Name Uniqueness <a href=\"https://github.com/ChilliCream/hotchocolate/issues/113\">113</a></li>\n<li>Leaf Field Selections <a href=\"https://github.com/ChilliCream/hotchocolate/issues/110\">110</a></li>\n<li>Fragments On Composite Types <a href=\"https://github.com/ChilliCream/hotchocolate/issues/115\">115</a></li>\n<li>Fragment spreads must not form cycles <a href=\"https://github.com/ChilliCream/hotchocolate/issues/118\">118</a></li>\n<li>Fragment spread target defined <a href=\"https://github.com/ChilliCream/hotchocolate/issues/117\">117</a></li>\n<li>Fragment spread is possible <a href=\"https://github.com/ChilliCream/hotchocolate/issues/119\">119</a></li>\n<li>Fragment Spread Type Existence <a href=\"https://github.com/ChilliCream/hotchocolate/issues/114\">114</a></li>\n<li>Input Object Field Names <a href=\"https://github.com/ChilliCream/hotchocolate/issues/121\">121</a></li>\n<li>Input Object Required Fields <a href=\"https://github.com/ChilliCream/hotchocolate/issues/123\">123</a></li>\n<li>Input Object Field Uniqueness <a href=\"https://github.com/ChilliCream/hotchocolate/issues/122\">122</a></li>\n<li>Directives Are Defined <a href=\"https://github.com/ChilliCream/hotchocolate/issues/124\">124</a></li>\n<li>Values of Correct Type <a href=\"https://github.com/ChilliCream/hotchocolate/issues/120\">120</a></li>\n</ul>\n<p>We now also support the <code class=\"language-text\">@deprectaed</code> directive when using schema-first.</p>\n<p>Furthermore, we fixed a lot of bugs around schema-first. So, at the moment code-first is still the most viable way to create a schema,but we are working hard to get both flavours on par.</p>\n<p>Apart from that we now allow for non-terminating errors within a field-resolver.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"56553871838872486000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public IEnumerable<ICharacter> GetCharacter(string[] characterIds, IResolverContext context)\n{\n    foreach (string characterId in characterIds)\n    {\n        ICharacter character = _repository.GetCharacter(characterId);\n        if (character == null)\n        {\n            context.ReportError(\n                &quot;Could not resolve a charachter for the &quot; +\n                \\$&quot;character-id {characterId}.&quot;);\n        }\n        else\n        {\n            yield return character;\n        }\n    }\n}`, `56553871838872486000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>ICharacter<span class=\"token punctuation\">></span></span> <span class=\"token function\">GetCharacter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> characterIds<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IResolverContext</span> context<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> characterId <span class=\"token keyword\">in</span> characterIds<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ICharacter</span> character <span class=\"token operator\">=</span> _repository<span class=\"token punctuation\">.</span><span class=\"token function\">GetCharacter</span><span class=\"token punctuation\">(</span>characterId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>character <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            context<span class=\"token punctuation\">.</span><span class=\"token function\">ReportError</span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"Could not resolve a charachter for the \"</span> <span class=\"token operator\">+</span>\n                <span class=\"token interpolation-string\"><span class=\"token string\">$\"character-id </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">characterId</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">.\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> character<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you want to share resolver logic between types in your schema you can now do that with shared resolvers which can be bound to fields:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"8705993228722853000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied code example\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public class PersonResolvers\n{\n    public Task<IEnumerable<Person>> GetFriends(Person person, [Service]IPersonRepository repository)\n    {\n        return repository.GetFriendsAsync(person.FriendIds);\n    }\n}\n\npublic class PersonType : ObjectType<Person>\n{\n    protected override void Configure(IObjectDescriptor<Person> desc)\n    {\n        desc.Field(t => t.FriendIds).Ignore();\n        desc.Field<PersonResolver>(t => t.GetFriends(default, default));\n    }\n}`, `8705993228722853000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"Copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PersonResolvers</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>IEnumerable<span class=\"token punctuation\">&lt;</span>Person<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">GetFriends</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span> person<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Service</span></span><span class=\"token punctuation\">]</span><span class=\"token class-name\">IPersonRepository</span> repository<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> repository<span class=\"token punctuation\">.</span><span class=\"token function\">GetFriendsAsync</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>FriendIds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PersonType</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ObjectType<span class=\"token punctuation\">&lt;</span>Person<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IObjectDescriptor<span class=\"token punctuation\">&lt;</span>Person<span class=\"token punctuation\">></span></span> desc<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        desc<span class=\"token punctuation\">.</span><span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span>FriendIds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Ignore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        desc<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Field</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>PersonResolver<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span><span class=\"token function\">GetFriends</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"what-comes-next\" style=\"position:relative;\"><a href=\"#what-comes-next\" aria-label=\"what comes next permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What Comes Next</h2>\n<p>With version 0.5 we will focus on subscriptions and custom directives.</p>\n<p>Custom will allow for writing field resolver middlewares that alter or replace the default execution behaviour.</p>\n<p>Subscriptions is one of our last spec gaps.</p>","fields":{"readingTime":{"text":"2 min read"}}},"site":{"siteMetadata":{"siteUrl":"https://chillicream.com","author":"Chilli_Cream"}}},"pageContext":{}}}