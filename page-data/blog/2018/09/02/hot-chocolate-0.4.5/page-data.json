{"componentChunkName":"component---src-templates-blog-article-template-tsx","path":"/blog/2018/09/02/hot-chocolate-0.4.5","result":{"data":{"mdx":{"excerpt":"With version 0.4.5 we closed a lot of spec gaps and refined the schema configuration API. We now are finished with implementing the queryâ€¦","frontmatter":{"featuredImage":null,"path":"/blog/2018/09/02/hot-chocolate-0.4.5","title":"GraphQL - Hot Chocolate 0.4.5","tags":["hotchocolate","graphql","dotnet","aspnetcore"],"author":"Michael Staib","authorImageUrl":"https://avatars1.githubusercontent.com/u/9714350?s=100&v=4","authorUrl":"https://github.com/michaelstaib","date":"September 02, 2018"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"path\": \"/blog/2018/09/02/hot-chocolate-0.4.5\",\n  \"date\": \"2018-09-02\",\n  \"title\": \"GraphQL - Hot Chocolate 0.4.5\",\n  \"tags\": [\"hotchocolate\", \"graphql\", \"dotnet\", \"aspnetcore\"],\n  \"author\": \"Michael Staib\",\n  \"authorUrl\": \"https://github.com/michaelstaib\",\n  \"authorImageUrl\": \"https://avatars1.githubusercontent.com/u/9714350?s=100&v=4\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"With version 0.4.5 we closed a lot of spec gaps and refined the schema configuration API.\"), mdx(\"p\", null, \"We now are finished with implementing the query validation rules. The following rules were added since version 0.4.0:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Argument Names \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/ChilliCream/hotchocolate/issues/111\"\n  }, \"111\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Fragments Must Be Used \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/ChilliCream/hotchocolate/issues/116\"\n  }, \"116\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Fragment Name Uniqueness \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/ChilliCream/hotchocolate/issues/113\"\n  }, \"113\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Leaf Field Selections \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/ChilliCream/hotchocolate/issues/110\"\n  }, \"110\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Fragments On Composite Types \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/ChilliCream/hotchocolate/issues/115\"\n  }, \"115\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Fragment spreads must not form cycles \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/ChilliCream/hotchocolate/issues/118\"\n  }, \"118\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Fragment spread target defined \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/ChilliCream/hotchocolate/issues/117\"\n  }, \"117\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Fragment spread is possible \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/ChilliCream/hotchocolate/issues/119\"\n  }, \"119\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Fragment Spread Type Existence \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/ChilliCream/hotchocolate/issues/114\"\n  }, \"114\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Input Object Field Names \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/ChilliCream/hotchocolate/issues/121\"\n  }, \"121\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Input Object Required Fields \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/ChilliCream/hotchocolate/issues/123\"\n  }, \"123\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Input Object Field Uniqueness \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/ChilliCream/hotchocolate/issues/122\"\n  }, \"122\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Directives Are Defined \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/ChilliCream/hotchocolate/issues/124\"\n  }, \"124\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Values of Correct Type \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/ChilliCream/hotchocolate/issues/120\"\n  }, \"120\"))), mdx(\"p\", null, \"We now also support the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@deprectaed\"), \" directive when using schema-first.\"), mdx(\"p\", null, \"Furthermore, we fixed a lot of bugs around schema-first. So, at the moment code-first is still the most viable way to create a schema,but we are working hard to get both flavours on par.\"), mdx(\"p\", null, \"Apart from that we now allow for non-terminating errors within a field-resolver.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public IEnumerable<ICharacter> GetCharacter(string[] characterIds, IResolverContext context)\\n{\\n    foreach (string characterId in characterIds)\\n    {\\n        ICharacter character = _repository.GetCharacter(characterId);\\n        if (character == null)\\n        {\\n            context.ReportError(\\n                \\\"Could not resolve a character for the \\\" +\\n                $\\\"character-id {characterId}.\\\");\\n        }\\n        else\\n        {\\n            yield return character;\\n        }\\n    }\\n}\\n\")), mdx(\"p\", null, \"If you want to share resolver logic between types in your schema you can now do that with shared resolvers which can be bound to fields:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"public class PersonResolvers\\n{\\n    public Task<IEnumerable<Person>> GetFriends(Person person, [Service]IPersonRepository repository)\\n    {\\n        return repository.GetFriendsAsync(person.FriendIds);\\n    }\\n}\\n\\npublic class PersonType : ObjectType<Person>\\n{\\n    protected override void Configure(IObjectDescriptor<Person> desc)\\n    {\\n        desc.Field(t => t.FriendIds).Ignore();\\n        desc.Field<PersonResolver>(t => t.GetFriends(default, default));\\n    }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"what-comes-next\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#what-comes-next\",\n    \"aria-label\": \"what comes next permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\",\n    \"viewBox\": \"0 0 512 512\",\n    \"width\": \"16\",\n    \"height\": \"16\",\n    \"fill\": \"var(--heading-text-color)\"\n  }, \"\\n                        \", mdx(\"path\", {\n    parentName: \"svg\",\n    \"d\": \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  }), \"\\n                      \")), \"What Comes Next\"), mdx(\"p\", null, \"With version 0.5 we will focus on subscriptions and custom directives.\"), mdx(\"p\", null, \"Custom will allow for writing field resolver middlewares that alter or replace the default execution behaviour.\"), mdx(\"p\", null, \"Subscriptions is one of our last spec gaps.\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"readingTime":{"text":"2 min read"}}},"site":{"siteMetadata":{"siteUrl":"https://chillicream.com","author":"Chilli_Cream"}}},"pageContext":{}},"staticQueryHashes":["2890364758","3416206942","4218812017"]}